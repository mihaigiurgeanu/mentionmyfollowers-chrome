if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

/**
 * React v0.12.2
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.React=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var ReactChildren = _dereq_("./ReactChildren");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactDOM = _dereq_("./ReactDOM");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDefaultInjection = _dereq_("./ReactDefaultInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTypes = _dereq_("./ReactPropTypes");
var ReactServerRendering = _dereq_("./ReactServerRendering");
var ReactTextComponent = _dereq_("./ReactTextComponent");

var assign = _dereq_("./Object.assign");
var deprecated = _dereq_("./deprecated");
var onlyChild = _dereq_("./onlyChild");

ReactDefaultInjection.inject();

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;

if ("production" !== "development") {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
}

// TODO: Drop legacy elements once classes no longer export these factories
createElement = ReactLegacyElement.wrapCreateElement(
  createElement
);
createFactory = ReactLegacyElement.wrapCreateFactory(
  createFactory
);

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    only: onlyChild
  },
  DOM: ReactDOM,
  PropTypes: ReactPropTypes,
  initializeTouchEvents: function(shouldUseTouch) {
    EventPluginUtils.useTouchEvents = shouldUseTouch;
  },
  createClass: ReactCompositeComponent.createClass,
  createElement: createElement,
  createFactory: createFactory,
  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
  render: render,
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  isValidClass: ReactLegacyElement.isValidClass,
  isValidElement: ReactElement.isValidElement,
  withContext: ReactContext.withContext,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign,

  // Deprecations (remove for 0.13)
  renderComponent: deprecated(
    'React',
    'renderComponent',
    'render',
    this,
    render
  ),
  renderComponentToString: deprecated(
    'React',
    'renderComponentToString',
    'renderToString',
    this,
    ReactServerRendering.renderToString
  ),
  renderComponentToStaticMarkup: deprecated(
    'React',
    'renderComponentToStaticMarkup',
    'renderToStaticMarkup',
    this,
    ReactServerRendering.renderToStaticMarkup
  ),
  isValidComponent: deprecated(
    'React',
    'isValidComponent',
    'isValidElement',
    this,
    ReactElement.isValidElement
  )
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    Component: ReactComponent,
    CurrentOwner: ReactCurrentOwner,
    DOMComponent: ReactDOMComponent,
    DOMPropertyOperations: DOMPropertyOperations,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    MultiChild: ReactMultiChild,
    TextComponent: ReactTextComponent
  });
}

if ("production" !== "development") {
  var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // If we're in Chrome, look for the devtools marker and provide a download
    // link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        console.debug(
          'Download the React DevTools for a better development experience: ' +
          'http://fb.me/react-devtools'
        );
      }
    }

    var expectedFeatures = [
      // shims
      Array.isArray,
      Array.prototype.every,
      Array.prototype.forEach,
      Array.prototype.indexOf,
      Array.prototype.map,
      Date.now,
      Function.prototype.bind,
      Object.keys,
      String.prototype.split,
      String.prototype.trim,

      // shams
      Object.create,
      Object.freeze
    ];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error(
          'One or more ES5 shim/shams expected by React are not available: ' +
          'http://fb.me/react-warning-polyfills'
        );
        break;
      }
    }
  }
}

// Version exists only in the open-source version of React, not in Facebook's
// internal version.
React.version = '0.12.2';

module.exports = React;

},{"./DOMPropertyOperations":12,"./EventPluginUtils":20,"./ExecutionEnvironment":22,"./Object.assign":27,"./ReactChildren":31,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactDOM":37,"./ReactDOMComponent":39,"./ReactDefaultInjection":49,"./ReactElement":52,"./ReactElementValidator":53,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./ReactPropTypes":72,"./ReactServerRendering":76,"./ReactTextComponent":78,"./deprecated":106,"./onlyChild":137}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusMixin
 * @typechecks static-only
 */

"use strict";

var focusNode = _dereq_("./focusNode");

var AutoFocusMixin = {
  componentDidMount: function() {
    if (this.props.autoFocus) {
      focusNode(this.getDOMNode());
    }
  }
};

module.exports = AutoFocusMixin;

},{"./focusNode":111}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var SyntheticInputEvent = _dereq_("./SyntheticInputEvent");

var keyOf = _dereq_("./keyOf");

var canUseTextInputEvent = (
  ExecutionEnvironment.canUseDOM &&
  'TextEvent' in window &&
  !('documentMode' in document || isPresto())
);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return (
    typeof opera === 'object' &&
    typeof opera.version === 'function' &&
    parseInt(opera.version(), 10) <= 12
  );
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBeforeInput: null}),
      captured: keyOf({onBeforeInputCapture: null})
    },
    dependencies: [
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyPress,
      topLevelTypes.topTextInput,
      topLevelTypes.topPaste
    ]
  }
};

// Track characters inserted via keypress and composition events.
var fallbackChars = null;

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (
    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
    !(nativeEvent.ctrlKey && nativeEvent.altKey)
  );
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var chars;

    if (canUseTextInputEvent) {
      switch (topLevelType) {
        case topLevelTypes.topKeyPress:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return;
          }

          hasSpaceKeypress = true;
          chars = SPACEBAR_CHAR;
          break;

        case topLevelTypes.topTextInput:
          // Record the characters to be added to the DOM.
          chars = nativeEvent.data;

          // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to blacklist it.
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return;
          }

          // Otherwise, carry on.
          break;

        default:
          // For other native event types, do nothing.
          return;
      }
    } else {
      switch (topLevelType) {
        case topLevelTypes.topPaste:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          fallbackChars = null;
          break;
        case topLevelTypes.topKeyPress:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
            fallbackChars = String.fromCharCode(nativeEvent.which);
          }
          break;
        case topLevelTypes.topCompositionEnd:
          fallbackChars = nativeEvent.data;
          break;
      }

      // If no changes have occurred to the fallback string, no relevant
      // event has fired and we're done.
      if (fallbackChars === null) {
        return;
      }

      chars = fallbackChars;
    }

    // If no characters are being inserted, no BeforeInput event should
    // be fired.
    if (!chars) {
      return;
    }

    var event = SyntheticInputEvent.getPooled(
      eventTypes.beforeInput,
      topLevelTargetID,
      nativeEvent
    );

    event.data = chars;
    fallbackChars = null;
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }
};

module.exports = BeforeInputEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./SyntheticInputEvent":89,"./keyOf":133}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

"use strict";

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  strokeOpacity: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop) {
  prefixes.forEach(function(prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundImage: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundColor: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

},{}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var camelizeStyleName = _dereq_("./camelizeStyleName");
var dangerousStyleValue = _dereq_("./dangerousStyleValue");
var hyphenateStyleName = _dereq_("./hyphenateStyleName");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

var processStyleName = memoizeStringOnly(function(styleName) {
  return hyphenateStyleName(styleName);
});

var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("production" !== "development") {
  var warnedStyleNames = {};

  var warnHyphenatedStyleName = function(name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    ("production" !== "development" ? warning(
      false,
      'Unsupported style property ' + name + '. Did you mean ' +
      camelizeStyleName(name) + '?'
    ) : null);
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function(styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function(node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("production" !== "development") {
        if (styleName.indexOf('-') > -1) {
          warnHyphenatedStyleName(styleName);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;

},{"./CSSProperty":4,"./ExecutionEnvironment":22,"./camelizeStyleName":100,"./dangerousStyleValue":105,"./hyphenateStyleName":124,"./memoizeStringOnly":135,"./warning":145}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function(callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      ("production" !== "development" ? invariant(
        callbacks.length === contexts.length,
        "Mismatched list of contexts in callback queue"
      ) : invariant(callbacks.length === contexts.length));
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0, l = callbacks.length; i < l; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function() {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function() {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;

},{"./Object.assign":27,"./PooledClass":28,"./invariant":126}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactUpdates = _dereq_("./ReactUpdates");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var isEventSupported = _dereq_("./isEventSupported");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({onChange: null}),
      captured: keyOf({onChangeCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topChange,
      topLevelTypes.topClick,
      topLevelTypes.topFocus,
      topLevelTypes.topInput,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  return (
    elem.nodeName === 'SELECT' ||
    (elem.nodeName === 'INPUT' && elem.type === 'file')
  );
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (
    !('documentMode' in document) || document.documentMode > 8
  );
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(
    eventTypes.change,
    activeElementID,
    nativeEvent
  );
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue();
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}


/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (
    !('documentMode' in document) || document.documentMode > 9
  );
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp =  {
  get: function() {
    return activeElementValueProp.get.call(this);
  },
  set: function(val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(
    target.constructor.prototype,
    'value'
  );

  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange ||
      topLevelType === topLevelTypes.topKeyUp ||
      topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}


/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return (
    elem.nodeName === 'INPUT' &&
    (elem.type === 'checkbox' || elem.type === 'radio')
  );
}

function getTargetIDForClickEvent(
    topLevelType,
    topLevelTarget,
    topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
      if (targetID) {
        var event = SyntheticEvent.getPooled(
          eventTypes.change,
          targetID,
          nativeEvent
        );
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(
        topLevelType,
        topLevelTarget,
        topLevelTargetID
      );
    }
  }

};

module.exports = ChangeEventPlugin;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactUpdates":79,"./SyntheticEvent":87,"./isEventSupported":127,"./isTextInputElement":129,"./keyOf":133}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

"use strict";

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function() {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;

},{}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CompositionEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticCompositionEvent = _dereq_("./SyntheticCompositionEvent");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var keyOf = _dereq_("./keyOf");

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var useCompositionEvent = (
  ExecutionEnvironment.canUseDOM &&
  'CompositionEvent' in window
);

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. In Korean, for example,
// the compositionend event contains only one character regardless of
// how many characters have been composed since compositionstart.
// We therefore use the fallback data while still using the native
// events as triggers.
var useFallbackData = (
  !useCompositionEvent ||
  (
    'documentMode' in document &&
    document.documentMode > 8 &&
    document.documentMode <= 11
  )
);

var topLevelTypes = EventConstants.topLevelTypes;
var currentComposition = null;

// Events and their corresponding property names.
var eventTypes = {
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionEnd: null}),
      captured: keyOf({onCompositionEndCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionEnd,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionStart: null}),
      captured: keyOf({onCompositionStartCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionStart,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCompositionUpdate: null}),
      captured: keyOf({onCompositionUpdateCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topCompositionUpdate,
      topLevelTypes.topKeyDown,
      topLevelTypes.topKeyPress,
      topLevelTypes.topKeyUp,
      topLevelTypes.topMouseDown
    ]
  }
};

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackStart(topLevelType, nativeEvent) {
  return (
    topLevelType === topLevelTypes.topKeyDown &&
    nativeEvent.keyCode === START_KEYCODE
  );
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return (nativeEvent.keyCode !== START_KEYCODE);
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Helper class stores information about selection and document state
 * so we can figure out what changed at a later date.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this.root = root;
  this.startSelection = ReactInputSelection.getSelection(root);
  this.startValue = this.getText();
}

/**
 * Get current text of input.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getText = function() {
  return this.root.value || this.root[getTextContentAccessor()];
};

/**
 * Text that has changed since the start of composition.
 *
 * @return {string}
 */
FallbackCompositionState.prototype.getData = function() {
  var endValue = this.getText();
  var prefixLength = this.startSelection.start;
  var suffixLength = this.startValue.length - this.startSelection.end;

  return endValue.substr(
    prefixLength,
    endValue.length - suffixLength - prefixLength
  );
};

/**
 * This plugin creates `onCompositionStart`, `onCompositionUpdate` and
 * `onCompositionEnd` events on inputs, textareas and contentEditable
 * nodes.
 */
var CompositionEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    var eventType;
    var data;

    if (useCompositionEvent) {
      eventType = getCompositionEventType(topLevelType);
    } else if (!currentComposition) {
      if (isFallbackStart(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionStart;
      }
    } else if (isFallbackEnd(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionEnd;
    }

    if (useFallbackData) {
      // The current composition is stored statically and must not be
      // overwritten while composition continues.
      if (!currentComposition && eventType === eventTypes.compositionStart) {
        currentComposition = new FallbackCompositionState(topLevelTarget);
      } else if (eventType === eventTypes.compositionEnd) {
        if (currentComposition) {
          data = currentComposition.getData();
          currentComposition = null;
        }
      }
    }

    if (eventType) {
      var event = SyntheticCompositionEvent.getPooled(
        eventType,
        topLevelTargetID,
        nativeEvent
      );
      if (data) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = data;
      }
      EventPropagators.accumulateTwoPhaseDispatches(event);
      return event;
    }
  }
};

module.exports = CompositionEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ExecutionEnvironment":22,"./ReactInputSelection":59,"./SyntheticCompositionEvent":85,"./getTextContentAccessor":121,"./keyOf":133}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

"use strict";

var Danger = _dereq_("./Danger");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var getTextContentAccessor = _dereq_("./getTextContentAccessor");
var invariant = _dereq_("./invariant");

/**
 * The DOM property to use when setting text content.
 *
 * @type {string}
 * @private
 */
var textContentAccessor = getTextContentAccessor();

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.
  parentNode.insertBefore(
    childNode,
    parentNode.childNodes[index] || null
  );
}

var updateTextContent;
if (textContentAccessor === 'textContent') {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    node.textContent = text;
  };
} else {
  /**
   * Sets the text content of `node` to `text`.
   *
   * @param {DOMElement} node Node to change
   * @param {string} text New text content
   */
  updateTextContent = function(node, text) {
    // In order to preserve newlines correctly, we can't use .innerText to set
    // the contents (see #1080), so we empty the element then append a text node
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
    if (text) {
      var doc = node.ownerDocument || document;
      node.appendChild(doc.createTextNode(text));
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: updateTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function(updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; update = updates[i]; i++) {
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        ("production" !== "development" ? invariant(
          updatedChild,
          'processUpdates(): Unable to find child %s of element. This ' +
          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
          'browser), usually due to forgetting a <tbody> when using tables, ' +
          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements '+
          'in an <svg> parent. Try inspecting the child nodes of the element ' +
          'with React ID `%s`.',
          updatedIndex,
          parentID
        ) : invariant(updatedChild));

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; update = updates[k]; k++) {
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(
            update.parentNode,
            renderedMarkup[update.markupIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(
            update.parentNode,
            initialChildren[update.parentID][update.fromIndex],
            update.toIndex
          );
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          updateTextContent(
            update.parentNode,
            update.textContent
          );
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;

},{"./Danger":13,"./ReactMultiChildUpdateTypes":65,"./getTextContentAccessor":121,"./invariant":126}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

/*jslint bitwise: true */

"use strict";

var invariant = _dereq_("./invariant");

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function(domPropertyConfig) {
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(
        domPropertyConfig.isCustomAttribute
      );
    }

    for (var propName in Properties) {
      ("production" !== "development" ? invariant(
        !DOMProperty.isStandardName.hasOwnProperty(propName),
        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
        '\'%s\' which has already been injected. You may be accidentally ' +
        'injecting the same DOM property config twice, or you may be ' +
        'injecting two configs that have conflicting property names.',
        propName
      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

      DOMProperty.isStandardName[propName] = true;

      var lowerCased = propName.toLowerCase();
      DOMProperty.getPossibleStandardName[lowerCased] = propName;

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        DOMProperty.getPossibleStandardName[attributeName] = propName;
        DOMProperty.getAttributeName[propName] = attributeName;
      } else {
        DOMProperty.getAttributeName[propName] = lowerCased;
      }

      DOMProperty.getPropertyName[propName] =
        DOMPropertyNames.hasOwnProperty(propName) ?
          DOMPropertyNames[propName] :
          propName;

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
      } else {
        DOMProperty.getMutationMethod[propName] = null;
      }

      var propConfig = Properties[propName];
      DOMProperty.mustUseAttribute[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
      DOMProperty.mustUseProperty[propName] =
        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
      DOMProperty.hasSideEffects[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
      DOMProperty.hasBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
      DOMProperty.hasNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
      DOMProperty.hasPositiveNumericValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
      DOMProperty.hasOverloadedBooleanValue[propName] =
        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

      ("production" !== "development" ? invariant(
        !DOMProperty.mustUseAttribute[propName] ||
          !DOMProperty.mustUseProperty[propName],
        'DOMProperty: Cannot require using both attribute and property: %s',
        propName
      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
        !DOMProperty.mustUseProperty[propName]));
      ("production" !== "development" ? invariant(
        DOMProperty.mustUseProperty[propName] ||
          !DOMProperty.hasSideEffects[propName],
        'DOMProperty: Properties that have side effects must use property: %s',
        propName
      ) : invariant(DOMProperty.mustUseProperty[propName] ||
        !DOMProperty.hasSideEffects[propName]));
      ("production" !== "development" ? invariant(
        !!DOMProperty.hasBooleanValue[propName] +
          !!DOMProperty.hasNumericValue[propName] +
          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
        'numeric value, but not a combination: %s',
        propName
      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
        !!DOMProperty.hasNumericValue[propName] +
        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Checks whether a property name is a standard property.
   * @type {Object}
   */
  isStandardName: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties.
   * @type {Object}
   */
  getPossibleStandardName: {},

  /**
   * Mapping from normalized names to attribute names that differ. Attribute
   * names are used when rendering markup or with `*Attribute()`.
   * @type {Object}
   */
  getAttributeName: {},

  /**
   * Mapping from normalized names to properties on DOM node instances.
   * (This includes properties that mutate due to external factors.)
   * @type {Object}
   */
  getPropertyName: {},

  /**
   * Mapping from normalized names to mutation methods. This will only exist if
   * mutation cannot be set simply by the property or `setAttribute()`.
   * @type {Object}
   */
  getMutationMethod: {},

  /**
   * Whether the property must be accessed and mutated as an object property.
   * @type {Object}
   */
  mustUseAttribute: {},

  /**
   * Whether the property must be accessed and mutated using `*Attribute()`.
   * (This includes anything that fails `<propName> in <element>`.)
   * @type {Object}
   */
  mustUseProperty: {},

  /**
   * Whether or not setting a value causes side effects such as triggering
   * resources to be loaded or text selection changes. We must ensure that
   * the value is only set if it has changed.
   * @type {Object}
   */
  hasSideEffects: {},

  /**
   * Whether the property should be removed when set to a falsey value.
   * @type {Object}
   */
  hasBooleanValue: {},

  /**
   * Whether the property must be numeric or parse as a
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasNumericValue: {},

  /**
   * Whether the property must be positive numeric or parse as a positive
   * numeric and should be removed when set to a falsey value.
   * @type {Object}
   */
  hasPositiveNumericValue: {},

  /**
   * Whether the property can be used as a flag as well as with a value. Removed
   * when strictly equal to false; present without a value when strictly equal
   * to true; present with a value otherwise.
   * @type {Object}
   */
  hasOverloadedBooleanValue: {},

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function(attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function(nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;

},{"./invariant":126}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var memoizeStringOnly = _dereq_("./memoizeStringOnly");
var warning = _dereq_("./warning");

function shouldIgnoreValue(name, value) {
  return value == null ||
    (DOMProperty.hasBooleanValue[name] && !value) ||
    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
}

var processAttributeNameAndPrefix = memoizeStringOnly(function(name) {
  return escapeTextForBrowser(name) + '="';
});

if ("production" !== "development") {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function(name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = (
      DOMProperty.isCustomAttribute(lowerCasedName) ?
        lowerCasedName :
      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
        DOMProperty.getPossibleStandardName[lowerCasedName] :
        null
    );

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    ("production" !== "development" ? warning(
      standardName == null,
      'Unknown DOM property ' + name + '. Did you mean ' + standardName + '?'
    ) : null);

  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function(id) {
    return processAttributeNameAndPrefix(DOMProperty.ID_ATTRIBUTE_NAME) +
      escapeTextForBrowser(id) + '"';
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function(name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      if (shouldIgnoreValue(name, value)) {
        return '';
      }
      var attributeName = DOMProperty.getAttributeName[name];
      if (DOMProperty.hasBooleanValue[name] ||
          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
        return escapeTextForBrowser(attributeName);
      }
      return processAttributeNameAndPrefix(attributeName) +
        escapeTextForBrowser(value) + '"';
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return processAttributeNameAndPrefix(name) +
        escapeTextForBrowser(value) + '"';
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function(node, name, value) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(name, value)) {
        this.deleteValueForProperty(node, name);
      } else if (DOMProperty.mustUseAttribute[name]) {
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== ('' + value)) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        node.removeAttribute(name);
      } else {
        node.setAttribute(name, '' + value);
      }
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function(node, name) {
    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
        DOMProperty.isStandardName[name]) {
      var mutationMethod = DOMProperty.getMutationMethod[name];
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (DOMProperty.mustUseAttribute[name]) {
        node.removeAttribute(DOMProperty.getAttributeName[name]);
      } else {
        var propName = DOMProperty.getPropertyName[name];
        var defaultValue = DOMProperty.getDefaultValueForProperty(
          node.nodeName,
          propName
        );
        if (!DOMProperty.hasSideEffects[name] ||
            ('' + node[propName]) !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if ("production" !== "development") {
      warnUnknownProperty(name);
    }
  }

};

module.exports = DOMPropertyOperations;

},{"./DOMProperty":11,"./escapeTextForBrowser":109,"./memoizeStringOnly":135,"./warning":145}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

/*jslint evil: true, sub: true */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createNodesFromMarkup = _dereq_("./createNodesFromMarkup");
var emptyFunction = _dereq_("./emptyFunction");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function(markupList) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
      'thread. Make sure `window` and `document` are available globally ' +
      'before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      ("production" !== "development" ? invariant(
        markupList[i],
        'dangerouslyRenderMarkup(...): Missing markup.'
      ) : invariant(markupList[i]));
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      for (var resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(
            OPEN_TAG_NAME_EXP,
            // This index will be parsed back out below.
            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
          );
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(
        markupListByNodeName.join(''),
        emptyFunction // Do nothing special with <script> tags.
      );

      for (i = 0; i < renderNodes.length; ++i) {
        var renderNode = renderNodes[i];
        if (renderNode.hasAttribute &&
            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          ("production" !== "development" ? invariant(
            !resultList.hasOwnProperty(resultIndex),
            'Danger: Assigning to an already-occupied result index.'
          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;

        } else if ("production" !== "development") {
          console.error(
            "Danger: Discarding unexpected node:",
            renderNode
          );
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    ("production" !== "development" ? invariant(
      resultListAssignmentCount === resultList.length,
      'Danger: Did not assign to every index of resultList.'
    ) : invariant(resultListAssignmentCount === resultList.length));

    ("production" !== "development" ? invariant(
      resultList.length === markupList.length,
      'Danger: Expected markup to render %s nodes, but rendered %s.',
      markupList.length,
      resultList.length
    ) : invariant(resultList.length === markupList.length));

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
    ("production" !== "development" ? invariant(
      ExecutionEnvironment.canUseDOM,
      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
      'worker thread. Make sure `window` and `document` are available ' +
      'globally before requiring React when unit testing or use ' +
      'React.renderToString for server rendering.'
    ) : invariant(ExecutionEnvironment.canUseDOM));
    ("production" !== "development" ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
    ("production" !== "development" ? invariant(
      oldChild.tagName.toLowerCase() !== 'html',
      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
      '<html> node. This is because browser quirks make this unreliable ' +
      'and/or slow. If you want to render to the root you must use ' +
      'server rendering. See renderComponentToString().'
    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;

},{"./ExecutionEnvironment":22,"./createNodesFromMarkup":104,"./emptyFunction":107,"./getMarkupWrap":118,"./invariant":126}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

"use strict";

 var keyOf = _dereq_("./keyOf");

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [
  keyOf({ResponderEventPlugin: null}),
  keyOf({SimpleEventPlugin: null}),
  keyOf({TapEventPlugin: null}),
  keyOf({EnterLeaveEventPlugin: null}),
  keyOf({ChangeEventPlugin: null}),
  keyOf({SelectEventPlugin: null}),
  keyOf({CompositionEventPlugin: null}),
  keyOf({BeforeInputEventPlugin: null}),
  keyOf({AnalyticsEventPlugin: null}),
  keyOf({MobileSafariClickEventPlugin: null})
];

module.exports = DefaultEventPluginOrder;

},{"./keyOf":133}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

var ReactMount = _dereq_("./ReactMount");
var keyOf = _dereq_("./keyOf");

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({onMouseEnter: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  },
  mouseLeave: {
    registrationName: keyOf({onMouseLeave: null}),
    dependencies: [
      topLevelTypes.topMouseOut,
      topLevelTypes.topMouseOver
    ]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topMouseOver &&
        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut &&
        topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from, to;
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      to =
        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
        win;
    } else {
      from = win;
      to = topLevelTarget;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromID = from ? ReactMount.getID(from) : '';
    var toID = to ? ReactMount.getID(to) : '';

    var leave = SyntheticMouseEvent.getPooled(
      eventTypes.mouseLeave,
      fromID,
      nativeEvent
    );
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(
      eventTypes.mouseEnter,
      toID,
      nativeEvent
    );
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactMount":63,"./SyntheticMouseEvent":91,"./keyOf":133}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var PropagationPhases = keyMirror({bubbled: null, captured: null});

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topBlur: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topReset: null,
  topScroll: null,
  topSelectionChange: null,
  topSubmit: null,
  topTextInput: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;

},{"./keyMirror":132}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function(target, eventType, callback) {
    if (!target.addEventListener) {
      if ("production" !== "development") {
        console.error(
          'Attempted to listen to events during the capture phase on a ' +
          'browser that does not support the capture phase. Your application ' +
          'will not receive some events.'
        );
      }
      return {
        remove: emptyFunction
      };
    } else {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    }
  },

  registerDefault: function() {}
};

module.exports = EventListener;

},{"./emptyFunction":107}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

"use strict";

var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var EventPluginUtils = _dereq_("./EventPluginUtils");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */
var executeDispatchesAndRelease = function(event) {
  if (event) {
    var executeDispatch = EventPluginUtils.executeDispatch;
    // Plugins can provide custom behavior when dispatching events.
    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
    if (PluginModule && PluginModule.executeDispatch) {
      executeDispatch = PluginModule.executeDispatch;
    }
    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var invalid = !InstanceHandle||
    !InstanceHandle.traverseTwoPhase ||
    !InstanceHandle.traverseEnterLeave;
  if (invalid) {
    throw new Error('InstanceHandle not injected before use!');
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function(InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if ("production" !== "development") {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function() {
      if ("production" !== "development") {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function(id, registrationName, listener) {
    ("production" !== "development" ? invariant(
      !listener || typeof listener === 'function',
      'Expected %s listener to be a function, instead got type %s',
      registrationName, typeof listener
    ) : invariant(!listener || typeof listener === 'function'));

    var bankForRegistrationName =
      listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function(id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function(id) {
    for (var registrationName in listenerBank) {
      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0, l = plugins.length; i < l; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(
          topLevelType,
          topLevelTarget,
          topLevelTargetID,
          nativeEvent
        );
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function() {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
    ("production" !== "development" ? invariant(
      !eventQueue,
      'processEventQueue(): Additional events were enqueued while processing ' +
      'an event queue. Support for this has not yet been implemented.'
    ) : invariant(!eventQueue));
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function() {
    listenerBank = {};
  },

  __getListenerBank: function() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;

},{"./EventPluginRegistry":19,"./EventPluginUtils":20,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    ("production" !== "development" ? invariant(
      pluginIndex > -1,
      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
      'the plugin ordering, `%s`.',
      pluginName
    ) : invariant(pluginIndex > -1));
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    ("production" !== "development" ? invariant(
      PluginModule.extractEvents,
      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
      'method, but `%s` does not.',
      pluginName
    ) : invariant(PluginModule.extractEvents));
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      ("production" !== "development" ? invariant(
        publishEventForPlugin(
          publishedEvents[eventName],
          PluginModule,
          eventName
        ),
        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
        eventName,
        pluginName
      ) : invariant(publishEventForPlugin(
        publishedEvents[eventName],
        PluginModule,
        eventName
      )));
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'event name, `%s`.',
    eventName
  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(
          phasedRegistrationName,
          PluginModule,
          eventName
        );
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(
      dispatchConfig.registrationName,
      PluginModule,
      eventName
    );
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  ("production" !== "development" ? invariant(
    !EventPluginRegistry.registrationNameModules[registrationName],
    'EventPluginHub: More than one plugin attempted to publish the same ' +
    'registration name, `%s`.',
    registrationName
  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] =
    PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function(InjectedEventPluginOrder) {
    ("production" !== "development" ? invariant(
      !EventPluginOrder,
      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
      'once. You are likely trying to load more than one copy of React.'
    ) : invariant(!EventPluginOrder));
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) ||
          namesToPlugins[pluginName] !== PluginModule) {
        ("production" !== "development" ? invariant(
          !namesToPlugins[pluginName],
          'EventPluginRegistry: Cannot inject two different event plugins ' +
          'using the same name, `%s`.',
          pluginName
        ) : invariant(!namesToPlugins[pluginName]));
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[
        dispatchConfig.registrationName
      ] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[
        dispatchConfig.phasedRegistrationNames[phase]
      ];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function() {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;

},{"./invariant":126}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var invariant = _dereq_("./invariant");

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function(InjectedMount) {
    injection.Mount = InjectedMount;
    if ("production" !== "development") {
      ("production" !== "development" ? invariant(
        InjectedMount && InjectedMount.getNode,
        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
        'is missing getNode.'
      ) : invariant(InjectedMount && InjectedMount.getNode));
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp ||
         topLevelType === topLevelTypes.topTouchEnd ||
         topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove ||
         topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown ||
         topLevelType === topLevelTypes.topTouchStart;
}


var validateEventDispatches;
if ("production" !== "development") {
  validateEventDispatches = function(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ?
      dispatchListeners.length :
      dispatchListeners ? 1 : 0;

    ("production" !== "development" ? invariant(
      idsIsArr === listenersIsArr && IDsLen === listenersLen,
      'EventPluginUtils: Invalid `event`.'
    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
  };
}

/**
 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
 * kept separate to conserve memory.
 */
function forEachEventDispatch(event, cb) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      cb(event, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    cb(event, dispatchListeners, dispatchIDs);
  }
}

/**
 * Default implementation of PluginModule.executeDispatch().
 * @param {SyntheticEvent} SyntheticEvent to handle
 * @param {function} Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, listener, domID) {
  event.currentTarget = injection.Mount.getNode(domID);
  var returnValue = listener(event, domID);
  event.currentTarget = null;
  return returnValue;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, executeDispatch) {
  forEachEventDispatch(event, executeDispatch);
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return id of the first dispatch execution who's listener returns true, or
 * null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("production" !== "development") {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  ("production" !== "development" ? invariant(
    !Array.isArray(dispatchListener),
    'executeDirectDispatch(...): Invalid `event`.'
  ) : invariant(!Array.isArray(dispatchListener)));
  var res = dispatchListener ?
    dispatchListener(event, dispatchID) :
    null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {bool} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatch: executeDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,
  injection: injection,
  useTouchEvents: false
};

module.exports = EventPluginUtils;

},{"./EventConstants":16,"./invariant":126}],21:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName =
    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if ("production" !== "development") {
    if (!domID) {
      throw new Error('Dispatching id must not be null');
    }
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners =
      accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We can not perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
      event.dispatchMarker,
      accumulateDirectionalDispatches,
      event
    );
  }
}


/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners =
        accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
    fromID,
    toID,
    accumulateDispatches,
    leave,
    enter
  );
}


function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}



/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;

},{"./EventConstants":16,"./EventPluginHub":18,"./accumulateInto":97,"./forEachAccumulated":112}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

/*jslint evil: true */

"use strict";

var canUseDOM = !!(
  typeof window !== 'undefined' &&
  window.document &&
  window.document.createElement
);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners:
    canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

},{}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE =
  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE =
  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = (
    implementation &&
    implementation.hasFeature &&
    implementation.hasFeature(
      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
      '1.1'
    )
  );
}


var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(
    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
  ),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusMixin
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    autoCapitalize: null, // Supported in Mobile Safari for keyboard hints
    autoCorrect: null, // Supported in Mobile Safari for keyboard hints
    itemProp: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE, // Microdata: http://schema.org/docs/gs.html
    itemType: MUST_USE_ATTRIBUTE, // Microdata: http://schema.org/docs/gs.html
    property: null // Supports OG in meta tags
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    encType: 'enctype',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;

},{"./DOMProperty":11,"./ExecutionEnvironment":22}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

"use strict";

var ReactPropTypes = _dereq_("./ReactPropTypes");

var invariant = _dereq_("./invariant");

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(input) {
  ("production" !== "development" ? invariant(
    input.props.checkedLink == null || input.props.valueLink == null,
    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
}
function _assertValueLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.value == null && input.props.onChange == null,
    'Cannot provide a valueLink and a value or onChange event. If you want ' +
    'to use value or onChange, you probably don\'t want to use valueLink.'
  ) : invariant(input.props.value == null && input.props.onChange == null));
}

function _assertCheckedLink(input) {
  _assertSingleLink(input);
  ("production" !== "development" ? invariant(
    input.props.checked == null && input.props.onChange == null,
    'Cannot provide a checkedLink and a checked property or onChange event. ' +
    'If you want to use checked or onChange, you probably don\'t want to ' +
    'use checkedLink'
  ) : invariant(input.props.checked == null && input.props.onChange == null));
}

/**
 * @param {SyntheticEvent} e change event to handle
 */
function _handleLinkedValueChange(e) {
  /*jshint validthis:true */
  this.props.valueLink.requestChange(e.target.value);
}

/**
  * @param {SyntheticEvent} e change event to handle
  */
function _handleLinkedCheckChange(e) {
  /*jshint validthis:true */
  this.props.checkedLink.requestChange(e.target.checked);
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  Mixin: {
    propTypes: {
      value: function(props, propName, componentName) {
        if (!props[propName] ||
            hasReadOnlyValue[props.type] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `value` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultValue`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      checked: function(props, propName, componentName) {
        if (!props[propName] ||
            props.onChange ||
            props.readOnly ||
            props.disabled) {
          return;
        }
        return new Error(
          'You provided a `checked` prop to a form field without an ' +
          '`onChange` handler. This will render a read-only field. If ' +
          'the field should be mutable use `defaultChecked`. Otherwise, ' +
          'set either `onChange` or `readOnly`.'
        );
      },
      onChange: ReactPropTypes.func
    }
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return input.props.valueLink.value;
    }
    return input.props.value;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function(input) {
    if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return input.props.checkedLink.value;
    }
    return input.props.checked;
  },

  /**
   * @param {ReactComponent} input Form component
   * @return {function} change callback either from onChange prop or link.
   */
  getOnChange: function(input) {
    if (input.props.valueLink) {
      _assertValueLink(input);
      return _handleLinkedValueChange;
    } else if (input.props.checkedLink) {
      _assertCheckedLink(input);
      return _handleLinkedCheckChange;
    }
    return input.props.onChange;
  }
};

module.exports = LinkedValueUtils;

},{"./ReactPropTypes":72,"./invariant":126}],25:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LocalEventTrapMixin
 */

"use strict";

var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var accumulateInto = _dereq_("./accumulateInto");
var forEachAccumulated = _dereq_("./forEachAccumulated");
var invariant = _dereq_("./invariant");

function remove(event) {
  event.remove();
}

var LocalEventTrapMixin = {
  trapBubbledEvent:function(topLevelType, handlerBaseName) {
    ("production" !== "development" ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      this.getDOMNode()
    );
    this._localEventListeners =
      accumulateInto(this._localEventListeners, listener);
  },

  // trapCapturedEvent would look nearly identical. We don't implement that
  // method because it isn't currently needed.

  componentWillUnmount:function() {
    if (this._localEventListeners) {
      forEachAccumulated(this._localEventListeners, remove);
    }
  }
};

module.exports = LocalEventTrapMixin;

},{"./ReactBrowserEventEmitter":30,"./accumulateInto":97,"./forEachAccumulated":112,"./invariant":126}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule MobileSafariClickEventPlugin
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");

var emptyFunction = _dereq_("./emptyFunction");

var topLevelTypes = EventConstants.topLevelTypes;

/**
 * Mobile Safari does not fire properly bubble click events on non-interactive
 * elements, which means delegated click listeners do not fire. The workaround
 * for this bug involves attaching an empty click listener on the target node.
 *
 * This particular plugin works around the bug by attaching an empty click
 * listener on `touchstart` (which does fire on every element).
 */
var MobileSafariClickEventPlugin = {

  eventTypes: null,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    if (topLevelType === topLevelTypes.topTouchStart) {
      var target = nativeEvent.target;
      if (target && !target.onclick) {
        target.onclick = emptyFunction;
      }
    }
  }

};

module.exports = MobileSafariClickEventPlugin;

},{"./EventConstants":16,"./emptyFunction":107}],27:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
};

module.exports = assign;

},{}],28:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function(instance) {
  var Klass = this;
  ("production" !== "development" ? invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  ) : invariant(instance instanceof Klass));
  if (instance.destructor) {
    instance.destructor();
  }
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;

},{"./invariant":126}],29:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

"use strict";

var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactMount = _dereq_("./ReactMount");

var invariant = _dereq_("./invariant");

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function() {
    ("production" !== "development" ? invariant(
      this.isMounted(),
      'getDOMNode(): A component must be mounted to have a DOM node.'
    ) : invariant(this.isMounted()));
    if (ReactEmptyComponent.isNullComponentID(this._rootNodeID)) {
      return null;
    }
    return ReactMount.getNode(this._rootNodeID);
  }
};

module.exports = ReactBrowserComponentMixin;

},{"./ReactEmptyComponent":54,"./ReactMount":63,"./invariant":126}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginHub = _dereq_("./EventPluginHub");
var EventPluginRegistry = _dereq_("./EventPluginRegistry");
var ReactEventEmitterMixin = _dereq_("./ReactEventEmitterMixin");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var assign = _dereq_("./Object.assign");
var isEventSupported = _dereq_("./isEventSupported");

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topBlur: 'blur',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topScroll: 'scroll',
  topSelectionChange: 'selectionchange',
  topTextInput: 'textInput',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = "_reactListenersID" + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function(ReactEventListener) {
      ReactEventListener.setHandleTopLevel(
        ReactBrowserEventEmitter.handleTopLevel
      );
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function(enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function() {
    return !!(
      ReactBrowserEventEmitter.ReactEventListener &&
      ReactBrowserEventEmitter.ReactEventListener.isEnabled()
    );
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function(registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.
      registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0, l = dependencies.length; i < l; i++) {
      var dependency = dependencies[i];
      if (!(
            isListening.hasOwnProperty(dependency) &&
            isListening[dependency]
          )) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'wheel',
              mountAt
            );
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'mousewheel',
              mountAt
            );
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topWheel,
              'DOMMouseScroll',
              mountAt
            );
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topScroll,
              'scroll',
              mountAt
            );
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topScroll,
              'scroll',
              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
            );
          }
        } else if (dependency === topLevelTypes.topFocus ||
            dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topFocus,
              'focus',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
              topLevelTypes.topBlur,
              'blur',
              mountAt
            );
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topFocus,
              'focusin',
              mountAt
            );
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
              topLevelTypes.topBlur,
              'focusout',
              mountAt
            );
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
            dependency,
            topEventMapping[dependency],
            mountAt
          );
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
      topLevelType,
      handlerBaseName,
      handle
    );
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function(){
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

module.exports = ReactBrowserEventEmitter;

},{"./EventConstants":16,"./EventPluginHub":18,"./EventPluginRegistry":19,"./Object.assign":27,"./ReactEventEmitterMixin":56,"./ViewportMetrics":96,"./isEventSupported":127}],31:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var threeArgumentPooler = PooledClass.threeArgumentPooler;

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.forEachFunction = forEachFunction;
  this.forEachContext = forEachContext;
}
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(traverseContext, child, name, i) {
  var forEachBookKeeping = traverseContext;
  forEachBookKeeping.forEachFunction.call(
    forEachBookKeeping.forEachContext, child, i);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc.
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext =
    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, mapFunction, mapContext) {
  this.mapResult = mapResult;
  this.mapFunction = mapFunction;
  this.mapContext = mapContext;
}
PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

function mapSingleChildIntoContext(traverseContext, child, name, i) {
  var mapBookKeeping = traverseContext;
  var mapResult = mapBookKeeping.mapResult;

  var keyUnique = !mapResult.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'ReactChildren.map(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);

  if (keyUnique) {
    var mappedChild =
      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
    mapResult[name] = mappedChild;
  }
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * TODO: This may likely break any calls to `ReactChildren.map` that were
 * previously relying on the fact that we guarded against null children.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} mapFunction.
 * @param {*} mapContext Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var mapResult = {};
  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
  return mapResult;
}

function forEachSingleChildDummy(traverseContext, child, name, i) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  count: countChildren
};

module.exports = ReactChildren;

},{"./PooledClass":28,"./traverseAllChildren":144,"./warning":145}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");

/**
 * Every React component is in one of these life cycles.
 */
var ComponentLifeCycle = keyMirror({
  /**
   * Mounted components have a DOM node representation and are capable of
   * receiving new props.
   */
  MOUNTED: null,
  /**
   * Unmounted components are inactive and cannot receive new props.
   */
  UNMOUNTED: null
});

var injected = false;

/**
 * Optionally injectable environment dependent cleanup hook. (server vs.
 * browser etc). Example: A browser system caches DOM nodes based on component
 * ID and must remove that cache entry when this instance is unmounted.
 *
 * @private
 */
var unmountIDFromEnvironment = null;

/**
 * The "image" of a component tree, is the platform specific (typically
 * serialized) data that represents a tree of lower level UI building blocks.
 * On the web, this "image" is HTML markup which describes a construction of
 * low level `div` and `span` nodes. Other platforms may have different
 * encoding of this "image". This must be injected.
 *
 * @private
 */
var mountImageIntoNode = null;

/**
 * Components are the basic units of composition in React.
 *
 * Every component accepts a set of keyed input parameters known as "props" that
 * are initialized by the constructor. Once a component is mounted, the props
 * can be mutated using `setProps` or `replaceProps`.
 *
 * Every component is capable of the following operations:
 *
 *   `mountComponent`
 *     Initializes the component, renders markup, and registers event listeners.
 *
 *   `receiveComponent`
 *     Updates the rendered DOM nodes to match the given component.
 *
 *   `unmountComponent`
 *     Releases any resources allocated by this component.
 *
 * Components can also be "owned" by other components. Being owned by another
 * component means being constructed by that component. This is different from
 * being the child of a component, which means having a DOM representation that
 * is a child of the DOM representation of that component.
 *
 * @class ReactComponent
 */
var ReactComponent = {

  injection: {
    injectEnvironment: function(ReactComponentEnvironment) {
      ("production" !== "development" ? invariant(
        !injected,
        'ReactComponent: injectEnvironment() can only be called once.'
      ) : invariant(!injected));
      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;
      unmountIDFromEnvironment =
        ReactComponentEnvironment.unmountIDFromEnvironment;
      ReactComponent.BackendIDOperations =
        ReactComponentEnvironment.BackendIDOperations;
      injected = true;
    }
  },

  /**
   * @internal
   */
  LifeCycle: ComponentLifeCycle,

  /**
   * Injected module that provides ability to mutate individual properties.
   * Injected into the base class because many different subclasses need access
   * to this.
   *
   * @internal
   */
  BackendIDOperations: null,

  /**
   * Base functionality for every ReactComponent constructor. Mixed into the
   * `ReactComponent` prototype, but exposed statically for easy access.
   *
   * @lends {ReactComponent.prototype}
   */
  Mixin: {

    /**
     * Checks whether or not this component is mounted.
     *
     * @return {boolean} True if mounted, false otherwise.
     * @final
     * @protected
     */
    isMounted: function() {
      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;
    },

    /**
     * Sets a subset of the props.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    setProps: function(partialProps, callback) {
      // Merge with the pending element if it exists, otherwise with existing
      // element props.
      var element = this._pendingElement || this._currentElement;
      this.replaceProps(
        assign({}, element.props, partialProps),
        callback
      );
    },

    /**
     * Replaces all of the props.
     *
     * @param {object} props New props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @public
     */
    replaceProps: function(props, callback) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'replaceProps(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      ("production" !== "development" ? invariant(
        this._mountDepth === 0,
        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +
        'component with a parent. This is an anti-pattern since props will ' +
        'get reactively updated when rendered. Instead, change the owner\'s ' +
        '`render` method to pass the correct value as props to the component ' +
        'where it is created.'
      ) : invariant(this._mountDepth === 0));
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        this._pendingElement || this._currentElement,
        props
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Schedule a partial update to the props. Only used for internal testing.
     *
     * @param {object} partialProps Subset of the next props.
     * @param {?function} callback Called after props are updated.
     * @final
     * @internal
     */
    _setPropsInternal: function(partialProps, callback) {
      // This is a deoptimized path. We optimize for always having a element.
      // This creates an extra internal element.
      var element = this._pendingElement || this._currentElement;
      this._pendingElement = ReactElement.cloneAndReplaceProps(
        element,
        assign({}, element.props, partialProps)
      );
      ReactUpdates.enqueueUpdate(this, callback);
    },

    /**
     * Base constructor for all React components.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.construct.call(this, ...)`.
     *
     * @param {ReactElement} element
     * @internal
     */
    construct: function(element) {
      // This is the public exposed props object after it has been processed
      // with default props. The element's props represents the true internal
      // state of the props.
      this.props = element.props;
      // Record the component responsible for creating this component.
      // This is accessible through the element but we maintain an extra
      // field for compatibility with devtools and as a way to make an
      // incremental update. TODO: Consider deprecating this field.
      this._owner = element._owner;

      // All components start unmounted.
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;

      // See ReactUpdates.
      this._pendingCallbacks = null;

      // We keep the old element and a reference to the pending element
      // to track updates.
      this._currentElement = element;
      this._pendingElement = null;
    },

    /**
     * Initializes the component, renders markup, and registers event listeners.
     *
     * NOTE: This does not insert any nodes into the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
     * @param {number} mountDepth number of components in the owner hierarchy.
     * @return {?string} Rendered markup to be inserted into the DOM.
     * @internal
     */
    mountComponent: function(rootID, transaction, mountDepth) {
      ("production" !== "development" ? invariant(
        !this.isMounted(),
        'mountComponent(%s, ...): Can only mount an unmounted component. ' +
        'Make sure to avoid storing components between renders or reusing a ' +
        'single component instance in multiple places.',
        rootID
      ) : invariant(!this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        var owner = this._currentElement._owner;
        ReactOwner.addComponentAsRefTo(this, ref, owner);
      }
      this._rootNodeID = rootID;
      this._lifeCycleState = ComponentLifeCycle.MOUNTED;
      this._mountDepth = mountDepth;
      // Effectively: return '';
    },

    /**
     * Releases any resources allocated by `mountComponent`.
     *
     * NOTE: This does not remove any nodes from the DOM.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.unmountComponent.call(this)`.
     *
     * @internal
     */
    unmountComponent: function() {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'unmountComponent(): Can only unmount a mounted component.'
      ) : invariant(this.isMounted()));
      var ref = this._currentElement.ref;
      if (ref != null) {
        ReactOwner.removeComponentAsRefFrom(this, ref, this._owner);
      }
      unmountIDFromEnvironment(this._rootNodeID);
      this._rootNodeID = null;
      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;
    },

    /**
     * Given a new instance of this component, updates the rendered DOM nodes
     * as if that instance was rendered instead.
     *
     * Subclasses that override this method should make sure to invoke
     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.
     *
     * @param {object} nextComponent Next set of properties.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    receiveComponent: function(nextElement, transaction) {
      ("production" !== "development" ? invariant(
        this.isMounted(),
        'receiveComponent(...): Can only update a mounted component.'
      ) : invariant(this.isMounted()));
      this._pendingElement = nextElement;
      this.performUpdateIfNecessary(transaction);
    },

    /**
     * If `_pendingElement` is set, update the component.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    performUpdateIfNecessary: function(transaction) {
      if (this._pendingElement == null) {
        return;
      }
      var prevElement = this._currentElement;
      var nextElement = this._pendingElement;
      this._currentElement = nextElement;
      this.props = nextElement.props;
      this._owner = nextElement._owner;
      this._pendingElement = null;
      this.updateComponent(transaction, prevElement);
    },

    /**
     * Updates the component's currently mounted representation.
     *
     * @param {ReactReconcileTransaction} transaction
     * @param {object} prevElement
     * @internal
     */
    updateComponent: function(transaction, prevElement) {
      var nextElement = this._currentElement;

      // If either the owner or a `ref` has changed, make sure the newest owner
      // has stored a reference to `this`, and the previous owner (if different)
      // has forgotten the reference to `this`. We use the element instead
      // of the public this.props because the post processing cannot determine
      // a ref. The ref conceptually lives on the element.

      // TODO: Should this even be possible? The owner cannot change because
      // it's forbidden by shouldUpdateReactComponent. The ref can change
      // if you swap the keys of but not the refs. Reconsider where this check
      // is made. It probably belongs where the key checking and
      // instantiateReactComponent is done.

      if (nextElement._owner !== prevElement._owner ||
          nextElement.ref !== prevElement.ref) {
        if (prevElement.ref != null) {
          ReactOwner.removeComponentAsRefFrom(
            this, prevElement.ref, prevElement._owner
          );
        }
        // Correct, even if the owner is the same, and only the ref has changed.
        if (nextElement.ref != null) {
          ReactOwner.addComponentAsRefTo(
            this,
            nextElement.ref,
            nextElement._owner
          );
        }
      }
    },

    /**
     * Mounts this component and inserts it into the DOM.
     *
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @internal
     * @see {ReactMount.render}
     */
    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {
      var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
      transaction.perform(
        this._mountComponentIntoNode,
        this,
        rootID,
        container,
        transaction,
        shouldReuseMarkup
      );
      ReactUpdates.ReactReconcileTransaction.release(transaction);
    },

    /**
     * @param {string} rootID DOM ID of the root node.
     * @param {DOMElement} container DOM element to mount into.
     * @param {ReactReconcileTransaction} transaction
     * @param {boolean} shouldReuseMarkup If true, do not insert markup
     * @final
     * @private
     */
    _mountComponentIntoNode: function(
        rootID,
        container,
        transaction,
        shouldReuseMarkup) {
      var markup = this.mountComponent(rootID, transaction, 0);
      mountImageIntoNode(markup, container, shouldReuseMarkup);
    },

    /**
     * Checks if this component is owned by the supplied `owner` component.
     *
     * @param {ReactComponent} owner Component to check.
     * @return {boolean} True if `owners` owns this component.
     * @final
     * @internal
     */
    isOwnedBy: function(owner) {
      return this._owner === owner;
    },

    /**
     * Gets another component, that shares the same owner as this one, by ref.
     *
     * @param {string} ref of a sibling Component.
     * @return {?ReactComponent} the actual sibling Component.
     * @final
     * @internal
     */
    getSiblingByRef: function(ref) {
      var owner = this._owner;
      if (!owner || !owner.refs) {
        return null;
      }
      return owner.refs[ref];
    }
  }
};

module.exports = ReactComponent;

},{"./Object.assign":27,"./ReactElement":52,"./ReactOwner":67,"./ReactUpdates":79,"./invariant":126,"./keyMirror":132}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

/*jslint evil: true */

"use strict";

var ReactDOMIDOperations = _dereq_("./ReactDOMIDOperations");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");
var ReactReconcileTransaction = _dereq_("./ReactReconcileTransaction");

var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");


var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;


/**
 * Abstracts away all functionality of `ReactComponent` requires knowledge of
 * the browser context.
 */
var ReactComponentBrowserEnvironment = {
  ReactReconcileTransaction: ReactReconcileTransaction,

  BackendIDOperations: ReactDOMIDOperations,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function(rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  },

  /**
   * @param {string} markup Markup string to place into the DOM Element.
   * @param {DOMElement} container DOM Element to insert markup into.
   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the
   * container if possible.
   */
  mountImageIntoNode: ReactPerf.measure(
    'ReactComponentBrowserEnvironment',
    'mountImageIntoNode',
    function(markup, container, shouldReuseMarkup) {
      ("production" !== "development" ? invariant(
        container && (
          container.nodeType === ELEMENT_NODE_TYPE ||
            container.nodeType === DOC_NODE_TYPE
        ),
        'mountComponentIntoNode(...): Target container is not valid.'
      ) : invariant(container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
          container.nodeType === DOC_NODE_TYPE
      )));

      if (shouldReuseMarkup) {
        if (ReactMarkupChecksum.canReuseMarkup(
          markup,
          getReactRootElementInContainer(container))) {
          return;
        } else {
          ("production" !== "development" ? invariant(
            container.nodeType !== DOC_NODE_TYPE,
            'You\'re trying to render a component to the document using ' +
            'server rendering but the checksum was invalid. This usually ' +
            'means you rendered a different component type or props on ' +
            'the client from the one on the server, or your render() ' +
            'methods are impure. React cannot handle this case due to ' +
            'cross-browser quirks by rendering at the document root. You ' +
            'should look for environment dependent code in your components ' +
            'and ensure the props are the same client and server side.'
          ) : invariant(container.nodeType !== DOC_NODE_TYPE));

          if ("production" !== "development") {
            console.warn(
              'React attempted to use reuse markup in a container but the ' +
              'checksum was invalid. This generally means that you are ' +
              'using server rendering and the markup generated on the ' +
              'server was not what the client was expecting. React injected ' +
              'new markup to compensate which works but you have lost many ' +
              'of the benefits of server rendering. Instead, figure out ' +
              'why the markup being generated is different on the client ' +
              'or server.'
            );
          }
        }
      }

      ("production" !== "development" ? invariant(
        container.nodeType !== DOC_NODE_TYPE,
        'You\'re trying to render a component to the document but ' +
          'you didn\'t use server rendering. We can\'t do this ' +
          'without using server rendering due to cross-browser quirks. ' +
          'See renderComponentToString() for server rendering.'
      ) : invariant(container.nodeType !== DOC_NODE_TYPE));

      setInnerHTML(container, markup);
    }
  )
};

module.exports = ReactComponentBrowserEnvironment;

},{"./ReactDOMIDOperations":41,"./ReactMarkupChecksum":62,"./ReactMount":63,"./ReactPerf":68,"./ReactReconcileTransaction":74,"./getReactRootElementInContainer":120,"./invariant":126,"./setInnerHTML":140}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactErrorUtils = _dereq_("./ReactErrorUtils");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactOwner = _dereq_("./ReactOwner");
var ReactPerf = _dereq_("./ReactPerf");
var ReactPropTransferer = _dereq_("./ReactPropTransferer");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var keyMirror = _dereq_("./keyMirror");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var mapObject = _dereq_("./mapObject");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var MIXINS_KEY = keyOf({mixins: null});

/**
 * Policies that describe methods in `ReactCompositeComponentInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base ReactCompositeComponent class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactCompositeComponent`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will available on the prototype.
 *
 * @interface ReactCompositeComponentInterface
 * @internal
 */
var ReactCompositeComponentInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,



  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,



  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function(Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function(Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function(Constructor, childContextTypes) {
    validateTypeDef(
      Constructor,
      childContextTypes,
      ReactPropTypeLocations.childContext
    );
    Constructor.childContextTypes = assign(
      {},
      Constructor.childContextTypes,
      childContextTypes
    );
  },
  contextTypes: function(Constructor, contextTypes) {
    validateTypeDef(
      Constructor,
      contextTypes,
      ReactPropTypeLocations.context
    );
    Constructor.contextTypes = assign(
      {},
      Constructor.contextTypes,
      contextTypes
    );
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function(Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(
        Constructor.getDefaultProps,
        getDefaultProps
      );
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function(Constructor, propTypes) {
    validateTypeDef(
      Constructor,
      propTypes,
      ReactPropTypeLocations.prop
    );
    Constructor.propTypes = assign(
      {},
      Constructor.propTypes,
      propTypes
    );
  },
  statics: function(Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  }
};

function getDeclarationErrorAddendum(component) {
  var owner = component._owner || null;
  if (owner && owner.constructor && owner.constructor.displayName) {
    return ' Check the render method of `' + owner.constructor.displayName +
      '`.';
  }
  return '';
}

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      ("production" !== "development" ? invariant(
        typeof typeDef[propName] == 'function',
        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
        'React.PropTypes.',
        Constructor.displayName || 'ReactCompositeComponent',
        ReactPropTypeLocationNames[location],
        propName
      ) : invariant(typeof typeDef[propName] == 'function'));
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactCompositeComponentInterface.hasOwnProperty(name) ?
    ReactCompositeComponentInterface[name] :
    null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.OVERRIDE_BASE,
      'ReactCompositeComponentInterface: You are attempting to override ' +
      '`%s` from your class specification. Ensure that your method names ' +
      'do not overlap with React methods.',
      name
    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    ("production" !== "development" ? invariant(
      specPolicy === SpecPolicy.DEFINE_MANY ||
      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
      'ReactCompositeComponentInterface: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be due ' +
      'to a mixin.',
      name
    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
  }
}

function validateLifeCycleOnReplaceState(instance) {
  var compositeLifeCycleState = instance._compositeLifeCycleState;
  ("production" !== "development" ? invariant(
    instance.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
    'replaceState(...): Can only update a mounted or mounting component.'
  ) : invariant(instance.isMounted() ||
    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
  ("production" !== "development" ? invariant(
    ReactCurrentOwner.current == null,
    'replaceState(...): Cannot update during an existing state transition ' +
    '(such as within `render`). Render methods should be a pure function ' +
    'of props and state.'
  ) : invariant(ReactCurrentOwner.current == null));
  ("production" !== "development" ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,
    'replaceState(...): Cannot update while unmounting component. This ' +
    'usually means you called setState() on an unmounted component.'
  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building `ReactCompositeComponent` classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  ("production" !== "development" ? invariant(
    !ReactLegacyElement.isValidFactory(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component class as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactLegacyElement.isValidFactory(spec)));
  ("production" !== "development" ? invariant(
    !ReactElement.isValidElement(spec),
    'ReactCompositeComponent: You\'re attempting to ' +
    'use a component as a mixin. Instead, just use a regular object.'
  ) : invariant(!ReactElement.isValidElement(spec)));

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactCompositeComponent methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isCompositeComponentMethod =
        ReactCompositeComponentInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var markedDontBind = property && property.__reactDontBind;
      var isFunction = typeof property === 'function';
      var shouldAutoBind =
        isFunction &&
        !isCompositeComponentMethod &&
        !isAlreadyDefined &&
        !markedDontBind;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactCompositeComponentInterface[name];

          // These cases should already be caught by validateMethodOverride
          ("production" !== "development" ? invariant(
            isCompositeComponentMethod && (
              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
              specPolicy === SpecPolicy.DEFINE_MANY
            ),
            'ReactCompositeComponent: Unexpected spec policy %s for key %s ' +
            'when mixing in component specs.',
            specPolicy,
            name
          ) : invariant(isCompositeComponentMethod && (
            specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
            specPolicy === SpecPolicy.DEFINE_MANY
          )));

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("production" !== "development") {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    ("production" !== "development" ? invariant(
      !isReserved,
      'ReactCompositeComponent: You are attempting to define a reserved ' +
      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
      'as an instance property instead; it will still be accessible on the ' +
      'constructor.',
      name
    ) : invariant(!isReserved));

    var isInherited = name in Constructor;
    ("production" !== "development" ? invariant(
      !isInherited,
      'ReactCompositeComponent: You are attempting to define ' +
      '`%s` on your component more than once. This conflict may be ' +
      'due to a mixin.',
      name
    ) : invariant(!isInherited));
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeObjectsWithNoDuplicateKeys(one, two) {
  ("production" !== "development" ? invariant(
    one && two && typeof one === 'object' && typeof two === 'object',
    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'
  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

  mapObject(two, function(value, key) {
    ("production" !== "development" ? invariant(
      one[key] === undefined,
      'mergeObjectsWithNoDuplicateKeys(): ' +
      'Tried to merge two objects with the same key: `%s`. This conflict ' +
      'may be due to a mixin; in particular, this may be caused by two ' +
      'getInitialState() or getDefaultProps() methods returning objects ' +
      'with clashing keys.',
      key
    ) : invariant(one[key] === undefined));
    one[key] = value;
  });
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    return mergeObjectsWithNoDuplicateKeys(a, b);
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * `ReactCompositeComponent` maintains an auxiliary life cycle state in
 * `this._compositeLifeCycleState` (which can be null).
 *
 * This is different from the life cycle state maintained by `ReactComponent` in
 * `this._lifeCycleState`. The following diagram shows how the states overlap in
 * time. There are times when the CompositeLifeCycle is null - at those times it
 * is only meaningful to look at ComponentLifeCycle alone.
 *
 * Top Row: ReactComponent.ComponentLifeCycle
 * Low Row: ReactComponent.CompositeLifeCycle
 *
 * +-------+---------------------------------+--------+
 * |  UN   |             MOUNTED             |   UN   |
 * |MOUNTED|                                 | MOUNTED|
 * +-------+---------------------------------+--------+
 * |       ^--------+   +-------+   +--------^        |
 * |       |        |   |       |   |        |        |
 * |    0--|MOUNTING|-0-|RECEIVE|-0-|   UN   |--->0   |
 * |       |        |   |PROPS  |   |MOUNTING|        |
 * |       |        |   |       |   |        |        |
 * |       |        |   |       |   |        |        |
 * |       +--------+   +-------+   +--------+        |
 * |       |                                 |        |
 * +-------+---------------------------------+--------+
 */
var CompositeLifeCycle = keyMirror({
  /**
   * Components in the process of being mounted respond to state changes
   * differently.
   */
  MOUNTING: null,
  /**
   * Components in the process of being unmounted are guarded against state
   * changes.
   */
  UNMOUNTING: null,
  /**
   * Components that are mounted and receiving new props respond to state
   * changes differently.
   */
  RECEIVING_PROPS: null
});

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function(element) {
    // Children can be either an array or more than one argument
    ReactComponent.Mixin.construct.apply(this, arguments);
    ReactOwner.Mixin.construct.apply(this, arguments);

    this.state = null;
    this._pendingState = null;

    // This is the public post-processed context. The real context and pending
    // context lives on the element.
    this.context = null;

    this._compositeLifeCycleState = null;
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function() {
    return ReactComponent.Mixin.isMounted.call(this) &&
      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;

      if (this.__reactAutoBindMap) {
        this._bindAutoBindMethods();
      }

      this.context = this._processContext(this._currentElement._context);
      this.props = this._processProps(this.props);

      this.state = this.getInitialState ? this.getInitialState() : null;
      ("production" !== "development" ? invariant(
        typeof this.state === 'object' && !Array.isArray(this.state),
        '%s.getInitialState(): must return an object or null',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));

      this._pendingState = null;
      this._pendingForceUpdate = false;

      if (this.componentWillMount) {
        this.componentWillMount();
        // When mounting, calls to `setState` by `componentWillMount` will set
        // `this._pendingState` without triggering a re-render.
        if (this._pendingState) {
          this.state = this._pendingState;
          this._pendingState = null;
        }
      }

      this._renderedComponent = instantiateReactComponent(
        this._renderValidatedComponent(),
        this._currentElement.type // The wrapping type
      );

      // Done with mounting, `setState` will now trigger UI changes.
      this._compositeLifeCycleState = null;
      var markup = this._renderedComponent.mountComponent(
        rootID,
        transaction,
        mountDepth + 1
      );
      if (this.componentDidMount) {
        transaction.getReactMountReady().enqueue(this.componentDidMount, this);
      }
      return markup;
    }
  ),

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function() {
    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;
    if (this.componentWillUnmount) {
      this.componentWillUnmount();
    }
    this._compositeLifeCycleState = null;

    this._renderedComponent.unmountComponent();
    this._renderedComponent = null;

    ReactComponent.Mixin.unmountComponent.call(this);

    // Some existing components rely on this.props even after they've been
    // destroyed (in event handlers).
    // TODO: this.props = null;
    // TODO: this.state = null;
  },

  /**
   * Sets a subset of the state. Always use this or `replaceState` to mutate
   * state. You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * There is no guarantee that calls to `setState` will run synchronously,
   * as they may eventually be batched together.  You can provide an optional
   * callback that will be executed when the call to setState is actually
   * completed.
   *
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  setState: function(partialState, callback) {
    ("production" !== "development" ? invariant(
      typeof partialState === 'object' || partialState == null,
      'setState(...): takes an object of state variables to update.'
    ) : invariant(typeof partialState === 'object' || partialState == null));
    if ("production" !== "development"){
      ("production" !== "development" ? warning(
        partialState != null,
        'setState(...): You passed an undefined or null state object; ' +
        'instead, use forceUpdate().'
      ) : null);
    }
    // Merge with `_pendingState` if it exists, otherwise with existing state.
    this.replaceState(
      assign({}, this._pendingState || this.state, partialState),
      callback
    );
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {object} completeState Next state.
   * @param {?function} callback Called after state is updated.
   * @final
   * @protected
   */
  replaceState: function(completeState, callback) {
    validateLifeCycleOnReplaceState(this);
    this._pendingState = completeState;
    if (this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING) {
      // If we're in a componentWillMount handler, don't enqueue a rerender
      // because ReactUpdates assumes we're in a browser context (which is wrong
      // for server rendering) and we're about to do a render anyway.
      // TODO: The callback here is ignored when setState is called from
      // componentWillMount. Either fix it or disallow doing so completely in
      // favor of getInitialState.
      ReactUpdates.enqueueUpdate(this, callback);
    }
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function(context) {
    var maskedContext = null;
    var contextTypes = this.constructor.contextTypes;
    if (contextTypes) {
      maskedContext = {};
      for (var contextName in contextTypes) {
        maskedContext[contextName] = context[contextName];
      }
      if ("production" !== "development") {
        this._checkPropTypes(
          contextTypes,
          maskedContext,
          ReactPropTypeLocations.context
        );
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function(currentContext) {
    var childContext = this.getChildContext && this.getChildContext();
    var displayName = this.constructor.displayName || 'ReactCompositeComponent';
    if (childContext) {
      ("production" !== "development" ? invariant(
        typeof this.constructor.childContextTypes === 'object',
        '%s.getChildContext(): childContextTypes must be defined in order to ' +
        'use getChildContext().',
        displayName
      ) : invariant(typeof this.constructor.childContextTypes === 'object'));
      if ("production" !== "development") {
        this._checkPropTypes(
          this.constructor.childContextTypes,
          childContext,
          ReactPropTypeLocations.childContext
        );
      }
      for (var name in childContext) {
        ("production" !== "development" ? invariant(
          name in this.constructor.childContextTypes,
          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
          displayName,
          name
        ) : invariant(name in this.constructor.childContextTypes));
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function(newProps) {
    if ("production" !== "development") {
      var propTypes = this.constructor.propTypes;
      if (propTypes) {
        this._checkPropTypes(propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function(propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.constructor.displayName;
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error =
          propTypes[propName](props, propName, componentName, location);
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // renderComponent calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);
          ("production" !== "development" ? warning(false, error.message + addendum) : null);
        }
      }
    }
  },

  /**
   * If any of `_pendingElement`, `_pendingState`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function(transaction) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    // Do not trigger a state transition if we are in the middle of mounting or
    // receiving props because both of those will already be doing this.
    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||
        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {
      return;
    }

    if (this._pendingElement == null &&
        this._pendingState == null &&
        !this._pendingForceUpdate) {
      return;
    }

    var nextContext = this.context;
    var nextProps = this.props;
    var nextElement = this._currentElement;
    if (this._pendingElement != null) {
      nextElement = this._pendingElement;
      nextContext = this._processContext(nextElement._context);
      nextProps = this._processProps(nextElement.props);
      this._pendingElement = null;

      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;
      if (this.componentWillReceiveProps) {
        this.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    this._compositeLifeCycleState = null;

    var nextState = this._pendingState || this.state;
    this._pendingState = null;

    var shouldUpdate =
      this._pendingForceUpdate ||
      !this.shouldComponentUpdate ||
      this.shouldComponentUpdate(nextProps, nextState, nextContext);

    if ("production" !== "development") {
      if (typeof shouldUpdate === "undefined") {
        console.warn(
          (this.constructor.displayName || 'ReactCompositeComponent') +
          '.shouldComponentUpdate(): Returned undefined instead of a ' +
          'boolean value. Make sure to return true or false.'
        );
      }
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(
        nextElement,
        nextProps,
        nextState,
        nextContext,
        transaction
      );
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state.
      this._currentElement = nextElement;
      this.props = nextProps;
      this.state = nextState;
      this.context = nextContext;

      // Owner cannot change because shouldUpdateReactComponent doesn't allow
      // it. TODO: Remove this._owner completely.
      this._owner = nextElement._owner;
    }
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @private
   */
  _performComponentUpdate: function(
    nextElement,
    nextProps,
    nextState,
    nextContext,
    transaction
  ) {
    var prevElement = this._currentElement;
    var prevProps = this.props;
    var prevState = this.state;
    var prevContext = this.context;

    if (this.componentWillUpdate) {
      this.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this.props = nextProps;
    this.state = nextState;
    this.context = nextContext;

    // Owner cannot change because shouldUpdateReactComponent doesn't allow
    // it. TODO: Remove this._owner completely.
    this._owner = nextElement._owner;

    this.updateComponent(
      transaction,
      prevElement
    );

    if (this.componentDidUpdate) {
      transaction.getReactMountReady().enqueue(
        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext),
        this
      );
    }
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    'updateComponent',
    function(transaction, prevParentElement) {
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevParentElement
      );

      var prevComponentInstance = this._renderedComponent;
      var prevElement = prevComponentInstance._currentElement;
      var nextElement = this._renderValidatedComponent();
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        prevComponentInstance.receiveComponent(nextElement, transaction);
      } else {
        // These two IDs are actually the same! But nothing should rely on that.
        var thisID = this._rootNodeID;
        var prevComponentID = prevComponentInstance._rootNodeID;
        prevComponentInstance.unmountComponent();
        this._renderedComponent = instantiateReactComponent(
          nextElement,
          this._currentElement.type
        );
        var nextMarkup = this._renderedComponent.mountComponent(
          thisID,
          transaction,
          this._mountDepth + 1
        );
        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(
          prevComponentID,
          nextMarkup
        );
      }
    }
  ),

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldUpdateComponent`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {?function} callback Called after update is complete.
   * @final
   * @protected
   */
  forceUpdate: function(callback) {
    var compositeLifeCycleState = this._compositeLifeCycleState;
    ("production" !== "development" ? invariant(
      this.isMounted() ||
        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,
      'forceUpdate(...): Can only force an update on mounted or mounting ' +
        'components.'
    ) : invariant(this.isMounted() ||
      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));
    ("production" !== "development" ? invariant(
      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
      ReactCurrentOwner.current == null,
      'forceUpdate(...): Cannot force an update while unmounting component ' +
      'or within a `render` function.'
    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING &&
    ReactCurrentOwner.current == null));
    this._pendingForceUpdate = true;
    ReactUpdates.enqueueUpdate(this, callback);
  },

  /**
   * @private
   */
  _renderValidatedComponent: ReactPerf.measure(
    'ReactCompositeComponent',
    '_renderValidatedComponent',
    function() {
      var renderedComponent;
      var previousContext = ReactContext.current;
      ReactContext.current = this._processChildContext(
        this._currentElement._context
      );
      ReactCurrentOwner.current = this;
      try {
        renderedComponent = this.render();
        if (renderedComponent === null || renderedComponent === false) {
          renderedComponent = ReactEmptyComponent.getEmptyComponent();
          ReactEmptyComponent.registerNullComponentID(this._rootNodeID);
        } else {
          ReactEmptyComponent.deregisterNullComponentID(this._rootNodeID);
        }
      } finally {
        ReactContext.current = previousContext;
        ReactCurrentOwner.current = null;
      }
      ("production" !== "development" ? invariant(
        ReactElement.isValidElement(renderedComponent),
        '%s.render(): A valid ReactComponent must be returned. You may have ' +
          'returned undefined, an array or some other invalid object.',
        this.constructor.displayName || 'ReactCompositeComponent'
      ) : invariant(ReactElement.isValidElement(renderedComponent)));
      return renderedComponent;
    }
  ),

  /**
   * @private
   */
  _bindAutoBindMethods: function() {
    for (var autoBindKey in this.__reactAutoBindMap) {
      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
        continue;
      }
      var method = this.__reactAutoBindMap[autoBindKey];
      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(
        method,
        this.constructor.displayName + '.' + autoBindKey
      ));
    }
  },

  /**
   * Binds a method to the component.
   *
   * @param {function} method Method to be bound.
   * @private
   */
  _bindAutoBindMethod: function(method) {
    var component = this;
    var boundMethod = method.bind(component);
    if ("production" !== "development") {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): React component methods may only be bound to the ' +
            'component instance. See ' + componentName
          );
        } else if (!args.length) {
          monitorCodeUse('react_bind_warning', { component: componentName });
          console.warn(
            'bind(): You are binding a component method to the component. ' +
            'React does this for you automatically in a high-performance ' +
            'way, so you can safely remove this call. See ' + componentName
          );
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }
};

var ReactCompositeComponentBase = function() {};
assign(
  ReactCompositeComponentBase.prototype,
  ReactComponent.Mixin,
  ReactOwner.Mixin,
  ReactPropTransferer.Mixin,
  ReactCompositeComponentMixin
);

/**
 * Module for creating composite components.
 *
 * @class ReactCompositeComponent
 * @extends ReactComponent
 * @extends ReactOwner
 * @extends ReactPropTransferer
 */
var ReactCompositeComponent = {

  LifeCycle: CompositeLifeCycle,

  Base: ReactCompositeComponentBase,

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function(spec) {
    var Constructor = function(props) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted. This will later be used
      // by the stand-alone class implementation.
    };
    Constructor.prototype = new ReactCompositeComponentBase();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(
      mixSpecIntoComponent.bind(null, Constructor)
    );

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    ("production" !== "development" ? invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    ) : invariant(Constructor.prototype.render));

    if ("production" !== "development") {
      if (Constructor.prototype.componentShouldUpdate) {
        monitorCodeUse(
          'react_component_should_update_warning',
          { component: spec.displayName }
        );
        console.warn(
          (spec.displayName || 'A component') + ' has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.'
         );
      }
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactCompositeComponentInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    if ("production" !== "development") {
      return ReactLegacyElement.wrapFactory(
        ReactElementValidator.createFactory(Constructor)
      );
    }
    return ReactLegacyElement.wrapFactory(
      ReactElement.createFactory(Constructor)
    );
  },

  injection: {
    injectMixin: function(mixin) {
      injectedMixins.push(mixin);
    }
  }
};

module.exports = ReactCompositeComponent;

},{"./Object.assign":27,"./ReactComponent":32,"./ReactContext":35,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactElementValidator":53,"./ReactEmptyComponent":54,"./ReactErrorUtils":55,"./ReactLegacyElement":61,"./ReactOwner":67,"./ReactPerf":68,"./ReactPropTransferer":69,"./ReactPropTypeLocationNames":70,"./ReactPropTypeLocations":71,"./ReactUpdates":79,"./instantiateReactComponent":125,"./invariant":126,"./keyMirror":132,"./keyOf":133,"./mapObject":134,"./monitorCodeUse":136,"./shouldUpdateReactComponent":142,"./warning":145}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactContext
 */

"use strict";

var assign = _dereq_("./Object.assign");

/**
 * Keeps track of the current context.
 *
 * The context is automatically passed down the component ownership hierarchy
 * and is accessible via `this.context` on ReactCompositeComponents.
 */
var ReactContext = {

  /**
   * @internal
   * @type {object}
   */
  current: {},

  /**
   * Temporarily extends the current context while executing scopedCallback.
   *
   * A typical use case might look like
   *
   *  render: function() {
   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
   *
   *    ));
   *    return <div>{children}</div>;
   *  }
   *
   * @param {object} newContext New context to merge into the existing context
   * @param {function} scopedCallback Callback to run with the new context
   * @return {ReactComponent|array<ReactComponent>}
   */
  withContext: function(newContext, scopedCallback) {
    var result;
    var previousContext = ReactContext.current;
    ReactContext.current = assign({}, previousContext, newContext);
    try {
      result = scopedCallback();
    } finally {
      ReactContext.current = previousContext;
    }
    return result;
  }

};

module.exports = ReactContext;

},{"./Object.assign":27}],36:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

"use strict";

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 *
 * The depth indicate how many composite components are above this render level.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

},{}],37:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 * @typechecks static-only
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactElementValidator = _dereq_("./ReactElementValidator");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");

var mapObject = _dereq_("./mapObject");

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if ("production" !== "development") {
    return ReactLegacyElement.markNonLegacyFactory(
      ReactElementValidator.createFactory(tag)
    );
  }
  return ReactLegacyElement.markNonLegacyFactory(
    ReactElement.createFactory(tag)
  );
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOM = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOM;

},{"./ReactElement":52,"./ReactElementValidator":53,"./ReactLegacyElement":61,"./mapObject":134}],38:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var keyMirror = _dereq_("./keyMirror");

// Store a reference to the <button> `ReactDOMComponent`. TODO: use string
var button = ReactElement.createFactory(ReactDOM.button.type);

var mouseListenerNames = keyMirror({
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,
  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
});

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMButton',

  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

  render: function() {
    var props = {};

    // Copy the props; except the mouse listeners if we're disabled
    for (var key in this.props) {
      if (this.props.hasOwnProperty(key) &&
          (!this.props.disabled || !mouseListenerNames[key])) {
        props[key] = this.props[key];
      }
    }

    return button(props, this.props.children);
  }

});

module.exports = ReactDOMButton;

},{"./AutoFocusMixin":2,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./keyMirror":132}],39:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMProperty = _dereq_("./DOMProperty");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponent = _dereq_("./ReactComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactMount = _dereq_("./ReactMount");
var ReactMultiChild = _dereq_("./ReactMultiChild");
var ReactPerf = _dereq_("./ReactPerf");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");
var invariant = _dereq_("./invariant");
var isEventSupported = _dereq_("./isEventSupported");
var keyOf = _dereq_("./keyOf");
var monitorCodeUse = _dereq_("./monitorCodeUse");

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = {'string': true, 'number': true};

var STYLE = keyOf({style: null});

var ELEMENT_NODE_TYPE = 1;

/**
 * @param {?object} props
 */
function assertValidProps(props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  ("production" !== "development" ? invariant(
    props.children == null || props.dangerouslySetInnerHTML == null,
    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
  ) : invariant(props.children == null || props.dangerouslySetInnerHTML == null));
  if ("production" !== "development") {
    if (props.contentEditable && props.children != null) {
      console.warn(
        'A component is `contentEditable` and contains `children` managed by ' +
        'React. It is now your responsibility to guarantee that none of those '+
        'nodes are unexpectedly modified or duplicated. This is probably not ' +
        'intentional.'
      );
    }
  }
  ("production" !== "development" ? invariant(
    props.style == null || typeof props.style === 'object',
    'The `style` prop expects a mapping from style properties to values, ' +
    'not a string.'
  ) : invariant(props.style == null || typeof props.style === 'object'));
}

function putListener(id, registrationName, listener, transaction) {
  if ("production" !== "development") {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    if (registrationName === 'onScroll' &&
        !isEventSupported('scroll', true)) {
      monitorCodeUse('react_no_scroll_event');
      console.warn('This browser doesn\'t support the `onScroll` event');
    }
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
      container.ownerDocument :
      container;
    listenTo(registrationName, doc);
  }
  transaction.getPutListenerQueue().enqueuePutListener(
    id,
    registrationName,
    listener
  );
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

// We accept any tag to be rendered but since this gets injected into abitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    ("production" !== "development" ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
    validatedTagCache[tag] = true;
  }
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag;
  this.tagName = tag.toUpperCase();
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} The computed markup.
   */
  mountComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'mountComponent',
    function(rootID, transaction, mountDepth) {
      ReactComponent.Mixin.mountComponent.call(
        this,
        rootID,
        transaction,
        mountDepth
      );
      assertValidProps(this.props);
      var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
      return (
        this._createOpenTagMarkupAndPutListeners(transaction) +
        this._createContentMarkup(transaction) +
        closeTag
      );
    }
  ),

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function(transaction) {
    var props = this.props;
    var ret = '<' + this._tag;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, propValue, transaction);
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            propValue = props.style = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup =
          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret + '>';
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID + '>';
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Content markup.
   */
  _createContentMarkup: function(transaction) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = this.props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        return innerHTML.__html;
      }
    } else {
      var contentToUse =
        CONTENT_TYPES[typeof this.props.children] ? this.props.children : null;
      var childrenToUse = contentToUse != null ? null : this.props.children;
      if (contentToUse != null) {
        return escapeTextForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(
          childrenToUse,
          transaction
        );
        return mountImages.join('');
      }
    }
    return '';
  },

  receiveComponent: function(nextElement, transaction) {
    if (nextElement === this._currentElement &&
        nextElement._owner != null) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for a element created outside a composite to be
      // deeply mutated and reused.
      return;
    }

    ReactComponent.Mixin.receiveComponent.call(
      this,
      nextElement,
      transaction
    );
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @internal
   * @overridable
   */
  updateComponent: ReactPerf.measure(
    'ReactDOMComponent',
    'updateComponent',
    function(transaction, prevElement) {
      assertValidProps(this._currentElement.props);
      ReactComponent.Mixin.updateComponent.call(
        this,
        transaction,
        prevElement
      );
      this._updateDOMProperties(prevElement.props, transaction);
      this._updateDOMChildren(prevElement.props, transaction);
    }
  ),

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMProperties: function(lastProps, transaction) {
    var nextProps = this.props;
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) ||
         !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = lastProps[propKey];
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        deleteListener(this._rootNodeID, propKey);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.deletePropertyByID(
          this._rootNodeID,
          propKey
        );
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          nextProp = nextProps.style = assign({}, nextProp);
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) &&
                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) &&
                lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        putListener(this._rootNodeID, propKey, nextProp, transaction);
      } else if (
          DOMProperty.isStandardName[propKey] ||
          DOMProperty.isCustomAttribute(propKey)) {
        ReactComponent.BackendIDOperations.updatePropertyByID(
          this._rootNodeID,
          propKey,
          nextProp
        );
      }
    }
    if (styleUpdates) {
      ReactComponent.BackendIDOperations.updateStylesByID(
        this._rootNodeID,
        styleUpdates
      );
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {ReactReconcileTransaction} transaction
   */
  _updateDOMChildren: function(lastProps, transaction) {
    var nextProps = this.props;

    var lastContent =
      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent =
      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml =
      lastProps.dangerouslySetInnerHTML &&
      lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml =
      nextProps.dangerouslySetInnerHTML &&
      nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        ReactComponent.BackendIDOperations.updateInnerHTMLByID(
          this._rootNodeID,
          nextHtml
        );
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function() {
    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponent.Mixin.unmountComponent.call(this);
  }

};

assign(
  ReactDOMComponent.prototype,
  ReactComponent.Mixin,
  ReactDOMComponent.Mixin,
  ReactMultiChild.Mixin,
  ReactBrowserComponentMixin
);

module.exports = ReactDOMComponent;

},{"./CSSPropertyOperations":5,"./DOMProperty":11,"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactMount":63,"./ReactMultiChild":64,"./ReactPerf":68,"./escapeTextForBrowser":109,"./invariant":126,"./isEventSupported":127,"./keyOf":133,"./monitorCodeUse":136}],40:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMForm
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <form> `ReactDOMComponent`. TODO: use string
var form = ReactElement.createFactory(ReactDOM.form.type);

/**
 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
 * to capture it on the <form> element itself. There are lots of hacks we could
 * do to accomplish this, but the most reliable is to make <form> a
 * composite component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMForm = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMForm',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
    // `jshint` fails to parse JSX so in order for linting to work in the open
    // source repo, we need to just use `ReactDOM.form`.
    return form(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
  }
});

module.exports = ReactDOMForm;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],41:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

/*jslint evil: true */

"use strict";

var CSSPropertyOperations = _dereq_("./CSSPropertyOperations");
var DOMChildrenOperations = _dereq_("./DOMChildrenOperations");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var invariant = _dereq_("./invariant");
var setInnerHTML = _dereq_("./setInnerHTML");

/**
 * Errors for properties that should not be updated with `updatePropertyById()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML:
    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes. This is made injectable via
 * `ReactComponent.BackendIDOperations`.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updatePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

      // If we're updating to null or undefined, we should remove the property
      // from the DOM node instead of inadvertantly setting to a string. This
      // brings us in line with the same behavior we have on initial render.
      if (value != null) {
        DOMPropertyOperations.setValueForProperty(node, name, value);
      } else {
        DOMPropertyOperations.deleteValueForProperty(node, name);
      }
    }
  ),

  /**
   * Updates a DOM node to remove a property. This should only be used to remove
   * DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A property name to remove, see `DOMProperty`.
   * @internal
   */
  deletePropertyByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'deletePropertyByID',
    function(id, name, value) {
      var node = ReactMount.getNode(id);
      ("production" !== "development" ? invariant(
        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
        'updatePropertyByID(...): %s',
        INVALID_PROPERTY_ERRORS[name]
      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
      DOMPropertyOperations.deleteValueForProperty(node, name, value);
    }
  ),

  /**
   * Updates a DOM node with new style values. If a value is specified as '',
   * the corresponding style property will be unset.
   *
   * @param {string} id ID of the node to update.
   * @param {object} styles Mapping from styles to values.
   * @internal
   */
  updateStylesByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateStylesByID',
    function(id, styles) {
      var node = ReactMount.getNode(id);
      CSSPropertyOperations.setValueForStyles(node, styles);
    }
  ),

  /**
   * Updates a DOM node's innerHTML.
   *
   * @param {string} id ID of the node to update.
   * @param {string} html An HTML string.
   * @internal
   */
  updateInnerHTMLByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateInnerHTMLByID',
    function(id, html) {
      var node = ReactMount.getNode(id);
      setInnerHTML(node, html);
    }
  ),

  /**
   * Updates a DOM node's text content set by `props.content`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} content Text content.
   * @internal
   */
  updateTextContentByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'updateTextContentByID',
    function(id, content) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.updateTextContent(node, content);
    }
  ),

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyReplaceNodeWithMarkupByID',
    function(id, markup) {
      var node = ReactMount.getNode(id);
      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
    }
  ),

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: ReactPerf.measure(
    'ReactDOMIDOperations',
    'dangerouslyProcessChildrenUpdates',
    function(updates, markup) {
      for (var i = 0; i < updates.length; i++) {
        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
      }
      DOMChildrenOperations.processUpdates(updates, markup);
    }
  )
};

module.exports = ReactDOMIDOperations;

},{"./CSSPropertyOperations":5,"./DOMChildrenOperations":10,"./DOMPropertyOperations":12,"./ReactMount":63,"./ReactPerf":68,"./invariant":126,"./setInnerHTML":140}],42:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMImg
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var LocalEventTrapMixin = _dereq_("./LocalEventTrapMixin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

// Store a reference to the <img> `ReactDOMComponent`. TODO: use string
var img = ReactElement.createFactory(ReactDOM.img.type);

/**
 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
 * capture it on the <img> element itself. There are lots of hacks we could do
 * to accomplish this, but the most reliable is to make <img> a composite
 * component and use `componentDidMount` to attach the event handlers.
 */
var ReactDOMImg = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMImg',
  tagName: 'IMG',

  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

  render: function() {
    return img(this.props);
  },

  componentDidMount: function() {
    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
  }
});

module.exports = ReactDOMImg;

},{"./EventConstants":16,"./LocalEventTrapMixin":25,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52}],43:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

// Store a reference to the <input> `ReactDOMComponent`. TODO: use string
var input = ReactElement.createFactory(ReactDOM.input.type);

var instancesByReactID = {};

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMInput',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    return {
      initialChecked: this.props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.defaultChecked = null;
    props.defaultValue = null;

    var value = LinkedValueUtils.getValue(this);
    props.value = value != null ? value : this.state.initialValue;

    var checked = LinkedValueUtils.getChecked(this);
    props.checked = checked != null ? checked : this.state.initialChecked;

    props.onChange = this._handleChange;

    return input(props, this.props.children);
  },

  componentDidMount: function() {
    var id = ReactMount.getID(this.getDOMNode());
    instancesByReactID[id] = this;
  },

  componentWillUnmount: function() {
    var rootNode = this.getDOMNode();
    var id = ReactMount.getID(rootNode);
    delete instancesByReactID[id];
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var rootNode = this.getDOMNode();
    if (this.props.checked != null) {
      DOMPropertyOperations.setValueForProperty(
        rootNode,
        'checked',
        this.props.checked || false
      );
    }

    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    // Here we use asap to wait until all updates have propagated, which
    // is important when using controlled components within layers:
    // https://github.com/facebook/react/issues/1698
    ReactUpdates.asap(forceUpdateIfMounted, this);

    var name = this.props.name;
    if (this.props.type === 'radio' && name != null) {
      var rootNode = this.getDOMNode();
      var queryRoot = rootNode;

      while (queryRoot.parentNode) {
        queryRoot = queryRoot.parentNode;
      }

      // If `rootNode.form` was non-null, then we could try `form.elements`,
      // but that sometimes behaves strangely in IE8. We could also try using
      // `form.getElementsByName`, but that will only return direct children
      // and won't include inputs that use the HTML5 `form=` attribute. Since
      // the input might not even be in a form, let's just use the global
      // `querySelectorAll` to ensure we don't miss anything.
      var group = queryRoot.querySelectorAll(
        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
        var otherNode = group[i];
        if (otherNode === rootNode ||
            otherNode.form !== rootNode.form) {
          continue;
        }
        var otherID = ReactMount.getID(otherNode);
        ("production" !== "development" ? invariant(
          otherID,
          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
          'same `name` is not supported.'
        ) : invariant(otherID));
        var otherInstance = instancesByReactID[otherID];
        ("production" !== "development" ? invariant(
          otherInstance,
          'ReactDOMInput: Unknown radio button ID %s.',
          otherID
        ) : invariant(otherInstance));
        // If this is a controlled radio button group, forcing the input that
        // was previously checked to update will cause it to be come re-checked
        // as appropriate.
        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
      }
    }

    return returnValue;
  }

});

module.exports = ReactDOMInput;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactMount":63,"./ReactUpdates":79,"./invariant":126}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

"use strict";

var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");

var warning = _dereq_("./warning");

// Store a reference to the <option> `ReactDOMComponent`. TODO: use string
var option = ReactElement.createFactory(ReactDOM.option.type);

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMOption',

  mixins: [ReactBrowserComponentMixin],

  componentWillMount: function() {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        this.props.selected == null,
        'Use the `defaultValue` or `value` props on <select> instead of ' +
        'setting `selected` on <option>.'
      ) : null);
    }
  },

  render: function() {
    return option(this.props, this.props.children);
  }

});

module.exports = ReactDOMOption;

},{"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./warning":145}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");

// Store a reference to the <select> `ReactDOMComponent`. TODO: use string
var select = ReactElement.createFactory(ReactDOM.select.type);

function updateWithPendingValueIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.setState({value: this._pendingValue});
    this._pendingValue = 0;
  }
}

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function selectValueType(props, propName, componentName) {
  if (props[propName] == null) {
    return;
  }
  if (props.multiple) {
    if (!Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
        ("`multiple` is true.")
      );
    }
  } else {
    if (Array.isArray(props[propName])) {
      return new Error(
        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
        ("value if `multiple` is false.")
      );
    }
  }
}

/**
 * If `value` is supplied, updates <option> elements on mount and update.
 * @param {ReactComponent} component Instance of ReactDOMSelect
 * @param {?*} propValue For uncontrolled components, null/undefined. For
 * controlled components, a string (or with `multiple`, a list of strings).
 * @private
 */
function updateOptions(component, propValue) {
  var multiple = component.props.multiple;
  var value = propValue != null ? propValue : component.state.value;
  var options = component.getDOMNode().options;
  var selectedValue, i, l;
  if (multiple) {
    selectedValue = {};
    for (i = 0, l = value.length; i < l; ++i) {
      selectedValue['' + value[i]] = true;
    }
  } else {
    selectedValue = '' + value;
  }
  for (i = 0, l = options.length; i < l; i++) {
    var selected = multiple ?
      selectedValue.hasOwnProperty(options[i].value) :
      options[i].value === selectedValue;

    if (selected !== options[i].selected) {
      options[i].selected = selected;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * string. If `multiple` is true, the prop must be an array of strings.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMSelect',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  propTypes: {
    defaultValue: selectValueType,
    value: selectValueType
  },

  getInitialState: function() {
    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};
  },

  componentWillMount: function() {
    this._pendingValue = null;
  },

  componentWillReceiveProps: function(nextProps) {
    if (!this.props.multiple && nextProps.multiple) {
      this.setState({value: [this.state.value]});
    } else if (this.props.multiple && !nextProps.multiple) {
      this.setState({value: this.state.value[0]});
    }
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    props.onChange = this._handleChange;
    props.value = null;

    return select(props, this.props.children);
  },

  componentDidMount: function() {
    updateOptions(this, LinkedValueUtils.getValue(this));
  },

  componentDidUpdate: function(prevProps) {
    var value = LinkedValueUtils.getValue(this);
    var prevMultiple = !!prevProps.multiple;
    var multiple = !!this.props.multiple;
    if (value != null || prevMultiple !== multiple) {
      updateOptions(this, value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }

    var selectedValue;
    if (this.props.multiple) {
      selectedValue = [];
      var options = event.target.options;
      for (var i = 0, l = options.length; i < l; i++) {
        if (options[i].selected) {
          selectedValue.push(options[i].value);
        }
      }
    } else {
      selectedValue = event.target.value;
    }

    this._pendingValue = selectedValue;
    ReactUpdates.asap(updateWithPendingValueIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMSelect;

},{"./AutoFocusMixin":2,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79}],46:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var getNodeForCharacterOffset = _dereq_("./getNodeForCharacterOffset");
var getTextContentAccessor = _dereq_("./getTextContentAccessor");

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(
    selection.anchorNode,
    selection.anchorOffset,
    selection.focusNode,
    selection.focusOffset
  );

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(
    tempRange.startContainer,
    tempRange.startOffset,
    tempRange.endContainer,
    tempRange.endOffset
  );

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ?
            start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && document.selection;

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

},{"./ExecutionEnvironment":22,"./getNodeForCharacterOffset":119,"./getTextContentAccessor":121}],47:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

"use strict";

var AutoFocusMixin = _dereq_("./AutoFocusMixin");
var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var LinkedValueUtils = _dereq_("./LinkedValueUtils");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");
var ReactDOM = _dereq_("./ReactDOM");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var warning = _dereq_("./warning");

// Store a reference to the <textarea> `ReactDOMComponent`. TODO: use string
var textarea = ReactElement.createFactory(ReactDOM.textarea.type);

function forceUpdateIfMounted() {
  /*jshint validthis:true */
  if (this.isMounted()) {
    this.forceUpdate();
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = ReactCompositeComponent.createClass({
  displayName: 'ReactDOMTextarea',

  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

  getInitialState: function() {
    var defaultValue = this.props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = this.props.children;
    if (children != null) {
      if ("production" !== "development") {
        ("production" !== "development" ? warning(
          false,
          'Use the `defaultValue` or `value` props instead of setting ' +
          'children on <textarea>.'
        ) : null);
      }
      ("production" !== "development" ? invariant(
        defaultValue == null,
        'If you supply `defaultValue` on a <textarea>, do not pass children.'
      ) : invariant(defaultValue == null));
      if (Array.isArray(children)) {
        ("production" !== "development" ? invariant(
          children.length <= 1,
          '<textarea> can only have at most one child.'
        ) : invariant(children.length <= 1));
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(this);
    return {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue)
    };
  },

  render: function() {
    // Clone `this.props` so we don't mutate the input.
    var props = assign({}, this.props);

    ("production" !== "development" ? invariant(
      props.dangerouslySetInnerHTML == null,
      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
    ) : invariant(props.dangerouslySetInnerHTML == null));

    props.defaultValue = null;
    props.value = null;
    props.onChange = this._handleChange;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    return textarea(props, this.state.initialValue);
  },

  componentDidUpdate: function(prevProps, prevState, prevContext) {
    var value = LinkedValueUtils.getValue(this);
    if (value != null) {
      var rootNode = this.getDOMNode();
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
    }
  },

  _handleChange: function(event) {
    var returnValue;
    var onChange = LinkedValueUtils.getOnChange(this);
    if (onChange) {
      returnValue = onChange.call(this, event);
    }
    ReactUpdates.asap(forceUpdateIfMounted, this);
    return returnValue;
  }

});

module.exports = ReactDOMTextarea;

},{"./AutoFocusMixin":2,"./DOMPropertyOperations":12,"./LinkedValueUtils":24,"./Object.assign":27,"./ReactBrowserComponentMixin":29,"./ReactCompositeComponent":34,"./ReactDOM":37,"./ReactElement":52,"./ReactUpdates":79,"./invariant":126,"./warning":145}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

"use strict";

var ReactUpdates = _dereq_("./ReactUpdates");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(
  ReactDefaultBatchingStrategyTransaction.prototype,
  Transaction.Mixin,
  {
    getTransactionWrappers: function() {
      return TRANSACTION_WRAPPERS;
    }
  }
);

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function(callback, a, b) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b);
    } else {
      transaction.perform(callback, null, a, b);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

},{"./Object.assign":27,"./ReactUpdates":79,"./Transaction":95,"./emptyFunction":107}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

"use strict";

var BeforeInputEventPlugin = _dereq_("./BeforeInputEventPlugin");
var ChangeEventPlugin = _dereq_("./ChangeEventPlugin");
var ClientReactRootIndex = _dereq_("./ClientReactRootIndex");
var CompositionEventPlugin = _dereq_("./CompositionEventPlugin");
var DefaultEventPluginOrder = _dereq_("./DefaultEventPluginOrder");
var EnterLeaveEventPlugin = _dereq_("./EnterLeaveEventPlugin");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var HTMLDOMPropertyConfig = _dereq_("./HTMLDOMPropertyConfig");
var MobileSafariClickEventPlugin = _dereq_("./MobileSafariClickEventPlugin");
var ReactBrowserComponentMixin = _dereq_("./ReactBrowserComponentMixin");
var ReactComponentBrowserEnvironment =
  _dereq_("./ReactComponentBrowserEnvironment");
var ReactDefaultBatchingStrategy = _dereq_("./ReactDefaultBatchingStrategy");
var ReactDOMComponent = _dereq_("./ReactDOMComponent");
var ReactDOMButton = _dereq_("./ReactDOMButton");
var ReactDOMForm = _dereq_("./ReactDOMForm");
var ReactDOMImg = _dereq_("./ReactDOMImg");
var ReactDOMInput = _dereq_("./ReactDOMInput");
var ReactDOMOption = _dereq_("./ReactDOMOption");
var ReactDOMSelect = _dereq_("./ReactDOMSelect");
var ReactDOMTextarea = _dereq_("./ReactDOMTextarea");
var ReactEventListener = _dereq_("./ReactEventListener");
var ReactInjection = _dereq_("./ReactInjection");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var SelectEventPlugin = _dereq_("./SelectEventPlugin");
var ServerReactRootIndex = _dereq_("./ServerReactRootIndex");
var SimpleEventPlugin = _dereq_("./SimpleEventPlugin");
var SVGDOMPropertyConfig = _dereq_("./SVGDOMPropertyConfig");

var createFullPageComponent = _dereq_("./createFullPageComponent");

function inject() {
  ReactInjection.EventEmitter.injectReactEventListener(
    ReactEventListener
  );

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    CompositionEventPlugin: CompositionEventPlugin,
    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(
    ReactDOMComponent
  );

  ReactInjection.NativeComponent.injectComponentClasses({
    'button': ReactDOMButton,
    'form': ReactDOMForm,
    'img': ReactDOMImg,
    'input': ReactDOMInput,
    'option': ReactDOMOption,
    'select': ReactDOMSelect,
    'textarea': ReactDOMTextarea,

    'html': createFullPageComponent('html'),
    'head': createFullPageComponent('head'),
    'body': createFullPageComponent('body')
  });

  // This needs to happen after createFullPageComponent() otherwise the mixin
  // gets double injected.
  ReactInjection.CompositeComponent.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(
    ReactComponentBrowserEnvironment.ReactReconcileTransaction
  );
  ReactInjection.Updates.injectBatchingStrategy(
    ReactDefaultBatchingStrategy
  );

  ReactInjection.RootIndex.injectCreateReactRootIndex(
    ExecutionEnvironment.canUseDOM ?
      ClientReactRootIndex.createReactRootIndex :
      ServerReactRootIndex.createReactRootIndex
  );

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if ("production" !== "development") {
    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
    if ((/[?&]react_perf\b/).test(url)) {
      var ReactDefaultPerf = _dereq_("./ReactDefaultPerf");
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};

},{"./BeforeInputEventPlugin":3,"./ChangeEventPlugin":7,"./ClientReactRootIndex":8,"./CompositionEventPlugin":9,"./DefaultEventPluginOrder":14,"./EnterLeaveEventPlugin":15,"./ExecutionEnvironment":22,"./HTMLDOMPropertyConfig":23,"./MobileSafariClickEventPlugin":26,"./ReactBrowserComponentMixin":29,"./ReactComponentBrowserEnvironment":33,"./ReactDOMButton":38,"./ReactDOMComponent":39,"./ReactDOMForm":40,"./ReactDOMImg":42,"./ReactDOMInput":43,"./ReactDOMOption":44,"./ReactDOMSelect":45,"./ReactDOMTextarea":47,"./ReactDefaultBatchingStrategy":48,"./ReactDefaultPerf":50,"./ReactEventListener":57,"./ReactInjection":58,"./ReactInstanceHandles":60,"./ReactMount":63,"./SVGDOMPropertyConfig":80,"./SelectEventPlugin":81,"./ServerReactRootIndex":82,"./SimpleEventPlugin":83,"./createFullPageComponent":103}],50:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactDefaultPerfAnalysis = _dereq_("./ReactDefaultPerfAnalysis");
var ReactMount = _dereq_("./ReactMount");
var ReactPerf = _dereq_("./ReactPerf");

var performanceNow = _dereq_("./performanceNow");

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function() {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function() {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function() {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  getMeasurementsSummaryMap: function(measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
      measurements,
      true
    );
    return summary.map(function(item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  printDOM: function(measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function(item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result['type'] = item.type;
      result['args'] = JSON.stringify(item.args);
      return result;
    }));
    console.log(
      'Total time:',
      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
    );
  },

  _recordWrite: function(id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes =
      ReactDefaultPerf
        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
        .writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function(moduleName, fnName, func) {
    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' ||
          fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ].totalTime = performanceNow() - start;
        return rv;
      } else if (moduleName === 'ReactDOMIDOperations' ||
        moduleName === 'ReactComponentBrowserEnvironment') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === 'mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function(update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(
              update.parentID,
              update.type,
              totalTime,
              writeArgs
            );
          });
        } else {
          // basic format
          ReactDefaultPerf._recordWrite(
            args[0],
            fnName,
            totalTime,
            Array.prototype.slice.call(args, 1)
          );
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (
        fnName === 'mountComponent' ||
        fnName === 'updateComponent' || // TODO: receiveComponent()?
        fnName === '_renderValidatedComponent')) {

        var rootNodeID = fnName === 'mountComponent' ?
          args[0] :
          this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[
          ReactDefaultPerf._allMeasurements.length - 1
        ];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.constructor.displayName,
          owner: this._owner ? this._owner.constructor.displayName : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;

},{"./DOMProperty":11,"./ReactDefaultPerfAnalysis":51,"./ReactMount":63,"./ReactPerf":68,"./performanceNow":139}],51:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

var assign = _dereq_("./Object.assign");

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  'mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  TEXT_CONTENT: 'set textContent',
  'updatePropertyByID': 'update attribute',
  'deletePropertyByID': 'delete attribute',
  'updateStylesByID': 'update styles',
  'updateInnerHTMLByID': 'set innerHTML',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var id;

    for (id in measurement.writes) {
      measurement.writes[id].forEach(function(write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    }
  }
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function(a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign(
      {},
      measurement.exclusive,
      measurement.inclusive
    );
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function(a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;

},{"./Object.assign":27}],52:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

"use strict";

var ReactContext = _dereq_("./ReactContext");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var warning = _dereq_("./warning");

var RESERVED_PROPS = {
  key: true,
  ref: true
};

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} object
 * @param {string} key
 */
function defineWarningProperty(object, key) {
  Object.defineProperty(object, key, {

    configurable: false,
    enumerable: true,

    get: function() {
      if (!this._store) {
        return null;
      }
      return this._store[key];
    },

    set: function(value) {
      ("production" !== "development" ? warning(
        false,
        'Don\'t set the ' + key + ' property of the component. ' +
        'Mutate the existing props object instead.'
      ) : null);
      this._store[key] = value;
    }

  });
}

/**
 * This is updated to true if the membrane is successfully created.
 */
var useMutationMembrane = false;

/**
 * Warn for mutations.
 *
 * @internal
 * @param {object} element
 */
function defineMutationMembrane(prototype) {
  try {
    var pseudoFrozenProperties = {
      props: true
    };
    for (var key in pseudoFrozenProperties) {
      defineWarningProperty(prototype, key);
    }
    useMutationMembrane = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {string|object} ref
 * @param {*} key
 * @param {*} props
 * @internal
 */
var ReactElement = function(type, key, ref, owner, context, props) {
  // Built-in properties that belong on the element
  this.type = type;
  this.key = key;
  this.ref = ref;

  // Record the component responsible for creating this element.
  this._owner = owner;

  // TODO: Deprecate withContext, and then the context becomes accessible
  // through the owner.
  this._context = context;

  if ("production" !== "development") {
    // The validation flag and props are currently mutative. We put them on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    this._store = { validated: false, props: props };

    // We're not allowed to set props directly on the object so we early
    // return and rely on the prototype membrane to forward to the backing
    // store.
    if (useMutationMembrane) {
      Object.freeze(this);
      return;
    }
  }

  this.props = props;
};

// We intentionally don't expose the function on the constructor property.
// ReactElement should be indistinguishable from a plain object.
ReactElement.prototype = {
  _isReactElement: true
};

if ("production" !== "development") {
  defineMutationMembrane(ReactElement.prototype);
}

ReactElement.createElement = function(type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    if ("production" !== "development") {
      ("production" !== "development" ? warning(
        config.key !== null,
        'createElement(...): Encountered component with a `key` of null. In ' +
        'a future version, this will be treated as equivalent to the string ' +
        '\'null\'; instead, provide an explicit key or use undefined.'
      ) : null);
    }
    // TODO: Change this back to `config.key === undefined`
    key = config.key == null ? null : '' + config.key;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) &&
          !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return new ReactElement(
    type,
    key,
    ref,
    ReactCurrentOwner.current,
    ReactContext.current,
    props
  );
};

ReactElement.createFactory = function(type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
  var newElement = new ReactElement(
    oldElement.type,
    oldElement.key,
    oldElement.ref,
    oldElement._owner,
    oldElement._context,
    newProps
  );

  if ("production" !== "development") {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }
  return newElement;
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function(object) {
  // ReactTestUtils is often used outside of beforeEach where as React is
  // within it. This leads to two different instances of React on the same
  // page. To identify a element from a different React instance we use
  // a flag instead of an instanceof check.
  var isElement = !!(object && object._isReactElement);
  // if (isElement && !(object instanceof ReactElement)) {
  // This is an indicator that you're using multiple versions of React at the
  // same time. This will screw with ownership and stuff. Fix it, please.
  // TODO: We could possibly warn here.
  // }
  return isElement;
};

module.exports = ReactElement;

},{"./ReactContext":35,"./ReactCurrentOwner":36,"./warning":145}],53:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocations = _dereq_("./ReactPropTypeLocations");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {
  'react_key_warning': {},
  'react_numeric_key_warning': {}
};
var ownerHasMonitoredObjectMap = {};

var loggedTypeFailures = {};

var NUMERIC_PROPERTY_REGEX = /^\d+$/;

/**
 * Gets the current owner's displayName for use in warnings.
 *
 * @internal
 * @return {?string} Display name or undefined
 */
function getCurrentOwnerDisplayName() {
  var current = ReactCurrentOwner.current;
  return current && current.constructor.displayName || undefined;
}

/**
 * Warn if the component doesn't have an explicit key assigned to it.
 * This component is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validateExplicitKey(component, parentType) {
  if (component._store.validated || component.key != null) {
    return;
  }
  component._store.validated = true;

  warnAndMonitorForKeyUse(
    'react_key_warning',
    'Each child in an array should have a unique "key" prop.',
    component,
    parentType
  );
}

/**
 * Warn if the key is being defined as an object property but has an incorrect
 * value.
 *
 * @internal
 * @param {string} name Property name of the key.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function validatePropertyKey(name, component, parentType) {
  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
    return;
  }
  warnAndMonitorForKeyUse(
    'react_numeric_key_warning',
    'Child objects should have non-numeric keys so ordering is preserved.',
    component,
    parentType
  );
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} warningID The id used when logging.
 * @param {string} message The base warning that gets output.
 * @param {ReactComponent} component Component that requires a key.
 * @param {*} parentType component's parent's type.
 */
function warnAndMonitorForKeyUse(warningID, message, component, parentType) {
  var ownerName = getCurrentOwnerDisplayName();
  var parentName = parentType.displayName;

  var useName = ownerName || parentName;
  var memoizer = ownerHasKeyUseWarning[warningID];
  if (memoizer.hasOwnProperty(useName)) {
    return;
  }
  memoizer[useName] = true;

  message += ownerName ?
    (" Check the render method of " + ownerName + ".") :
    (" Check the renderComponent call using <" + parentName + ">.");

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwnerName = null;
  if (component._owner && component._owner !== ReactCurrentOwner.current) {
    // Name of the component that originally created this child.
    childOwnerName = component._owner.constructor.displayName;

    message += (" It was passed a child from " + childOwnerName + ".");
  }

  message += ' See http://fb.me/react-warning-keys for more information.';
  monitorCodeUse(warningID, {
    component: useName,
    componentOwner: childOwnerName
  });
  console.warn(message);
}

/**
 * Log that we're using an object map. We're considering deprecating this
 * feature and replace it with proper Map and ImmutableMap data structures.
 *
 * @internal
 */
function monitorUseOfObjectMap() {
  var currentName = getCurrentOwnerDisplayName() || '';
  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {
    return;
  }
  ownerHasMonitoredObjectMap[currentName] = true;
  monitorCodeUse('react_object_map_children');
}

/**
 * Ensure that every component either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {*} component Statically passed child of any type.
 * @param {*} parentType component's parent's type.
 * @return {boolean}
 */
function validateChildKeys(component, parentType) {
  if (Array.isArray(component)) {
    for (var i = 0; i < component.length; i++) {
      var child = component[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(component)) {
    // This component was passed in a valid location.
    component._store.validated = true;
  } else if (component && typeof component === 'object') {
    monitorUseOfObjectMap();
    for (var name in component) {
      validatePropertyKey(name, component[name], parentType);
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;
        // This will soon use the warning module
        monitorCodeUse(
          'react_failed_descriptor_type_check',
          { message: error.message }
        );
      }
    }
  }
}

var ReactElementValidator = {

  createElement: function(type, props, children) {
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    ("production" !== "development" ? warning(
      type != null,
      'React.createElement: type should not be null or undefined. It should ' +
        'be a string (for DOM elements) or a ReactClass (for composite ' +
        'components).'
    ) : null);

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }

    if (type) {
      var name = type.displayName;
      if (type.propTypes) {
        checkPropTypes(
          name,
          type.propTypes,
          element.props,
          ReactPropTypeLocations.prop
        );
      }
      if (type.contextTypes) {
        checkPropTypes(
          name,
          type.contextTypes,
          element._context,
          ReactPropTypeLocations.context
        );
      }
    }
    return element;
  },

  createFactory: function(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(
      null,
      type
    );
    validatedFactory.type = type;
    return validatedFactory;
  }

};

module.exports = ReactElementValidator;

},{"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactPropTypeLocations":71,"./monitorCodeUse":136,"./warning":145}],54:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

var component;
// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIdsRegistry = {};

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function(emptyComponent) {
    component = ReactElement.createFactory(emptyComponent);
  }
};

/**
 * @return {ReactComponent} component The injected empty component.
 */
function getEmptyComponent() {
  ("production" !== "development" ? invariant(
    component,
    'Trying to return null from a render, but no null placeholder component ' +
    'was injected.'
  ) : invariant(component));
  return component();
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIdsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIdsRegistry[id];
}

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return nullComponentIdsRegistry[id];
}

var ReactEmptyComponent = {
  deregisterNullComponentID: deregisterNullComponentID,
  getEmptyComponent: getEmptyComponent,
  injection: ReactEmptyComponentInjection,
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID
};

module.exports = ReactEmptyComponent;

},{"./ReactElement":52,"./invariant":126}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

"use strict";

var ReactErrorUtils = {
  /**
   * Creates a guarded version of a function. This is supposed to make debugging
   * of event handlers easier. To aid debugging with the browser's debugger,
   * this currently simply returns the original function.
   *
   * @param {function} func Function to be executed
   * @param {string} name The name of the guard
   * @return {function}
   */
  guard: function(func, name) {
    return func;
  }
};

module.exports = ReactErrorUtils;

},{}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

"use strict";

var EventPluginHub = _dereq_("./EventPluginHub");

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue();
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var events = EventPluginHub.extractEvents(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent
    );

    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

},{"./EventPluginHub":18}],57:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

"use strict";

var EventListener = _dereq_("./EventListener");
var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");
var PooledClass = _dereq_("./PooledClass");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMount = _dereq_("./ReactMount");
var ReactUpdates = _dereq_("./ReactUpdates");

var assign = _dereq_("./Object.assign");
var getEventTarget = _dereq_("./getEventTarget");
var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function() {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(
  TopLevelCallbackBookKeeping,
  PooledClass.twoArgumentPooler
);

function handleTopLevelImpl(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(
    getEventTarget(bookKeeping.nativeEvent)
  ) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(
      bookKeeping.topLevelType,
      topLevelTarget,
      topLevelTargetID,
      bookKeeping.nativeEvent
    );
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function(handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function(enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function() {
    return ReactEventListener._enabled;
  },


  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.listen(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return;
    }
    return EventListener.capture(
      element,
      handlerBaseName,
      ReactEventListener.dispatchEvent.bind(null, topLevelType)
    );
  },

  monitorScrollValue: function(refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
    EventListener.listen(window, 'resize', callback);
  },

  dispatchEvent: function(topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
      topLevelType,
      nativeEvent
    );
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

},{"./EventListener":17,"./ExecutionEnvironment":22,"./Object.assign":27,"./PooledClass":28,"./ReactInstanceHandles":60,"./ReactMount":63,"./ReactUpdates":79,"./getEventTarget":117,"./getUnboundedScrollPosition":122}],58:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var EventPluginHub = _dereq_("./EventPluginHub");
var ReactComponent = _dereq_("./ReactComponent");
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactPerf = _dereq_("./ReactPerf");
var ReactRootIndex = _dereq_("./ReactRootIndex");
var ReactUpdates = _dereq_("./ReactUpdates");

var ReactInjection = {
  Component: ReactComponent.injection,
  CompositeComponent: ReactCompositeComponent.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

},{"./DOMProperty":11,"./EventPluginHub":18,"./ReactBrowserEventEmitter":30,"./ReactComponent":32,"./ReactCompositeComponent":34,"./ReactEmptyComponent":54,"./ReactNativeComponent":66,"./ReactPerf":68,"./ReactRootIndex":75,"./ReactUpdates":79}],59:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

"use strict";

var ReactDOMSelection = _dereq_("./ReactDOMSelection");

var containsNode = _dereq_("./containsNode");
var focusNode = _dereq_("./focusNode");
var getActiveElement = _dereq_("./getActiveElement");

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function(elem) {
    return elem && (
      (elem.nodeName === 'INPUT' && elem.type === 'text') ||
      elem.nodeName === 'TEXTAREA' ||
      elem.contentEditable === 'true'
    );
  },

  getSelectionInformation: function() {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange:
          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
          ReactInputSelection.getSelection(focusedElem) :
          null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function(priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem &&
        isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(
          priorFocusedElem,
          priorSelectionRange
        );
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function(input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName === 'INPUT') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || {start: 0, end: 0};
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function(input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName === 'INPUT') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

},{"./ReactDOMSelection":46,"./containsNode":101,"./focusNode":111,"./getActiveElement":113}],60:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

"use strict";

var ReactRootIndex = _dereq_("./ReactRootIndex");

var invariant = _dereq_("./invariant");

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 100;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || (
    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
  );
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return (
    descendantID.indexOf(ancestorID) === 0 &&
    isBoundary(descendantID, ancestorID.length)
  );
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  ("production" !== "development" ? invariant(
    isValidID(ancestorID) && isValidID(destinationID),
    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
    ancestorID,
    destinationID
  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
  ("production" !== "development" ? invariant(
    isAncestorIDOf(ancestorID, destinationID),
    'getNextDescendantID(...): React has made an invalid assumption about ' +
    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
    ancestorID,
    destinationID
  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  for (var i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  ("production" !== "development" ? invariant(
    isValidID(longestCommonID),
    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
    oneID,
    twoID,
    longestCommonID
  ) : invariant(isValidID(longestCommonID)));
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  ("production" !== "development" ? invariant(
    start !== stop,
    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
    start
  ) : invariant(start !== stop));
  var traverseUp = isAncestorIDOf(stop, start);
  ("production" !== "development" ? invariant(
    traverseUp || isAncestorIDOf(start, stop),
    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
    'not have a parent path.',
    start,
    stop
  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start; /* until break */; id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    ("production" !== "development" ? invariant(
      depth++ < MAX_TREE_DEPTH,
      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
      start, stop
    ) : invariant(depth++ < MAX_TREE_DEPTH));
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function() {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function(rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function(id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function(targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function(targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;

},{"./ReactRootIndex":75,"./invariant":126}],61:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactLegacyElement
 */

"use strict";

var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");

var invariant = _dereq_("./invariant");
var monitorCodeUse = _dereq_("./monitorCodeUse");
var warning = _dereq_("./warning");

var legacyFactoryLogs = {};
function warnForLegacyFactoryCall() {
  if (!ReactLegacyElementFactory._isLegacyCallWarningEnabled) {
    return;
  }
  var owner = ReactCurrentOwner.current;
  var name = owner && owner.constructor ? owner.constructor.displayName : '';
  if (!name) {
    name = 'Something';
  }
  if (legacyFactoryLogs.hasOwnProperty(name)) {
    return;
  }
  legacyFactoryLogs[name] = true;
  ("production" !== "development" ? warning(
    false,
    name + ' is calling a React component directly. ' +
    'Use a factory or JSX instead. See: http://fb.me/react-legacyfactory'
  ) : null);
  monitorCodeUse('react_legacy_factory_call', { version: 3, name: name });
}

function warnForPlainFunctionType(type) {
  var isReactClass =
    type.prototype &&
    typeof type.prototype.mountComponent === 'function' &&
    typeof type.prototype.receiveComponent === 'function';
  if (isReactClass) {
    ("production" !== "development" ? warning(
      false,
      'Did not expect to get a React class here. Use `Component` instead ' +
      'of `Component.type` or `this.constructor`.'
    ) : null);
  } else {
    if (!type._reactWarnedForThisType) {
      try {
        type._reactWarnedForThisType = true;
      } catch (x) {
        // just incase this is a frozen object or some special object
      }
      monitorCodeUse(
        'react_non_component_in_jsx',
        { version: 3, name: type.name }
      );
    }
    ("production" !== "development" ? warning(
      false,
      'This JSX uses a plain function. Only React components are ' +
      'valid in React\'s JSX transform.'
    ) : null);
  }
}

function warnForNonLegacyFactory(type) {
  ("production" !== "development" ? warning(
    false,
    'Do not pass React.DOM.' + type.type + ' to JSX or createFactory. ' +
    'Use the string "' + type.type + '" instead.'
  ) : null);
}

/**
 * Transfer static properties from the source to the target. Functions are
 * rebound to have this reflect the original source.
 */
function proxyStaticMethods(target, source) {
  if (typeof source !== 'function') {
    return;
  }
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      var value = source[key];
      if (typeof value === 'function') {
        var bound = value.bind(source);
        // Copy any properties defined on the function, such as `isRequired` on
        // a PropTypes validator.
        for (var k in value) {
          if (value.hasOwnProperty(k)) {
            bound[k] = value[k];
          }
        }
        target[key] = bound;
      } else {
        target[key] = value;
      }
    }
  }
}

// We use an object instead of a boolean because booleans are ignored by our
// mocking libraries when these factories gets mocked.
var LEGACY_MARKER = {};
var NON_LEGACY_MARKER = {};

var ReactLegacyElementFactory = {};

ReactLegacyElementFactory.wrapCreateFactory = function(createFactory) {
  var legacyCreateFactory = function(type) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createFactory(type);
    }

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      return createFactory(type.type);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      return createFactory(type.type);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // Unless it's a legacy factory, then this is probably a plain function,
    // that is expecting to be invoked by JSX. We can just return it as is.
    return type;
  };
  return legacyCreateFactory;
};

ReactLegacyElementFactory.wrapCreateElement = function(createElement) {
  var legacyCreateElement = function(type, props, children) {
    if (typeof type !== 'function') {
      // Non-function types cannot be legacy factories
      return createElement.apply(this, arguments);
    }

    var args;

    if (type.isReactNonLegacyFactory) {
      // This is probably a factory created by ReactDOM we unwrap it to get to
      // the underlying string type. It shouldn't have been passed here so we
      // warn.
      if ("production" !== "development") {
        warnForNonLegacyFactory(type);
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if (type.isReactLegacyFactory) {
      // This is probably a legacy factory created by ReactCompositeComponent.
      // We unwrap it to get to the underlying class.
      if (type._isMockFunction) {
        // If this is a mock function, people will expect it to be called. We
        // will actually call the original mock factory function instead. This
        // future proofs unit testing that assume that these are classes.
        type.type._mockedReactClassConstructor = type;
      }
      args = Array.prototype.slice.call(arguments, 0);
      args[0] = type.type;
      return createElement.apply(this, args);
    }

    if ("production" !== "development") {
      warnForPlainFunctionType(type);
    }

    // This is being called with a plain function we should invoke it
    // immediately as if this was used with legacy JSX.
    return type.apply(null, Array.prototype.slice.call(arguments, 1));
  };
  return legacyCreateElement;
};

ReactLegacyElementFactory.wrapFactory = function(factory) {
  ("production" !== "development" ? invariant(
    typeof factory === 'function',
    'This is suppose to accept a element factory'
  ) : invariant(typeof factory === 'function'));
  var legacyElementFactory = function(config, children) {
    // This factory should not be called when JSX is used. Use JSX instead.
    if ("production" !== "development") {
      warnForLegacyFactoryCall();
    }
    return factory.apply(this, arguments);
  };
  proxyStaticMethods(legacyElementFactory, factory.type);
  legacyElementFactory.isReactLegacyFactory = LEGACY_MARKER;
  legacyElementFactory.type = factory.type;
  return legacyElementFactory;
};

// This is used to mark a factory that will remain. E.g. we're allowed to call
// it as a function. However, you're not suppose to pass it to createElement
// or createFactory, so it will warn you if you do.
ReactLegacyElementFactory.markNonLegacyFactory = function(factory) {
  factory.isReactNonLegacyFactory = NON_LEGACY_MARKER;
  return factory;
};

// Checks if a factory function is actually a legacy factory pretending to
// be a class.
ReactLegacyElementFactory.isValidFactory = function(factory) {
  // TODO: This will be removed and moved into a class validator or something.
  return typeof factory === 'function' &&
    factory.isReactLegacyFactory === LEGACY_MARKER;
};

ReactLegacyElementFactory.isValidClass = function(factory) {
  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      false,
      'isValidClass is deprecated and will be removed in a future release. ' +
      'Use a more specific validator instead.'
    ) : null);
  }
  return ReactLegacyElementFactory.isValidFactory(factory);
};

ReactLegacyElementFactory._isLegacyCallWarningEnabled = true;

module.exports = ReactLegacyElementFactory;

},{"./ReactCurrentOwner":36,"./invariant":126,"./monitorCodeUse":136,"./warning":145}],62:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

"use strict";

var adler32 = _dereq_("./adler32");

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function(markup) {
    var checksum = adler32(markup);
    return markup.replace(
      '>',
      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
    );
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function(markup, element) {
    var existingChecksum = element.getAttribute(
      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
    );
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

},{"./adler32":98}],63:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

"use strict";

var DOMProperty = _dereq_("./DOMProperty");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactPerf = _dereq_("./ReactPerf");

var containsNode = _dereq_("./containsNode");
var deprecated = _dereq_("./deprecated");
var getReactRootElementInContainer = _dereq_("./getReactRootElementInContainer");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");
var warning = _dereq_("./warning");

var createElement = ReactLegacyElement.wrapCreateElement(
  ReactElement.createElement
);

var SEPARATOR = ReactInstanceHandles.SEPARATOR;

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if ("production" !== "development") {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        ("production" !== "development" ? invariant(
          !isValid(cached, id),
          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
          ATTR_NAME, id
        ) : invariant(!isValid(cached, id)));

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    ("production" !== "development" ? invariant(
      internalGetID(node) === id,
      'ReactMount: Unexpected modification of `%s`',
      ATTR_NAME
    ) : invariant(internalGetID(node) === id));

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(
    targetID,
    findDeepestCachedAncestorImpl
  );

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounting is the process of initializing a React component by creatings its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function(container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function(
      prevComponent,
      nextComponent,
      container,
      callback) {
    var nextProps = nextComponent.props;
    ReactMount.scrollMonitor(container, function() {
      prevComponent.replaceProps(nextProps, callback);
    });

    if ("production" !== "development") {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] =
        getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function(nextComponent, container) {
    ("production" !== "development" ? invariant(
      container && (
        container.nodeType === ELEMENT_NODE_TYPE ||
        container.nodeType === DOC_NODE_TYPE
      ),
      '_registerComponent(...): Target container is not a DOM element.'
    ) : invariant(container && (
      container.nodeType === ELEMENT_NODE_TYPE ||
      container.nodeType === DOC_NODE_TYPE
    )));

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: ReactPerf.measure(
    'ReactMount',
    '_renderNewRootComponent',
    function(
        nextComponent,
        container,
        shouldReuseMarkup) {
      // Various parts of our code (such as ReactCompositeComponent's
      // _renderValidatedComponent) assume that calls to render aren't nested;
      // verify that that's the case.
      ("production" !== "development" ? warning(
        ReactCurrentOwner.current == null,
        '_renderNewRootComponent(): Render methods should be a pure function ' +
        'of props and state; triggering nested component updates from ' +
        'render is not allowed. If necessary, trigger nested updates in ' +
        'componentDidUpdate.'
      ) : null);

      var componentInstance = instantiateReactComponent(nextComponent, null);
      var reactRootID = ReactMount._registerComponent(
        componentInstance,
        container
      );
      componentInstance.mountComponentIntoNode(
        reactRootID,
        container,
        shouldReuseMarkup
      );

      if ("production" !== "development") {
        // Record the root element in case it later gets transplanted.
        rootElementsByReactRootID[reactRootID] =
          getReactRootElementInContainer(container);
      }

      return componentInstance;
    }
  ),

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function(nextElement, container, callback) {
    ("production" !== "development" ? invariant(
      ReactElement.isValidElement(nextElement),
      'renderComponent(): Invalid component element.%s',
      (
        typeof nextElement === 'string' ?
          ' Instead of passing an element string, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        ReactLegacyElement.isValidFactory(nextElement) ?
          ' Instead of passing a component class, make sure to instantiate ' +
          'it by passing it to React.createElement.' :
        // Check if it quacks like a element
        typeof nextElement.props !== "undefined" ?
          ' This may be caused by unintentionally loading two independent ' +
          'copies of React.' :
          ''
      )
    ) : invariant(ReactElement.isValidElement(nextElement)));

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevElement = prevComponent._currentElement;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        return ReactMount._updateRootComponent(
          prevComponent,
          nextElement,
          container,
          callback
        );
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup =
      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

    var component = ReactMount._renderNewRootComponent(
      nextElement,
      container,
      shouldReuseMarkup
    );
    callback && callback.call(component);
    return component;
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into the supplied `container`.
   *
   * @param {function} constructor React component constructor.
   * @param {?object} props Initial props of the component instance.
   * @param {DOMElement} container DOM element to render into.
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  constructAndRenderComponent: function(constructor, props, container) {
    var element = createElement(constructor, props);
    return ReactMount.render(element, container);
  },

  /**
   * Constructs a component instance of `constructor` with `initialProps` and
   * renders it into a container node identified by supplied `id`.
   *
   * @param {function} componentConstructor React component constructor
   * @param {?object} props Initial props of the component instance.
   * @param {string} id ID of the DOM element to render into.
   * @return {ReactComponent} Component instance rendered in the container node.
   */
  constructAndRenderComponentByID: function(constructor, props, id) {
    var domNode = document.getElementById(id);
    ("production" !== "development" ? invariant(
      domNode,
      'Tried to get element with id of "%s" but it is not present on the page.',
      id
    ) : invariant(domNode));
    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function(container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function(container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    ("production" !== "development" ? warning(
      ReactCurrentOwner.current == null,
      'unmountComponentAtNode(): Render methods should be a pure function of ' +
      'props and state; triggering nested component updates from render is ' +
      'not allowed. If necessary, trigger nested updates in ' +
      'componentDidUpdate.'
    ) : null);

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      return false;
    }
    ReactMount.unmountComponentFromNode(component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if ("production" !== "development") {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Unmounts a component and removes it from the DOM.
   *
   * @param {ReactComponent} instance React component instance.
   * @param {DOMElement} container DOM element to unmount from.
   * @final
   * @internal
   * @see {ReactMount.unmountComponentAtNode}
   */
  unmountComponentFromNode: function(instance, container) {
    instance.unmountComponent();

    if (container.nodeType === DOC_NODE_TYPE) {
      container = container.documentElement;
    }

    // http://jsperf.com/emptying-a-node
    while (container.lastChild) {
      container.removeChild(container.lastChild);
    }
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function(id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if ("production" !== "development") {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        ("production" !== "development" ? invariant(
          // Call internalGetID here because getID calls isValid which calls
          // findReactContainerForID (this function).
          internalGetID(rootElement) === reactRootID,
          'ReactMount: Root element ID differed from reactRootID.'
        ) : invariant(// Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID));

        var containerChild = container.firstChild;
        if (containerChild &&
            reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          console.warn(
            'ReactMount: Root element has been removed from its original ' +
            'container. New container:', rootElement.parentNode
          );
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function(id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * True if the supplied `node` is rendered by React.
   *
   * @param {*} node DOM Element to check.
   * @return {boolean} True if the DOM Element appears to be rendered by React.
   * @internal
   */
  isRenderedByReact: function(node) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      return false;
    }
    var id = ReactMount.getID(node);
    return id ? id.charAt(0) === SEPARATOR : false;
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function(node) {
    var current = node;
    while (current && current.parentNode !== current) {
      if (ReactMount.isRenderedByReact(current)) {
        return current;
      }
      current = current.parentNode;
    }
    return null;
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function(ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }

        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    ("production" !== "development" ? invariant(
      false,
      'findComponentRoot(..., %s): Unable to find element. This probably ' +
      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
      'parent. ' +
      'Try inspecting the child nodes of the element with React ID `%s`.',
      targetID,
      ReactMount.getID(ancestorNode)
    ) : invariant(false));
  },


  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  purgeID: purgeID
};

// Deprecations (remove for 0.13)
ReactMount.renderComponent = deprecated(
  'ReactMount',
  'renderComponent',
  'render',
  this,
  ReactMount.render
);

module.exports = ReactMount;

},{"./DOMProperty":11,"./ReactBrowserEventEmitter":30,"./ReactCurrentOwner":36,"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactLegacyElement":61,"./ReactPerf":68,"./containsNode":101,"./deprecated":106,"./getReactRootElementInContainer":120,"./instantiateReactComponent":125,"./invariant":126,"./shouldUpdateReactComponent":142,"./warning":145}],64:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

"use strict";

var ReactComponent = _dereq_("./ReactComponent");
var ReactMultiChildUpdateTypes = _dereq_("./ReactMultiChildUpdateTypes");

var flattenChildren = _dereq_("./flattenChildren");
var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var shouldUpdateReactComponent = _dereq_("./shouldUpdateReactComponent");

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    textContent: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    textContent: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    textContent: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(
      updateQueue,
      markupQueue
    );
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function(nestedChildren, transaction) {
      var children = flattenChildren(nestedChildren);
      var mountImages = [];
      var index = 0;
      this._renderedChildren = children;
      for (var name in children) {
        var child = children[name];
        if (children.hasOwnProperty(name)) {
          // The rendered children must be turned into instances as they're
          // mounted.
          var childInstance = instantiateReactComponent(child, null);
          children[name] = childInstance;
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = childInstance.mountComponent(
            rootID,
            transaction,
            this._mountDepth + 1
          );
          childInstance._mountIndex = index;
          mountImages.push(mountImage);
          index++;
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function(nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function(nextNestedChildren, transaction) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildren, transaction);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          errorThrown ? clearQueue() : processQueue();
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildren Nested child maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function(nextNestedChildren, transaction) {
      var nextChildren = flattenChildren(nextNestedChildren);
      var prevChildren = this._renderedChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var prevElement = prevChild && prevChild._currentElement;
        var nextElement = nextChildren[name];
        if (shouldUpdateReactComponent(prevElement, nextElement)) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild.receiveComponent(nextElement, transaction);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChildByName(prevChild, name);
          }
          // The child must be instantiated before it's mounted.
          var nextChildInstance = instantiateReactComponent(
            nextElement,
            null
          );
          this._mountChildByNameAtIndex(
            nextChildInstance, name, nextIndex, transaction
          );
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) &&
            !(nextChildren && nextChildren[name])) {
          this._unmountChildByName(prevChildren[name], name);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function() {
      var renderedChildren = this._renderedChildren;
      for (var name in renderedChildren) {
        var renderedChild = renderedChildren[name];
        // TODO: When is this not true?
        if (renderedChild.unmountComponent) {
          renderedChild.unmountComponent();
        }
      }
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function(child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function(child, mountImage) {
      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function(child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function(textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function(child, name, index, transaction) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = child.mountComponent(
        rootID,
        transaction,
        this._mountDepth + 1
      );
      child._mountIndex = index;
      this.createChild(child, mountImage);
      this._renderedChildren = this._renderedChildren || {};
      this._renderedChildren[name] = child;
    },

    /**
     * Unmounts a rendered child by name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @param {string} name Name of the child in `this._renderedChildren`.
     * @private
     */
    _unmountChildByName: function(child, name) {
      this.removeChild(child);
      child._mountIndex = null;
      child.unmountComponent();
      delete this._renderedChildren[name];
    }

  }

};

module.exports = ReactMultiChild;

},{"./ReactComponent":32,"./ReactMultiChildUpdateTypes":65,"./flattenChildren":110,"./instantiateReactComponent":125,"./shouldUpdateReactComponent":142}],65:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;

},{"./keyMirror":132}],66:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

"use strict";

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");

var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags
var tagToComponentClass = {};

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function(componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function(componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Create an internal class for a specific tag.
 *
 * @param {string} tag The tag for which to create an internal instance.
 * @param {any} props The props passed to the instance constructor.
 * @return {ReactComponent} component The injected empty component.
 */
function createInstanceForTag(tag, props, parentType) {
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  if (parentType === tag) {
    // Avoid recursion
    ("production" !== "development" ? invariant(
      genericComponentClass,
      'There is no registered component for the tag %s',
      tag
    ) : invariant(genericComponentClass));
    return new genericComponentClass(tag, props);
  }
  // Unwrap legacy factories
  return new componentClass.type(props);
}

var ReactNativeComponent = {
  createInstanceForTag: createInstanceForTag,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;

},{"./Object.assign":27,"./invariant":126}],67:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

"use strict";

var emptyObject = _dereq_("./emptyObject");
var invariant = _dereq_("./invariant");

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function(object) {
    return !!(
      object &&
      typeof object.attachRef === 'function' &&
      typeof object.detachRef === 'function'
    );
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to add a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function(component, ref, owner) {
    ("production" !== "development" ? invariant(
      ReactOwner.isValidOwner(owner),
      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
      'usually means that you\'re trying to remove a ref to a component that ' +
      'doesn\'t have an owner (that is, was not created inside of another ' +
      'component\'s `render` method). Try rendering this component inside of ' +
      'a new top-level component which will hold the ref.'
    ) : invariant(ReactOwner.isValidOwner(owner)));
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.refs[ref] === component) {
      owner.detachRef(ref);
    }
  },

  /**
   * A ReactComponent must mix this in to have refs.
   *
   * @lends {ReactOwner.prototype}
   */
  Mixin: {

    construct: function() {
      this.refs = emptyObject;
    },

    /**
     * Lazily allocates the refs object and stores `component` as `ref`.
     *
     * @param {string} ref Reference name.
     * @param {component} component Component to store as `ref`.
     * @final
     * @private
     */
    attachRef: function(ref, component) {
      ("production" !== "development" ? invariant(
        component.isOwnedBy(this),
        'attachRef(%s, ...): Only a component\'s owner can store a ref to it.',
        ref
      ) : invariant(component.isOwnedBy(this)));
      var refs = this.refs === emptyObject ? (this.refs = {}) : this.refs;
      refs[ref] = component;
    },

    /**
     * Detaches a reference name.
     *
     * @param {string} ref Name to dereference.
     * @final
     * @private
     */
    detachRef: function(ref) {
      delete this.refs[ref];
    }

  }

};

module.exports = ReactOwner;

},{"./emptyObject":108,"./invariant":126}],68:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

"use strict";

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function(objName, fnName, func) {
    if ("production" !== "development") {
      var measuredFunc = null;
      var wrapper = function() {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function(measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;

},{}],69:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTransferer
 */

"use strict";

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var invariant = _dereq_("./invariant");
var joinClasses = _dereq_("./joinClasses");
var warning = _dereq_("./warning");

var didWarn = false;

/**
 * Creates a transfer strategy that will merge prop values using the supplied
 * `mergeStrategy`. If a prop was previously unset, this just sets it.
 *
 * @param {function} mergeStrategy
 * @return {function}
 */
function createTransferStrategy(mergeStrategy) {
  return function(props, key, value) {
    if (!props.hasOwnProperty(key)) {
      props[key] = value;
    } else {
      props[key] = mergeStrategy(props[key], value);
    }
  };
}

var transferStrategyMerge = createTransferStrategy(function(a, b) {
  // `merge` overrides the first object's (`props[key]` above) keys using the
  // second object's (`value`) keys. An object's style's existing `propA` would
  // get overridden. Flip the order here.
  return assign({}, b, a);
});

/**
 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
 * NOTE: if you add any more exceptions to this list you should be sure to
 * update `cloneWithProps()` accordingly.
 */
var TransferStrategies = {
  /**
   * Never transfer `children`.
   */
  children: emptyFunction,
  /**
   * Transfer the `className` prop by merging them.
   */
  className: createTransferStrategy(joinClasses),
  /**
   * Transfer the `style` prop (which is an object) by merging them.
   */
  style: transferStrategyMerge
};

/**
 * Mutates the first argument by transferring the properties from the second
 * argument.
 *
 * @param {object} props
 * @param {object} newProps
 * @return {object}
 */
function transferInto(props, newProps) {
  for (var thisKey in newProps) {
    if (!newProps.hasOwnProperty(thisKey)) {
      continue;
    }

    var transferStrategy = TransferStrategies[thisKey];

    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
      transferStrategy(props, thisKey, newProps[thisKey]);
    } else if (!props.hasOwnProperty(thisKey)) {
      props[thisKey] = newProps[thisKey];
    }
  }
  return props;
}

/**
 * ReactPropTransferer are capable of transferring props to another component
 * using a `transferPropsTo` method.
 *
 * @class ReactPropTransferer
 */
var ReactPropTransferer = {

  TransferStrategies: TransferStrategies,

  /**
   * Merge two props objects using TransferStrategies.
   *
   * @param {object} oldProps original props (they take precedence)
   * @param {object} newProps new props to merge in
   * @return {object} a new object containing both sets of props merged.
   */
  mergeProps: function(oldProps, newProps) {
    return transferInto(assign({}, oldProps), newProps);
  },

  /**
   * @lends {ReactPropTransferer.prototype}
   */
  Mixin: {

    /**
     * Transfer props from this component to a target component.
     *
     * Props that do not have an explicit transfer strategy will be transferred
     * only if the target component does not already have the prop set.
     *
     * This is usually used to pass down props to a returned root component.
     *
     * @param {ReactElement} element Component receiving the properties.
     * @return {ReactElement} The supplied `component`.
     * @final
     * @protected
     */
    transferPropsTo: function(element) {
      ("production" !== "development" ? invariant(
        element._owner === this,
        '%s: You can\'t call transferPropsTo() on a component that you ' +
        'don\'t own, %s. This usually means you are calling ' +
        'transferPropsTo() on a component passed in as props or children.',
        this.constructor.displayName,
        typeof element.type === 'string' ?
        element.type :
        element.type.displayName
      ) : invariant(element._owner === this));

      if ("production" !== "development") {
        if (!didWarn) {
          didWarn = true;
          ("production" !== "development" ? warning(
            false,
            'transferPropsTo is deprecated. ' +
            'See http://fb.me/react-transferpropsto for more information.'
          ) : null);
        }
      }

      // Because elements are immutable we have to merge into the existing
      // props object rather than clone it.
      transferInto(element.props, this.props);

      return element;
    }

  }
};

module.exports = ReactPropTransferer;

},{"./Object.assign":27,"./emptyFunction":107,"./invariant":126,"./joinClasses":131,"./warning":145}],70:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

"use strict";

var ReactPropTypeLocationNames = {};

if ("production" !== "development") {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;

},{}],71:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

"use strict";

var keyMirror = _dereq_("./keyMirror");

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;

},{"./keyMirror":132}],72:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactPropTypeLocationNames = _dereq_("./ReactPropTypeLocationNames");

var deprecated = _dereq_("./deprecated");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var elementTypeChecker = createElementTypeChecker();
var nodeTypeChecker = createNodeChecker();

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: elementTypeChecker,
  instanceOf: createInstanceTypeChecker,
  node: nodeTypeChecker,
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker,

  component: deprecated(
    'React.PropTypes',
    'component',
    'element',
    this,
    elementTypeChecker
  ),
  renderable: deprecated(
    'React.PropTypes',
    'renderable',
    'node',
    this,
    nodeTypeChecker
  )
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location) {
    componentName = componentName || ANONYMOUS;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error(
          ("Required " + locationName + " `" + propName + "` was not specified in ")+
          ("`" + componentName + "`.")
        );
      }
    } else {
      return validate(props, propName, componentName, location);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns());
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
      );
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location);
      if (error instanceof Error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactElement.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
    );
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type ") +
        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
      );
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location);
        if (error instanceof Error) {
          return error;
        }
      }
    }
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  function validate(props, propName, componentName, location) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location) == null) {
        return;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error(
      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
      ("`" + componentName + "`.")
    );
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
        ("`" + componentName + "`, expected a ReactNode.")
      );
    }
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error(
        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
        ("supplied to `" + componentName + "`, expected `object`.")
      );
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location);
      if (error) {
        return error;
      }
    }
  }
  return createChainableTypeChecker(validate, 'expected `object`');
}

function isNode(propValue) {
  switch(typeof propValue) {
    case 'number':
    case 'string':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (ReactElement.isValidElement(propValue)) {
        return true;
      }
      for (var k in propValue) {
        if (!isNode(propValue[k])) {
          return false;
        }
      }
      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

module.exports = ReactPropTypes;

},{"./ReactElement":52,"./ReactPropTypeLocationNames":70,"./deprecated":106,"./emptyFunction":107}],73:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPutListenerQueue
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");

var assign = _dereq_("./Object.assign");

function ReactPutListenerQueue() {
  this.listenersToPut = [];
}

assign(ReactPutListenerQueue.prototype, {
  enqueuePutListener: function(rootNodeID, propKey, propValue) {
    this.listenersToPut.push({
      rootNodeID: rootNodeID,
      propKey: propKey,
      propValue: propValue
    });
  },

  putListeners: function() {
    for (var i = 0; i < this.listenersToPut.length; i++) {
      var listenerToPut = this.listenersToPut[i];
      ReactBrowserEventEmitter.putListener(
        listenerToPut.rootNodeID,
        listenerToPut.propKey,
        listenerToPut.propValue
      );
    }
  },

  reset: function() {
    this.listenersToPut.length = 0;
  },

  destructor: function() {
    this.reset();
  }
});

PooledClass.addPoolingTo(ReactPutListenerQueue);

module.exports = ReactPutListenerQueue;

},{"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30}],74:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactBrowserEventEmitter = _dereq_("./ReactBrowserEventEmitter");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function() {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
   *   restores the previous value.
   */
  close: function(previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function() {
    this.reactMountReady.notifyAll();
  }
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: function() {
    this.putListenerQueue.putListeners();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  SELECTION_RESTORATION,
  EVENT_SUPPRESSION,
  ON_DOM_READY_QUEUEING
];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction() {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap proceedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactBrowserEventEmitter":30,"./ReactInputSelection":59,"./ReactPutListenerQueue":73,"./Transaction":95}],75:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

"use strict";

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function(_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;

},{}],76:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");
var ReactMarkupChecksum = _dereq_("./ReactMarkupChecksum");
var ReactServerRenderingTransaction =
  _dereq_("./ReactServerRenderingTransaction");

var instantiateReactComponent = _dereq_("./instantiateReactComponent");
var invariant = _dereq_("./invariant");

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToString(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, 0);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(element),
    'renderToStaticMarkup(): You must pass a valid ReactElement.'
  ) : invariant(ReactElement.isValidElement(element)));

  var transaction;
  try {
    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function() {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, 0);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./ReactMarkupChecksum":62,"./ReactServerRenderingTransaction":77,"./instantiateReactComponent":125,"./invariant":126}],77:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");
var CallbackQueue = _dereq_("./CallbackQueue");
var ReactPutListenerQueue = _dereq_("./ReactPutListenerQueue");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function() {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

var PUT_LISTENER_QUEUEING = {
  initialize: function() {
    this.putListenerQueue.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [
  PUT_LISTENER_QUEUEING,
  ON_DOM_READY_QUEUEING
];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.putListenerQueue = ReactPutListenerQueue.getPooled();
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap proceedures.
   */
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function() {
    return this.reactMountReady;
  },

  getPutListenerQueue: function() {
    return this.putListenerQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be resused.
   */
  destructor: function() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;

    ReactPutListenerQueue.release(this.putListenerQueue);
    this.putListenerQueue = null;
  }
};


assign(
  ReactServerRenderingTransaction.prototype,
  Transaction.Mixin,
  Mixin
);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactPutListenerQueue":73,"./Transaction":95,"./emptyFunction":107}],78:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTextComponent
 * @typechecks static-only
 */

"use strict";

var DOMPropertyOperations = _dereq_("./DOMPropertyOperations");
var ReactComponent = _dereq_("./ReactComponent");
var ReactElement = _dereq_("./ReactElement");

var assign = _dereq_("./Object.assign");
var escapeTextForBrowser = _dereq_("./escapeTextForBrowser");

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactTextComponent = function(props) {
  // This constructor and it's argument is currently used by mocks.
};

assign(ReactTextComponent.prototype, ReactComponent.Mixin, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {number} mountDepth number of components in the owner hierarchy
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function(rootID, transaction, mountDepth) {
    ReactComponent.Mixin.mountComponent.call(
      this,
      rootID,
      transaction,
      mountDepth
    );

    var escapedText = escapeTextForBrowser(this.props);

    if (transaction.renderToStaticMarkup) {
      // Normally we'd wrap this in a `span` for the reasons stated above, but
      // since this is a situation where React won't take over (static pages),
      // we can simply return the text as it is.
      return escapedText;
    }

    return (
      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
        escapedText +
      '</span>'
    );
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {object} nextComponent Contains the next text content.
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function(nextComponent, transaction) {
    var nextProps = nextComponent.props;
    if (nextProps !== this.props) {
      this.props = nextProps;
      ReactComponent.BackendIDOperations.updateTextContentByID(
        this._rootNodeID,
        nextProps
      );
    }
  }

});

var ReactTextComponentFactory = function(text) {
  // Bypass validation and configuration
  return new ReactElement(ReactTextComponent, null, null, null, null, text);
};

ReactTextComponentFactory.type = ReactTextComponent;

module.exports = ReactTextComponentFactory;

},{"./DOMPropertyOperations":12,"./Object.assign":27,"./ReactComponent":32,"./ReactElement":52,"./escapeTextForBrowser":109}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

"use strict";

var CallbackQueue = _dereq_("./CallbackQueue");
var PooledClass = _dereq_("./PooledClass");
var ReactCurrentOwner = _dereq_("./ReactCurrentOwner");
var ReactPerf = _dereq_("./ReactPerf");
var Transaction = _dereq_("./Transaction");

var assign = _dereq_("./Object.assign");
var invariant = _dereq_("./invariant");
var warning = _dereq_("./warning");

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  ("production" !== "development" ? invariant(
    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
    'ReactUpdates: must inject a reconcile transaction class and batching ' +
    'strategy'
  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
}

var NESTED_UPDATES = {
  initialize: function() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function() {
    this.callbackQueue.reset();
  },
  close: function() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction =
    ReactUpdates.ReactReconcileTransaction.getPooled();
}

assign(
  ReactUpdatesFlushTransaction.prototype,
  Transaction.Mixin, {
  getTransactionWrappers: function() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function(method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(
      this,
      this.reconcileTransaction.perform,
      this.reconcileTransaction,
      method,
      scope,
      a
    );
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b);
}

/**
 * Array comparator for ReactComponents by owner depth
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountDepthComparator(c1, c2) {
  return c1._mountDepth - c2._mountDepth;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  ("production" !== "development" ? invariant(
    len === dirtyComponents.length,
    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
    'match dirty-components array length (%s).',
    len,
    dirtyComponents.length
  ) : invariant(len === dirtyComponents.length));

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountDepthComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, ignore them
    // TODO: Queue unmounts in the same list to avoid this happening at all
    var component = dirtyComponents[i];
    if (component.isMounted()) {
      // If performUpdateIfNecessary happens to enqueue any new updates, we
      // shouldn't execute the callbacks until the next render happens, so
      // stash the callbacks first
      var callbacks = component._pendingCallbacks;
      component._pendingCallbacks = null;
      component.performUpdateIfNecessary(transaction.reconcileTransaction);

      if (callbacks) {
        for (var j = 0; j < callbacks.length; j++) {
          transaction.callbackQueue.enqueue(
            callbacks[j],
            component
          );
        }
      }
    }
  }
}

var flushBatchedUpdates = ReactPerf.measure(
  'ReactUpdates',
  'flushBatchedUpdates',
  function() {
    // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
    // array and perform any updates enqueued by mount-ready handlers (i.e.,
    // componentDidUpdate) but we need to check here too in order to catch
    // updates enqueued by setState callbacks and asap calls.
    while (dirtyComponents.length || asapEnqueued) {
      if (dirtyComponents.length) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction);
        ReactUpdatesFlushTransaction.release(transaction);
      }

      if (asapEnqueued) {
        asapEnqueued = false;
        var queue = asapCallbackQueue;
        asapCallbackQueue = CallbackQueue.getPooled();
        queue.notifyAll();
        CallbackQueue.release(queue);
      }
    }
  }
);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component, callback) {
  ("production" !== "development" ? invariant(
    !callback || typeof callback === "function",
    'enqueueUpdate(...): You called `setProps`, `replaceProps`, ' +
    '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
    'isn\'t callable.'
  ) : invariant(!callback || typeof callback === "function"));
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)
  ("production" !== "development" ? warning(
    ReactCurrentOwner.current == null,
    'enqueueUpdate(): Render methods should be a pure function of props ' +
    'and state; triggering nested component updates from render is not ' +
    'allowed. If necessary, trigger nested updates in ' +
    'componentDidUpdate.'
  ) : null);

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component, callback);
    return;
  }

  dirtyComponents.push(component);

  if (callback) {
    if (component._pendingCallbacks) {
      component._pendingCallbacks.push(callback);
    } else {
      component._pendingCallbacks = [callback];
    }
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  ("production" !== "development" ? invariant(
    batchingStrategy.isBatchingUpdates,
    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
    'updates are not being batched.'
  ) : invariant(batchingStrategy.isBatchingUpdates));
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function(ReconcileTransaction) {
    ("production" !== "development" ? invariant(
      ReconcileTransaction,
      'ReactUpdates: must provide a reconcile transaction class'
    ) : invariant(ReconcileTransaction));
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function(_batchingStrategy) {
    ("production" !== "development" ? invariant(
      _batchingStrategy,
      'ReactUpdates: must provide a batching strategy'
    ) : invariant(_batchingStrategy));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.batchedUpdates === 'function',
      'ReactUpdates: must provide a batchedUpdates() function'
    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
    ("production" !== "development" ? invariant(
      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;

},{"./CallbackQueue":6,"./Object.assign":27,"./PooledClass":28,"./ReactCurrentOwner":36,"./ReactPerf":68,"./Transaction":95,"./invariant":126,"./warning":145}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

/*jslint bitwise: true*/

"use strict";

var DOMProperty = _dereq_("./DOMProperty");

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var SVGDOMPropertyConfig = {
  Properties: {
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox'
  }
};

module.exports = SVGDOMPropertyConfig;

},{"./DOMProperty":11}],81:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPropagators = _dereq_("./EventPropagators");
var ReactInputSelection = _dereq_("./ReactInputSelection");
var SyntheticEvent = _dereq_("./SyntheticEvent");

var getActiveElement = _dereq_("./getActiveElement");
var isTextInputElement = _dereq_("./isTextInputElement");
var keyOf = _dereq_("./keyOf");
var shallowEqual = _dereq_("./shallowEqual");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSelect: null}),
      captured: keyOf({onSelectCapture: null})
    },
    dependencies: [
      topLevelTypes.topBlur,
      topLevelTypes.topContextMenu,
      topLevelTypes.topFocus,
      topLevelTypes.topKeyDown,
      topLevelTypes.topMouseDown,
      topLevelTypes.topMouseUp,
      topLevelTypes.topSelectionChange
    ]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @param {object}
 */
function getSelection(node) {
  if ('selectionStart' in node &&
      ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown ||
      activeElement == null ||
      activeElement != getActiveElement()) {
    return;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(
      eventTypes.select,
      activeElementID,
      nativeEvent
    );

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) ||
            topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't).
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      case topLevelTypes.topSelectionChange:
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent);
    }
  }
};

module.exports = SelectEventPlugin;

},{"./EventConstants":16,"./EventPropagators":21,"./ReactInputSelection":59,"./SyntheticEvent":87,"./getActiveElement":113,"./isTextInputElement":129,"./keyOf":133,"./shallowEqual":141}],82:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

"use strict";

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function() {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;

},{}],83:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

"use strict";

var EventConstants = _dereq_("./EventConstants");
var EventPluginUtils = _dereq_("./EventPluginUtils");
var EventPropagators = _dereq_("./EventPropagators");
var SyntheticClipboardEvent = _dereq_("./SyntheticClipboardEvent");
var SyntheticEvent = _dereq_("./SyntheticEvent");
var SyntheticFocusEvent = _dereq_("./SyntheticFocusEvent");
var SyntheticKeyboardEvent = _dereq_("./SyntheticKeyboardEvent");
var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");
var SyntheticDragEvent = _dereq_("./SyntheticDragEvent");
var SyntheticTouchEvent = _dereq_("./SyntheticTouchEvent");
var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var SyntheticWheelEvent = _dereq_("./SyntheticWheelEvent");

var getEventCharCode = _dereq_("./getEventCharCode");

var invariant = _dereq_("./invariant");
var keyOf = _dereq_("./keyOf");
var warning = _dereq_("./warning");

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({onBlur: true}),
      captured: keyOf({onBlurCapture: true})
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({onClick: true}),
      captured: keyOf({onClickCapture: true})
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({onContextMenu: true}),
      captured: keyOf({onContextMenuCapture: true})
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCopy: true}),
      captured: keyOf({onCopyCapture: true})
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onCut: true}),
      captured: keyOf({onCutCapture: true})
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDoubleClick: true}),
      captured: keyOf({onDoubleClickCapture: true})
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrag: true}),
      captured: keyOf({onDragCapture: true})
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnd: true}),
      captured: keyOf({onDragEndCapture: true})
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragEnter: true}),
      captured: keyOf({onDragEnterCapture: true})
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragExit: true}),
      captured: keyOf({onDragExitCapture: true})
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragLeave: true}),
      captured: keyOf({onDragLeaveCapture: true})
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragOver: true}),
      captured: keyOf({onDragOverCapture: true})
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDragStart: true}),
      captured: keyOf({onDragStartCapture: true})
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({onDrop: true}),
      captured: keyOf({onDropCapture: true})
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({onFocus: true}),
      captured: keyOf({onFocusCapture: true})
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({onInput: true}),
      captured: keyOf({onInputCapture: true})
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyDown: true}),
      captured: keyOf({onKeyDownCapture: true})
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyPress: true}),
      captured: keyOf({onKeyPressCapture: true})
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onKeyUp: true}),
      captured: keyOf({onKeyUpCapture: true})
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({onLoad: true}),
      captured: keyOf({onLoadCapture: true})
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({onError: true}),
      captured: keyOf({onErrorCapture: true})
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseDown: true}),
      captured: keyOf({onMouseDownCapture: true})
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseMove: true}),
      captured: keyOf({onMouseMoveCapture: true})
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOut: true}),
      captured: keyOf({onMouseOutCapture: true})
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseOver: true}),
      captured: keyOf({onMouseOverCapture: true})
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({onMouseUp: true}),
      captured: keyOf({onMouseUpCapture: true})
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({onPaste: true}),
      captured: keyOf({onPasteCapture: true})
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({onReset: true}),
      captured: keyOf({onResetCapture: true})
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({onScroll: true}),
      captured: keyOf({onScrollCapture: true})
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({onSubmit: true}),
      captured: keyOf({onSubmitCapture: true})
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchCancel: true}),
      captured: keyOf({onTouchCancelCapture: true})
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchEnd: true}),
      captured: keyOf({onTouchEndCapture: true})
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchMove: true}),
      captured: keyOf({onTouchMoveCapture: true})
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({onTouchStart: true}),
      captured: keyOf({onTouchStartCapture: true})
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({onWheel: true}),
      captured: keyOf({onWheelCapture: true})
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topBlur:        eventTypes.blur,
  topClick:       eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy:        eventTypes.copy,
  topCut:         eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag:        eventTypes.drag,
  topDragEnd:     eventTypes.dragEnd,
  topDragEnter:   eventTypes.dragEnter,
  topDragExit:    eventTypes.dragExit,
  topDragLeave:   eventTypes.dragLeave,
  topDragOver:    eventTypes.dragOver,
  topDragStart:   eventTypes.dragStart,
  topDrop:        eventTypes.drop,
  topError:       eventTypes.error,
  topFocus:       eventTypes.focus,
  topInput:       eventTypes.input,
  topKeyDown:     eventTypes.keyDown,
  topKeyPress:    eventTypes.keyPress,
  topKeyUp:       eventTypes.keyUp,
  topLoad:        eventTypes.load,
  topMouseDown:   eventTypes.mouseDown,
  topMouseMove:   eventTypes.mouseMove,
  topMouseOut:    eventTypes.mouseOut,
  topMouseOver:   eventTypes.mouseOver,
  topMouseUp:     eventTypes.mouseUp,
  topPaste:       eventTypes.paste,
  topReset:       eventTypes.reset,
  topScroll:      eventTypes.scroll,
  topSubmit:      eventTypes.submit,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd:    eventTypes.touchEnd,
  topTouchMove:   eventTypes.touchMove,
  topTouchStart:  eventTypes.touchStart,
  topWheel:       eventTypes.wheel
};

for (var topLevelType in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[topLevelType].dependencies = [topLevelType];
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * Same as the default implementation, except cancels the event when return
   * value is false. This behavior will be disabled in a future release.
   *
   * @param {object} Event to be dispatched.
   * @param {function} Application-level callback.
   * @param {string} domID DOM ID to pass to the callback.
   */
  executeDispatch: function(event, listener, domID) {
    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

    ("production" !== "development" ? warning(
      typeof returnValue !== 'boolean',
      'Returning `false` from an event handler is deprecated and will be ' +
      'ignored in a future release. Instead, manually call ' +
      'e.stopPropagation() or e.preventDefault(), as appropriate.'
    ) : null);

    if (returnValue === false) {
      event.stopPropagation();
      event.preventDefault();
    }
  },

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function(
      topLevelType,
      topLevelTarget,
      topLevelTargetID,
      nativeEvent) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topError:
      case topLevelTypes.topReset:
      case topLevelTypes.topSubmit:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
        /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    ("production" !== "development" ? invariant(
      EventConstructor,
      'SimpleEventPlugin: Unhandled event type, `%s`.',
      topLevelType
    ) : invariant(EventConstructor));
    var event = EventConstructor.getPooled(
      dispatchConfig,
      topLevelTargetID,
      nativeEvent
    );
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  }

};

module.exports = SimpleEventPlugin;

},{"./EventConstants":16,"./EventPluginUtils":20,"./EventPropagators":21,"./SyntheticClipboardEvent":84,"./SyntheticDragEvent":86,"./SyntheticEvent":87,"./SyntheticFocusEvent":88,"./SyntheticKeyboardEvent":90,"./SyntheticMouseEvent":91,"./SyntheticTouchEvent":92,"./SyntheticUIEvent":93,"./SyntheticWheelEvent":94,"./getEventCharCode":114,"./invariant":126,"./keyOf":133,"./warning":145}],84:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function(event) {
    return (
      'clipboardData' in event ?
        event.clipboardData :
        window.clipboardData
    );
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;


},{"./SyntheticEvent":87}],85:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticCompositionEvent,
  CompositionEventInterface
);

module.exports = SyntheticCompositionEvent;


},{"./SyntheticEvent":87}],86:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

},{"./SyntheticMouseEvent":91}],87:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

"use strict";

var PooledClass = _dereq_("./PooledClass");

var assign = _dereq_("./Object.assign");
var emptyFunction = _dereq_("./emptyFunction");
var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: getEventTarget,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ?
    nativeEvent.defaultPrevented :
    nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    event.preventDefault ? event.preventDefault() : event.returnValue = false;
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function() {
    var event = this.nativeEvent;
    event.stopPropagation ? event.stopPropagation() : event.cancelBubble = true;
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function(Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

module.exports = SyntheticEvent;

},{"./Object.assign":27,"./PooledClass":28,"./emptyFunction":107,"./getEventTarget":117}],88:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

},{"./SyntheticUIEvent":93}],89:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(
  dispatchConfig,
  dispatchMarker,
  nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(
  SyntheticInputEvent,
  InputEventInterface
);

module.exports = SyntheticInputEvent;


},{"./SyntheticEvent":87}],90:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventCharCode = _dereq_("./getEventCharCode");
var getEventKey = _dereq_("./getEventKey");
var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function(event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function(event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function(event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

},{"./SyntheticUIEvent":93,"./getEventCharCode":114,"./getEventKey":115,"./getEventModifierState":116}],91:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");
var ViewportMetrics = _dereq_("./ViewportMetrics");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function(event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function(event) {
    return event.relatedTarget || (
      event.fromElement === event.srcElement ?
        event.toElement :
        event.fromElement
    );
  },
  // "Proprietary" Interface.
  pageX: function(event) {
    return 'pageX' in event ?
      event.pageX :
      event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function(event) {
    return 'pageY' in event ?
      event.pageY :
      event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

},{"./SyntheticUIEvent":93,"./ViewportMetrics":96,"./getEventModifierState":116}],92:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticUIEvent = _dereq_("./SyntheticUIEvent");

var getEventModifierState = _dereq_("./getEventModifierState");

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

},{"./SyntheticUIEvent":93,"./getEventModifierState":116}],93:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticEvent = _dereq_("./SyntheticEvent");

var getEventTarget = _dereq_("./getEventTarget");

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function(event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function(event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

},{"./SyntheticEvent":87,"./getEventTarget":117}],94:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

"use strict";

var SyntheticMouseEvent = _dereq_("./SyntheticMouseEvent");

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function(event) {
    return (
      'deltaX' in event ? event.deltaX :
      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
    );
  },
  deltaY: function(event) {
    return (
      'deltaY' in event ? event.deltaY :
      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
      'wheelDeltaY' in event ? -event.wheelDeltaY :
      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
      'wheelDelta' in event ? -event.wheelDelta : 0
    );
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

},{"./SyntheticMouseEvent":91}],95:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM upates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (!this.wrapperInitData) {
      this.wrapperInitData = [];
    } else {
      this.wrapperInitData.length = 0;
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function() {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} args... Arguments to pass to the method (optional).
   *                           Helps prevent need to bind in many cases.
   * @return Return value from `method`.
   */
  perform: function(method, scope, a, b, c, d, e, f) {
    ("production" !== "development" ? invariant(
      !this.isInTransaction(),
      'Transaction.perform(...): Cannot initialize a transaction when there ' +
      'is already an outstanding transaction.'
    ) : invariant(!this.isInTransaction()));
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {
          }
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ?
          wrapper.initialize.call(this) :
          null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {
          }
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function(startIndex) {
    ("production" !== "development" ? invariant(
      this.isInTransaction(),
      'Transaction.closeAll(): Cannot close transaction when none are open.'
    ) : invariant(this.isInTransaction()));
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR) {
          wrapper.close && wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {
          }
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occured.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;

},{"./invariant":126}],96:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

"use strict";

var getUnboundedScrollPosition = _dereq_("./getUnboundedScrollPosition");

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function() {
    var scrollPosition = getUnboundedScrollPosition(window);
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

},{"./getUnboundedScrollPosition":122}],97:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  ("production" !== "development" ? invariant(
    next != null,
    'accumulateInto(...): Accumulated items must not be null or undefined.'
  ) : invariant(next != null));
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;

},{"./invariant":126}],98:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

/* jslint bitwise:true */

"use strict";

var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i < data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b << 16);
}

module.exports = adler32;

},{}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function(_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

},{}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

"use strict";

var camelize = _dereq_("./camelize");

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

},{"./camelize":99}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

var isTextNode = _dereq_("./isTextNode");

/*jslint bitwise:true */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if (outerNode.contains) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

},{"./isTextNode":130}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFrom
 * @typechecks
 */

var toArray = _dereq_("./toArray");

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj &&
    // arrays are objects, NodeLists are functions in Safari
    (typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    ('length' in obj) &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    (typeof obj.nodeType != 'number') &&
    (
      // a real array
      (// HTMLCollection/NodeList
      (Array.isArray(obj) ||
      // arguments
      ('callee' in obj) || 'item' in obj))
    )
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFrom = require('createArrayFrom');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFrom(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFrom(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFrom;

},{"./toArray":143}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createFullPageComponent
 * @typechecks
 */

"use strict";

// Defeat circular references by requiring this directly.
var ReactCompositeComponent = _dereq_("./ReactCompositeComponent");
var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Create a component that will throw an exception when unmounted.
 *
 * Components like <html> <head> and <body> can't be removed or added
 * easily in a cross-browser way, however it's valuable to be able to
 * take advantage of React's reconciliation for styling and <title>
 * management. So we just document it and throw in dangerous cases.
 *
 * @param {string} tag The tag to wrap
 * @return {function} convenience constructor of new component
 */
function createFullPageComponent(tag) {
  var elementFactory = ReactElement.createFactory(tag);

  var FullPageComponent = ReactCompositeComponent.createClass({
    displayName: 'ReactFullPageComponent' + tag,

    componentWillUnmount: function() {
      ("production" !== "development" ? invariant(
        false,
        '%s tried to unmount. Because of cross-browser quirks it is ' +
        'impossible to unmount some top-level components (eg <html>, <head>, ' +
        'and <body>) reliably and efficiently. To fix this, have a single ' +
        'top-level component that never unmounts render these elements.',
        this.constructor.displayName
      ) : invariant(false));
    },

    render: function() {
      return elementFactory(this.props);
    }
  });

  return FullPageComponent;
}

module.exports = createFullPageComponent;

},{"./ReactCompositeComponent":34,"./ReactElement":52,"./invariant":126}],104:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*jslint evil: true, sub: true */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var createArrayFrom = _dereq_("./createArrayFrom");
var getMarkupWrap = _dereq_("./getMarkupWrap");
var invariant = _dereq_("./invariant");

/**
 * Dummy container used to render all markup.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  ("production" !== "development" ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    ("production" !== "development" ? invariant(
      handleScript,
      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
    ) : invariant(handleScript));
    createArrayFrom(scripts).forEach(handleScript);
  }

  var nodes = createArrayFrom(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;

},{"./ExecutionEnvironment":22,"./createArrayFrom":102,"./getMarkupWrap":118,"./invariant":126}],105:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

"use strict";

var CSSProperty = _dereq_("./CSSProperty");

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 ||
      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;

},{"./CSSProperty":4}],106:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

var assign = _dereq_("./Object.assign");
var warning = _dereq_("./warning");

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} namespace The namespace of the call, eg 'React'
 * @param {string} oldName The old function name, eg 'renderComponent'
 * @param {string} newName The new function name, eg 'render'
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {*} Will be the value as returned from `fn`
 */
function deprecated(namespace, oldName, newName, ctx, fn) {
  var warned = false;
  if ("production" !== "development") {
    var newFn = function() {
      ("production" !== "development" ? warning(
        warned,
        (namespace + "." + oldName + " will be deprecated in a future version. ") +
        ("Use " + namespace + "." + newName + " instead.")
      ) : null);
      warned = true;
      return fn.apply(ctx, arguments);
    };
    newFn.displayName = (namespace + "_" + oldName);
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;

},{"./Object.assign":27,"./warning":145}],107:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

function makeEmptyFunction(arg) {
  return function() {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function() { return this; };
emptyFunction.thatReturnsArgument = function(arg) { return arg; };

module.exports = emptyFunction;

},{}],108:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

"use strict";

var emptyObject = {};

if ("production" !== "development") {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;

},{}],109:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextForBrowser
 * @typechecks static-only
 */

"use strict";

var ESCAPE_LOOKUP = {
  "&": "&amp;",
  ">": "&gt;",
  "<": "&lt;",
  "\"": "&quot;",
  "'": "&#x27;"
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextForBrowser;

},{}],110:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

"use strict";

var ReactTextComponent = _dereq_("./ReactTextComponent");

var traverseAllChildren = _dereq_("./traverseAllChildren");
var warning = _dereq_("./warning");

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = !result.hasOwnProperty(name);
  ("production" !== "development" ? warning(
    keyUnique,
    'flattenChildren(...): Encountered two children with the same key, ' +
    '`%s`. Child keys must be unique; when two children share a key, only ' +
    'the first child will be used.',
    name
  ) : null);
  if (keyUnique && child != null) {
    var type = typeof child;
    var normalizedValue;

    if (type === 'string') {
      normalizedValue = ReactTextComponent(child);
    } else if (type === 'number') {
      normalizedValue = ReactTextComponent('' + child);
    } else {
      normalizedValue = child;
    }

    result[name] = normalizedValue;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;

},{"./ReactTextComponent":78,"./traverseAllChildren":144,"./warning":145}],111:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

"use strict";

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch(e) {
  }
}

module.exports = focusNode;

},{}],112:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

"use strict";

/**
 * @param {array} an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;

},{}],113:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document body is not yet defined.
 */
function getActiveElement() /*?DOMElement*/ {
  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;

},{}],114:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

"use strict";

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

},{}],115:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

"use strict";

var getEventCharCode = _dereq_("./getEventCharCode");

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

},{"./getEventCharCode":114}],116:[function(_dereq_,module,exports){
/**
 * Copyright 2013 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

"use strict";

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  /*jshint validthis:true */
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

},{}],117:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

"use strict";

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

},{}],118:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var invariant = _dereq_("./invariant");

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode =
  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */
var shouldWrap = {
  // Force wrapping for SVG elements because if they get created inside a <div>,
  // they will be initialized in the wrong namespace (and will not display).
  'circle': true,
  'defs': true,
  'ellipse': true,
  'g': true,
  'line': true,
  'linearGradient': true,
  'path': true,
  'polygon': true,
  'polyline': true,
  'radialGradient': true,
  'rect': true,
  'stop': true,
  'text': true
};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg>', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap,

  'circle': svgWrap,
  'defs': svgWrap,
  'ellipse': svgWrap,
  'g': svgWrap,
  'line': svgWrap,
  'linearGradient': svgWrap,
  'path': svgWrap,
  'polygon': svgWrap,
  'polyline': svgWrap,
  'radialGradient': svgWrap,
  'rect': svgWrap,
  'stop': svgWrap,
  'text': svgWrap
};

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  ("production" !== "development" ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}


module.exports = getMarkupWrap;

},{"./ExecutionEnvironment":22,"./invariant":126}],119:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

"use strict";

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType == 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

},{}],120:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getReactRootElementInContainer
 */

"use strict";

var DOC_NODE_TYPE = 9;

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 *                                           a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

module.exports = getReactRootElementInContainer;

},{}],121:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ?
      'textContent' :
      'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

},{"./ExecutionEnvironment":22}],122:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

"use strict";

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

},{}],123:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

},{}],124:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

"use strict";

var hyphenate = _dereq_("./hyphenate");

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{"./hyphenate":123}],125:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

"use strict";

var warning = _dereq_("./warning");

var ReactElement = _dereq_("./ReactElement");
var ReactLegacyElement = _dereq_("./ReactLegacyElement");
var ReactNativeComponent = _dereq_("./ReactNativeComponent");
var ReactEmptyComponent = _dereq_("./ReactEmptyComponent");

/**
 * Given an `element` create an instance that will actually be mounted.
 *
 * @param {object} element
 * @param {*} parentCompositeType The composite type that resolved this.
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(element, parentCompositeType) {
  var instance;

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      element && (typeof element.type === 'function' ||
                     typeof element.type === 'string'),
      'Only functions or strings can be mounted as React components.'
    ) : null);

    // Resolve mock instances
    if (element.type._mockedReactClassConstructor) {
      // If this is a mocked class, we treat the legacy factory as if it was the
      // class constructor for future proofing unit tests. Because this might
      // be mocked as a legacy factory, we ignore any warnings triggerd by
      // this temporary hack.
      ReactLegacyElement._isLegacyCallWarningEnabled = false;
      try {
        instance = new element.type._mockedReactClassConstructor(
          element.props
        );
      } finally {
        ReactLegacyElement._isLegacyCallWarningEnabled = true;
      }

      // If the mock implementation was a legacy factory, then it returns a
      // element. We need to turn this into a real component instance.
      if (ReactElement.isValidElement(instance)) {
        instance = new instance.type(instance.props);
      }

      var render = instance.render;
      if (!render) {
        // For auto-mocked factories, the prototype isn't shimmed and therefore
        // there is no render function on the instance. We replace the whole
        // component with an empty component instance instead.
        element = ReactEmptyComponent.getEmptyComponent();
      } else {
        if (render._isMockFunction && !render._getMockImplementation()) {
          // Auto-mocked components may have a prototype with a mocked render
          // function. For those, we'll need to mock the result of the render
          // since we consider undefined to be invalid results from render.
          render.mockImplementation(
            ReactEmptyComponent.getEmptyComponent
          );
        }
        instance.construct(element);
        return instance;
      }
    }
  }

  // Special case string values
  if (typeof element.type === 'string') {
    instance = ReactNativeComponent.createInstanceForTag(
      element.type,
      element.props,
      parentCompositeType
    );
  } else {
    // Normal case for non-mocks and non-strings
    instance = new element.type(element.props);
  }

  if ("production" !== "development") {
    ("production" !== "development" ? warning(
      typeof instance.construct === 'function' &&
      typeof instance.mountComponent === 'function' &&
      typeof instance.receiveComponent === 'function',
      'Only React Components can be mounted.'
    ) : null);
  }

  // This actually sets up the internal instance. This will become decoupled
  // from the public instance in a future diff.
  instance.construct(element);

  return instance;
}

module.exports = instantiateReactComponent;

},{"./ReactElement":52,"./ReactEmptyComponent":54,"./ReactLegacyElement":61,"./ReactNativeComponent":66,"./warning":145}],126:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

"use strict";

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if ("production" !== "development") {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        'Invariant Violation: ' +
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

},{}],127:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature =
    document.implementation &&
    document.implementation.hasFeature &&
    // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM ||
      capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

},{"./ExecutionEnvironment":22}],128:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  return !!(object && (
    typeof Node === 'function' ? object instanceof Node :
      typeof object === 'object' &&
      typeof object.nodeType === 'number' &&
      typeof object.nodeName === 'string'
  ));
}

module.exports = isNode;

},{}],129:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

"use strict";

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  return elem && (
    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type]) ||
    elem.nodeName === 'TEXTAREA'
  );
}

module.exports = isTextInputElement;

},{}],130:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

var isNode = _dereq_("./isNode");

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

},{"./isNode":128}],131:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule joinClasses
 * @typechecks static-only
 */

"use strict";

/**
 * Combines multiple className strings into one.
 * http://jsperf.com/joinclasses-args-vs-array
 *
 * @param {...?string} classes
 * @return {string}
 */
function joinClasses(className/*, ... */) {
  if (!className) {
    className = '';
  }
  var nextClass;
  var argLength = arguments.length;
  if (argLength > 1) {
    for (var ii = 1; ii < argLength; ii++) {
      nextClass = arguments[ii];
      if (nextClass) {
        className = (className ? className + ' ' : '') + nextClass;
      }
    }
  }
  return className;
}

module.exports = joinClasses;

},{}],132:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function(obj) {
  var ret = {};
  var key;
  ("production" !== "development" ? invariant(
    obj instanceof Object && !Array.isArray(obj),
    'keyMirror(...): Argument must be an object.'
  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;

},{"./invariant":126}],133:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without loosing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
var keyOf = function(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};


module.exports = keyOf;

},{}],134:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;

},{}],135:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

"use strict";

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function(string) {
    if (cache.hasOwnProperty(string)) {
      return cache[string];
    } else {
      return cache[string] = callback.call(this, string);
    }
  };
}

module.exports = memoizeStringOnly;

},{}],136:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule monitorCodeUse
 */

"use strict";

var invariant = _dereq_("./invariant");

/**
 * Provides open-source compatible instrumentation for monitoring certain API
 * uses before we're ready to issue a warning or refactor. It accepts an event
 * name which may only contain the characters [a-z0-9_] and an optional data
 * object with further information.
 */

function monitorCodeUse(eventName, data) {
  ("production" !== "development" ? invariant(
    eventName && !/[^a-z0-9_]/.test(eventName),
    'You must provide an eventName using only the characters [a-z0-9_]'
  ) : invariant(eventName && !/[^a-z0-9_]/.test(eventName)));
}

module.exports = monitorCodeUse;

},{"./invariant":126}],137:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
"use strict";

var ReactElement = _dereq_("./ReactElement");

var invariant = _dereq_("./invariant");

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  ("production" !== "development" ? invariant(
    ReactElement.isValidElement(children),
    'onlyChild must be passed a children with exactly one child.'
  ) : invariant(ReactElement.isValidElement(children)));
  return children;
}

module.exports = onlyChild;

},{"./ReactElement":52,"./invariant":126}],138:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance =
    window.performance ||
    window.msPerformance ||
    window.webkitPerformance;
}

module.exports = performance || {};

},{"./ExecutionEnvironment":22}],139:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

var performance = _dereq_("./performance");

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!performance || !performance.now) {
  performance = Date;
}

var performanceNow = performance.now.bind(performance);

module.exports = performanceNow;

},{"./performance":138}],140:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

"use strict";

var ExecutionEnvironment = _dereq_("./ExecutionEnvironment");

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function(node, html) {
  node.innerHTML = html;
};

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function(node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) ||
          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        node.innerHTML = '\uFEFF' + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;

},{"./ExecutionEnvironment":22}],141:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 */

"use strict";

/**
 * Performs equality by iterating through keys on an object and returning
 * false when any key has values which are not strictly equal between
 * objA and objB. Returns true when the values of all keys are strictly equal.
 *
 * @return {boolean}
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }
  var key;
  // Test for A's keys different from B.
  for (key in objA) {
    if (objA.hasOwnProperty(key) &&
        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
      return false;
    }
  }
  // Test for B's keys missing from A.
  for (key in objB) {
    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
      return false;
    }
  }
  return true;
}

module.exports = shallowEqual;

},{}],142:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

"use strict";

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  if (prevElement && nextElement &&
      prevElement.type === nextElement.type &&
      prevElement.key === nextElement.key &&
      prevElement._owner === nextElement._owner) {
    return true;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;

},{}],143:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

var invariant = _dereq_("./invariant");

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFrom.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  ("production" !== "development" ? invariant(
    !Array.isArray(obj) &&
    (typeof obj === 'object' || typeof obj === 'function'),
    'toArray: Array-like object expected'
  ) : invariant(!Array.isArray(obj) &&
  (typeof obj === 'object' || typeof obj === 'function')));

  ("production" !== "development" ? invariant(
    typeof length === 'number',
    'toArray: Object needs a length property'
  ) : invariant(typeof length === 'number'));

  ("production" !== "development" ? invariant(
    length === 0 ||
    (length - 1) in obj,
    'toArray: Object should have keys for indices'
  ) : invariant(length === 0 ||
  (length - 1) in obj));

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;

},{"./invariant":126}],144:[function(_dereq_,module,exports){
/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

"use strict";

var ReactElement = _dereq_("./ReactElement");
var ReactInstanceHandles = _dereq_("./ReactInstanceHandles");

var invariant = _dereq_("./invariant");

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that:
 * 1. `mapChildren` transforms strings and numbers into `ReactTextComponent`.
 * 2. it('should fail when supplied duplicate key', function() {
 * 3. That a single child and an array with one item have the same key pattern.
 * });
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} key Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(
    userProvidedKeyEscapeRegex,
    userProvidedKeyEscaper
  );
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!number} indexSoFar Number of children encountered until this point.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
var traverseAllChildrenImpl =
  function(children, nameSoFar, indexSoFar, callback, traverseContext) {
    var nextName, nextIndex;
    var subtreeCount = 0;  // Count of children found in the current subtree.
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var child = children[i];
        nextName = (
          nameSoFar +
          (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
          getComponentKey(child, i)
        );
        nextIndex = indexSoFar + subtreeCount;
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          nextIndex,
          callback,
          traverseContext
        );
      }
    } else {
      var type = typeof children;
      var isOnlyChild = nameSoFar === '';
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows
      var storageName =
        isOnlyChild ? SEPARATOR + getComponentKey(children, 0) : nameSoFar;
      if (children == null || type === 'boolean') {
        // All of the above are perceived as null.
        callback(traverseContext, null, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'string' || type === 'number' ||
                 ReactElement.isValidElement(children)) {
        callback(traverseContext, children, storageName, indexSoFar);
        subtreeCount = 1;
      } else if (type === 'object') {
        ("production" !== "development" ? invariant(
          !children || children.nodeType !== 1,
          'traverseAllChildren(...): Encountered an invalid child; DOM ' +
          'elements are not valid children of React components.'
        ) : invariant(!children || children.nodeType !== 1));
        for (var key in children) {
          if (children.hasOwnProperty(key)) {
            nextName = (
              nameSoFar + (nameSoFar ? SUBSEPARATOR : SEPARATOR) +
              wrapUserProvidedKey(key) + SUBSEPARATOR +
              getComponentKey(children[key], 0)
            );
            nextIndex = indexSoFar + subtreeCount;
            subtreeCount += traverseAllChildrenImpl(
              children[key],
              nextName,
              nextIndex,
              callback,
              traverseContext
            );
          }
        }
      }
    }
    return subtreeCount;
  };

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
}

module.exports = traverseAllChildren;

},{"./ReactElement":52,"./ReactInstanceHandles":60,"./invariant":126}],145:[function(_dereq_,module,exports){
/**
 * Copyright 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

"use strict";

var emptyFunction = _dereq_("./emptyFunction");

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("production" !== "development") {
  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (!condition) {
      var argIndex = 0;
      console.warn('Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];}));
    }
  };
}

module.exports = warning;

},{"./emptyFunction":107}]},{},[1])(1)
});
var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!body && !docEl) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.devicePixelRatio_;
goog.dom.getPixelRatio = goog.functions.cacheReturnValue(function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
});
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2913";
cljs.core._STAR_unchecked_if_STAR_ = false;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__94200__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__94199 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__94199) : cljs.core.into_array.call(null, G__94199);
      }());
    };
    var G__94200 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__94201__i = 0, G__94201__a = new Array(arguments.length - 0);
        while (G__94201__i < G__94201__a.length) {
          G__94201__a[G__94201__i] = arguments[G__94201__i + 0];
          ++G__94201__i;
        }
        args = new cljs.core.IndexedSeq(G__94201__a, 0);
      }
      return G__94200__delegate.call(this, args);
    };
    G__94200.cljs$lang$maxFixedArity = 0;
    G__94200.cljs$lang$applyTo = function(arglist__94202) {
      var args = cljs.core.seq(arglist__94202);
      return G__94200__delegate(args);
    };
    G__94200.cljs$core$IFn$_invoke$arity$variadic = G__94200__delegate;
    return G__94200;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  var G__94204 = x;
  return goog.isString(G__94204);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__94206 = x__$1;
    return goog.typeOf(G__94206);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3969__auto__ = ty;
    if (cljs.core.truth_(and__3969__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3969__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__94208 = obj;
    return goog.typeOf(G__94208);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.importScript_(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__94210 = Symbol;
  return goog.typeOf(G__94210);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.cljs$core$IFn$_invoke$arity$1(size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4868__auto___94212 = len;
  var i_94213 = 0;
  while (true) {
    if (i_94213 < n__4868__auto___94212) {
      new_arr[i_94213] = arr[i_94213];
      var G__94214 = i_94213 + 1;
      i_94213 = G__94214;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__94215 = i + 1;
      i = G__94215;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__94224__delegate = function(array, i, idxs) {
      var G__94221 = aget;
      var G__94222 = aget.cljs$core$IFn$_invoke$arity$2(array, i);
      var G__94223 = idxs;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__94221, G__94222, G__94223) : cljs.core.apply.call(null, G__94221, G__94222, G__94223);
    };
    var G__94224 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        var G__94225__i = 0, G__94225__a = new Array(arguments.length - 2);
        while (G__94225__i < G__94225__a.length) {
          G__94225__a[G__94225__i] = arguments[G__94225__i + 2];
          ++G__94225__i;
        }
        idxs = new cljs.core.IndexedSeq(G__94225__a, 0);
      }
      return G__94224__delegate.call(this, array, i, idxs);
    };
    G__94224.cljs$lang$maxFixedArity = 2;
    G__94224.cljs$lang$applyTo = function(arglist__94226) {
      var array = cljs.core.first(arglist__94226);
      arglist__94226 = cljs.core.next(arglist__94226);
      var i = cljs.core.first(arglist__94226);
      var idxs = cljs.core.rest(arglist__94226);
      return G__94224__delegate(array, i, idxs);
    };
    G__94224.cljs$core$IFn$_invoke$arity$variadic = G__94224__delegate;
    return G__94224;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        var G__94227 = null;
        if (arguments.length > 2) {
          var G__94228__i = 0, G__94228__a = new Array(arguments.length - 2);
          while (G__94228__i < G__94228__a.length) {
            G__94228__a[G__94228__i] = arguments[G__94228__i + 2];
            ++G__94228__i;
          }
          G__94227 = new cljs.core.IndexedSeq(G__94228__a, 0);
        }
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, G__94227);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__94237__delegate = function(array, idx, idx2, idxv) {
      var G__94233 = aset;
      var G__94234 = array[idx];
      var G__94235 = idx2;
      var G__94236 = idxv;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__94233, G__94234, G__94235, G__94236) : cljs.core.apply.call(null, G__94233, G__94234, G__94235, G__94236);
    };
    var G__94237 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        var G__94238__i = 0, G__94238__a = new Array(arguments.length - 3);
        while (G__94238__i < G__94238__a.length) {
          G__94238__a[G__94238__i] = arguments[G__94238__i + 3];
          ++G__94238__i;
        }
        idxv = new cljs.core.IndexedSeq(G__94238__a, 0);
      }
      return G__94237__delegate.call(this, array, idx, idx2, idxv);
    };
    G__94237.cljs$lang$maxFixedArity = 3;
    G__94237.cljs$lang$applyTo = function(arglist__94239) {
      var array = cljs.core.first(arglist__94239);
      arglist__94239 = cljs.core.next(arglist__94239);
      var idx = cljs.core.first(arglist__94239);
      arglist__94239 = cljs.core.next(arglist__94239);
      var idx2 = cljs.core.first(arglist__94239);
      var idxv = cljs.core.rest(arglist__94239);
      return G__94237__delegate(array, idx, idx2, idxv);
    };
    G__94237.cljs$core$IFn$_invoke$arity$variadic = G__94237__delegate;
    return G__94237;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        var G__94240 = null;
        if (arguments.length > 3) {
          var G__94241__i = 0, G__94241__a = new Array(arguments.length - 3);
          while (G__94241__i < G__94241__a.length) {
            G__94241__a[G__94241__i] = arguments[G__94241__i + 3];
            ++G__94241__i;
          }
          G__94240 = new cljs.core.IndexedSeq(G__94241__a, 0);
        }
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, G__94240);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    var G__94247 = function(a, x) {
      a.push(x);
      return a;
    };
    var G__94248 = [];
    var G__94249 = aseq;
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__94247, G__94248, G__94249) : cljs.core.reduce.call(null, G__94247, G__94248, G__94249);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.js_invoke = function() {
  var js_invoke__delegate = function(obj, s, args) {
    return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
  };
  var js_invoke = function(obj, s, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__94250__i = 0, G__94250__a = new Array(arguments.length - 2);
      while (G__94250__i < G__94250__a.length) {
        G__94250__a[G__94250__i] = arguments[G__94250__i + 2];
        ++G__94250__i;
      }
      args = new cljs.core.IndexedSeq(G__94250__a, 0);
    }
    return js_invoke__delegate.call(this, obj, s, args);
  };
  js_invoke.cljs$lang$maxFixedArity = 2;
  js_invoke.cljs$lang$applyTo = function(arglist__94251) {
    var obj = cljs.core.first(arglist__94251);
    arglist__94251 = cljs.core.next(arglist__94251);
    var s = cljs.core.first(arglist__94251);
    var args = cljs.core.rest(arglist__94251);
    return js_invoke__delegate(obj, s, args);
  };
  js_invoke.cljs$core$IFn$_invoke$arity$variadic = js_invoke__delegate;
  return js_invoke;
}();
cljs.core.Fn = function() {
  var obj94253 = {};
  return obj94253;
}();
cljs.core.IFn = function() {
  var obj94255 = {};
  return obj94255;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94301 = x__4625__auto__;
          return goog.typeOf(G__94301);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94303 = x__4625__auto__;
          return goog.typeOf(G__94303);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94305 = x__4625__auto__;
          return goog.typeOf(G__94305);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94307 = x__4625__auto__;
          return goog.typeOf(G__94307);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94309 = x__4625__auto__;
          return goog.typeOf(G__94309);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94311 = x__4625__auto__;
          return goog.typeOf(G__94311);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94313 = x__4625__auto__;
          return goog.typeOf(G__94313);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94315 = x__4625__auto__;
          return goog.typeOf(G__94315);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94317 = x__4625__auto__;
          return goog.typeOf(G__94317);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94319 = x__4625__auto__;
          return goog.typeOf(G__94319);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94321 = x__4625__auto__;
          return goog.typeOf(G__94321);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94323 = x__4625__auto__;
          return goog.typeOf(G__94323);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94325 = x__4625__auto__;
          return goog.typeOf(G__94325);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94327 = x__4625__auto__;
          return goog.typeOf(G__94327);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94329 = x__4625__auto__;
          return goog.typeOf(G__94329);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94331 = x__4625__auto__;
          return goog.typeOf(G__94331);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94333 = x__4625__auto__;
          return goog.typeOf(G__94333);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94335 = x__4625__auto__;
          return goog.typeOf(G__94335);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94337 = x__4625__auto__;
          return goog.typeOf(G__94337);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94339 = x__4625__auto__;
          return goog.typeOf(G__94339);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94341 = x__4625__auto__;
          return goog.typeOf(G__94341);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = cljs.core._invoke[function() {
          var G__94343 = x__4625__auto__;
          return goog.typeOf(G__94343);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._invoke["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj94345 = {};
  return obj94345;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3969__auto__ = value;
    if (and__3969__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4625__auto__ = value == null ? null : value;
    return function() {
      var or__3981__auto__ = cljs.core._clone[function() {
        var G__94349 = x__4625__auto__;
        return goog.typeOf(G__94349);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._clone["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj94351 = {};
  return obj94351;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._count[function() {
        var G__94355 = x__4625__auto__;
        return goog.typeOf(G__94355);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._count["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj94357 = {};
  return obj94357;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._empty[function() {
        var G__94361 = x__4625__auto__;
        return goog.typeOf(G__94361);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._empty["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj94363 = {};
  return obj94363;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._conj[function() {
        var G__94367 = x__4625__auto__;
        return goog.typeOf(G__94367);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._conj["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj94369 = {};
  return obj94369;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3969__auto__ = coll;
      if (and__3969__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4625__auto__ = coll == null ? null : coll;
      return function() {
        var or__3981__auto__ = cljs.core._nth[function() {
          var G__94375 = x__4625__auto__;
          return goog.typeOf(G__94375);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._nth["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3969__auto__ = coll;
      if (and__3969__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4625__auto__ = coll == null ? null : coll;
      return function() {
        var or__3981__auto__ = cljs.core._nth[function() {
          var G__94377 = x__4625__auto__;
          return goog.typeOf(G__94377);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._nth["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj94379 = {};
  return obj94379;
}();
cljs.core.ISeq = function() {
  var obj94381 = {};
  return obj94381;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._first[function() {
        var G__94385 = x__4625__auto__;
        return goog.typeOf(G__94385);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._first["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._rest[function() {
        var G__94389 = x__4625__auto__;
        return goog.typeOf(G__94389);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._rest["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj94391 = {};
  return obj94391;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._next[function() {
        var G__94395 = x__4625__auto__;
        return goog.typeOf(G__94395);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._next["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj94397 = {};
  return obj94397;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._lookup[function() {
          var G__94403 = x__4625__auto__;
          return goog.typeOf(G__94403);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._lookup["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._lookup[function() {
          var G__94405 = x__4625__auto__;
          return goog.typeOf(G__94405);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._lookup["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj94407 = {};
  return obj94407;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__94411 = x__4625__auto__;
        return goog.typeOf(G__94411);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._assoc[function() {
        var G__94415 = x__4625__auto__;
        return goog.typeOf(G__94415);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._assoc["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj94417 = {};
  return obj94417;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._dissoc[function() {
        var G__94421 = x__4625__auto__;
        return goog.typeOf(G__94421);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._dissoc["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj94423 = {};
  return obj94423;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._key[function() {
        var G__94427 = x__4625__auto__;
        return goog.typeOf(G__94427);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._key["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._val[function() {
        var G__94431 = x__4625__auto__;
        return goog.typeOf(G__94431);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._val["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj94433 = {};
  return obj94433;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._disjoin[function() {
        var G__94437 = x__4625__auto__;
        return goog.typeOf(G__94437);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._disjoin["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj94439 = {};
  return obj94439;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._peek[function() {
        var G__94443 = x__4625__auto__;
        return goog.typeOf(G__94443);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._peek["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._pop[function() {
        var G__94447 = x__4625__auto__;
        return goog.typeOf(G__94447);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._pop["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj94449 = {};
  return obj94449;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._assoc_n[function() {
        var G__94453 = x__4625__auto__;
        return goog.typeOf(G__94453);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj94455 = {};
  return obj94455;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._deref[function() {
        var G__94459 = x__4625__auto__;
        return goog.typeOf(G__94459);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._deref["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj94461 = {};
  return obj94461;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._deref_with_timeout[function() {
        var G__94465 = x__4625__auto__;
        return goog.typeOf(G__94465);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj94467 = {};
  return obj94467;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._meta[function() {
        var G__94471 = x__4625__auto__;
        return goog.typeOf(G__94471);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._meta["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj94473 = {};
  return obj94473;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._with_meta[function() {
        var G__94477 = x__4625__auto__;
        return goog.typeOf(G__94477);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._with_meta["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj94479 = {};
  return obj94479;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3969__auto__ = coll;
      if (and__3969__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4625__auto__ = coll == null ? null : coll;
      return function() {
        var or__3981__auto__ = cljs.core._reduce[function() {
          var G__94485 = x__4625__auto__;
          return goog.typeOf(G__94485);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._reduce["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3969__auto__ = coll;
      if (and__3969__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4625__auto__ = coll == null ? null : coll;
      return function() {
        var or__3981__auto__ = cljs.core._reduce[function() {
          var G__94487 = x__4625__auto__;
          return goog.typeOf(G__94487);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._reduce["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj94489 = {};
  return obj94489;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._kv_reduce[function() {
        var G__94493 = x__4625__auto__;
        return goog.typeOf(G__94493);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj94495 = {};
  return obj94495;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._equiv[function() {
        var G__94499 = x__4625__auto__;
        return goog.typeOf(G__94499);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._equiv["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj94501 = {};
  return obj94501;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._hash[function() {
        var G__94505 = x__4625__auto__;
        return goog.typeOf(G__94505);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._hash["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj94507 = {};
  return obj94507;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._seq[function() {
        var G__94511 = x__4625__auto__;
        return goog.typeOf(G__94511);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._seq["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj94513 = {};
  return obj94513;
}();
cljs.core.IList = function() {
  var obj94515 = {};
  return obj94515;
}();
cljs.core.IRecord = function() {
  var obj94517 = {};
  return obj94517;
}();
cljs.core.IReversible = function() {
  var obj94519 = {};
  return obj94519;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._rseq[function() {
        var G__94523 = x__4625__auto__;
        return goog.typeOf(G__94523);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._rseq["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj94525 = {};
  return obj94525;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._sorted_seq[function() {
        var G__94529 = x__4625__auto__;
        return goog.typeOf(G__94529);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._sorted_seq_from[function() {
        var G__94533 = x__4625__auto__;
        return goog.typeOf(G__94533);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._entry_key[function() {
        var G__94537 = x__4625__auto__;
        return goog.typeOf(G__94537);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._entry_key["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._comparator[function() {
        var G__94541 = x__4625__auto__;
        return goog.typeOf(G__94541);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._comparator["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj94543 = {};
  return obj94543;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3969__auto__ = writer;
    if (and__3969__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4625__auto__ = writer == null ? null : writer;
    return function() {
      var or__3981__auto__ = cljs.core._write[function() {
        var G__94547 = x__4625__auto__;
        return goog.typeOf(G__94547);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._write["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3969__auto__ = writer;
    if (and__3969__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4625__auto__ = writer == null ? null : writer;
    return function() {
      var or__3981__auto__ = cljs.core._flush[function() {
        var G__94551 = x__4625__auto__;
        return goog.typeOf(G__94551);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._flush["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj94553 = {};
  return obj94553;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._pr_writer[function() {
        var G__94557 = x__4625__auto__;
        return goog.typeOf(G__94557);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj94559 = {};
  return obj94559;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3969__auto__ = d;
    if (and__3969__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4625__auto__ = d == null ? null : d;
    return function() {
      var or__3981__auto__ = cljs.core._realized_QMARK_[function() {
        var G__94563 = x__4625__auto__;
        return goog.typeOf(G__94563);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj94565 = {};
  return obj94565;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = cljs.core._notify_watches[function() {
        var G__94569 = x__4625__auto__;
        return goog.typeOf(G__94569);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = cljs.core._add_watch[function() {
        var G__94573 = x__4625__auto__;
        return goog.typeOf(G__94573);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._add_watch["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = cljs.core._remove_watch[function() {
        var G__94577 = x__4625__auto__;
        return goog.typeOf(G__94577);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj94579 = {};
  return obj94579;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._as_transient[function() {
        var G__94583 = x__4625__auto__;
        return goog.typeOf(G__94583);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._as_transient["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj94585 = {};
  return obj94585;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._conj_BANG_[function() {
        var G__94589 = x__4625__auto__;
        return goog.typeOf(G__94589);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._persistent_BANG_[function() {
        var G__94593 = x__4625__auto__;
        return goog.typeOf(G__94593);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj94595 = {};
  return obj94595;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._assoc_BANG_[function() {
        var G__94599 = x__4625__auto__;
        return goog.typeOf(G__94599);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj94601 = {};
  return obj94601;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__94605 = x__4625__auto__;
        return goog.typeOf(G__94605);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj94607 = {};
  return obj94607;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__94611 = x__4625__auto__;
        return goog.typeOf(G__94611);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._pop_BANG_[function() {
        var G__94615 = x__4625__auto__;
        return goog.typeOf(G__94615);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj94617 = {};
  return obj94617;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3969__auto__ = tcoll;
    if (and__3969__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4625__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3981__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__94621 = x__4625__auto__;
        return goog.typeOf(G__94621);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj94623 = {};
  return obj94623;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._compare[function() {
        var G__94627 = x__4625__auto__;
        return goog.typeOf(G__94627);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._compare["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj94629 = {};
  return obj94629;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._drop_first[function() {
        var G__94633 = x__4625__auto__;
        return goog.typeOf(G__94633);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._drop_first["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj94635 = {};
  return obj94635;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._chunked_first[function() {
        var G__94639 = x__4625__auto__;
        return goog.typeOf(G__94639);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._chunked_rest[function() {
        var G__94643 = x__4625__auto__;
        return goog.typeOf(G__94643);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj94645 = {};
  return obj94645;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._chunked_next[function() {
        var G__94649 = x__4625__auto__;
        return goog.typeOf(G__94649);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj94651 = {};
  return obj94651;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._name[function() {
        var G__94655 = x__4625__auto__;
        return goog.typeOf(G__94655);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._name["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._namespace[function() {
        var G__94659 = x__4625__auto__;
        return goog.typeOf(G__94659);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._namespace["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj94661 = {};
  return obj94661;
}();
cljs.core.IReset = function() {
  var obj94663 = {};
  return obj94663;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._reset_BANG_[function() {
        var G__94667 = x__4625__auto__;
        return goog.typeOf(G__94667);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj94669 = {};
  return obj94669;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._swap_BANG_[function() {
          var G__94679 = x__4625__auto__;
          return goog.typeOf(G__94679);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._swap_BANG_[function() {
          var G__94681 = x__4625__auto__;
          return goog.typeOf(G__94681);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._swap_BANG_[function() {
          var G__94683 = x__4625__auto__;
          return goog.typeOf(G__94683);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3969__auto__ = o;
      if (and__3969__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4625__auto__ = o == null ? null : o;
      return function() {
        var or__3981__auto__ = cljs.core._swap_BANG_[function() {
          var G__94685 = x__4625__auto__;
          return goog.typeOf(G__94685);
        }()];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol("ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IVolatile = function() {
  var obj94687 = {};
  return obj94687;
}();
cljs.core._vreset_BANG_ = function _vreset_BANG_(o, new_value) {
  if (function() {
    var and__3969__auto__ = o;
    if (and__3969__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4625__auto__ = o == null ? null : o;
    return function() {
      var or__3981__auto__ = cljs.core._vreset_BANG_[function() {
        var G__94691 = x__4625__auto__;
        return goog.typeOf(G__94691);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj94693 = {};
  return obj94693;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3969__auto__ = coll;
    if (and__3969__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4625__auto__ = coll == null ? null : coll;
    return function() {
      var or__3981__auto__ = cljs.core._iterator[function() {
        var G__94697 = x__4625__auto__;
        return goog.typeOf(G__94697);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._iterator["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return[cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__94700 = 4294967295;
  var G__94701 = 5;
  return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__94700, G__94701) : Math.imul.call(null, G__94700, G__94701);
}() === 0)) {
  cljs.core.imul = function imul(a, b) {
    var G__94704 = a;
    var G__94705 = b;
    return Math.imul.cljs$core$IFn$_invoke$arity$2 ? Math.imul.cljs$core$IFn$_invoke$arity$2(G__94704, G__94705) : Math.imul.call(null, G__94704, G__94705);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__94706 = i + 2;
        var G__94707 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__94706;
        h1 = G__94707;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj94709 = {};
  return obj94709;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__94710 = i + 1;
          var G__94711 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__94710;
          hash = G__94711;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj94715 = {};
      return obj94715;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__94718 = o;
    if (G__94718) {
      var bit__4655__auto__ = G__94718.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4655__auto__ || G__94718.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__94719 = o;
        return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__94719) : Math.floor.call(null, G__94719);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = cljs.core.not(a.ns);
      if (and__3969__auto__) {
        return b.ns;
      } else {
        return and__3969__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__94726 = a.ns;
            var G__94727 = b.ns;
            return goog.array.defaultCompare(G__94726, G__94727);
          }();
          if (0 === nsc) {
            var G__94728 = a.name;
            var G__94729 = b.name;
            return goog.array.defaultCompare(G__94728, G__94729);
          } else {
            return nsc;
          }
        }
      } else {
        var G__94730 = a.name;
        var G__94731 = b.name;
        return goog.array.defaultCompare(G__94730, G__94731);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4402__auto__ = self__._hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__94733 = null;
  var G__94733__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__94733__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__94733 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__94733__2.call(this, self__, coll);
      case 3:
        return G__94733__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__94733.cljs$core$IFn$_invoke$arity$2 = G__94733__2;
  G__94733.cljs$core$IFn$_invoke$arity$3 = G__94733__3;
  return G__94733;
}();
cljs.core.Symbol.prototype.apply = function(self__, args94732) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args94732)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
};
cljs.core.Var.prototype.call = function() {
  var G__94781 = null;
  var G__94781__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__94781__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__94781__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__94781__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__94781__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__94781__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__94781__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__94781__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__94781__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__94781__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__94781__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__94781__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__94781__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__94781__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__94781__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__94781__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__94781__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__94781__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__94781__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__94781__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__94781__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__94781__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__94737 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__94738 = a;
    var G__94739 = b;
    var G__94740 = c;
    var G__94741 = d;
    var G__94742 = e;
    var G__94743 = f;
    var G__94744 = g;
    var G__94745 = h;
    var G__94746 = i;
    var G__94747 = j;
    var G__94748 = k;
    var G__94749 = l;
    var G__94750 = m;
    var G__94751 = n;
    var G__94752 = o;
    var G__94753 = p;
    var G__94754 = q;
    var G__94755 = r;
    var G__94756 = s;
    var G__94757 = t;
    var G__94758 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__94737, G__94738, G__94739, G__94740, G__94741, G__94742, G__94743, G__94744, G__94745, G__94746, G__94747, G__94748, G__94749, G__94750, G__94751, G__94752, G__94753, G__94754, G__94755, G__94756, G__94757, G__94758) : cljs.core.apply.call(null, G__94737, G__94738, G__94739, G__94740, G__94741, G__94742, G__94743, G__94744, G__94745, G__94746, G__94747, G__94748, G__94749, G__94750, G__94751, 
    G__94752, G__94753, G__94754, G__94755, G__94756, G__94757, G__94758);
  };
  G__94781 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__94781__1.call(this, self__);
      case 2:
        return G__94781__2.call(this, self__, a);
      case 3:
        return G__94781__3.call(this, self__, a, b);
      case 4:
        return G__94781__4.call(this, self__, a, b, c);
      case 5:
        return G__94781__5.call(this, self__, a, b, c, d);
      case 6:
        return G__94781__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__94781__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__94781__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__94781__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__94781__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__94781__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__94781__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__94781__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__94781__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__94781__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__94781__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__94781__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__94781__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__94781__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__94781__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__94781__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__94781__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__94781.cljs$core$IFn$_invoke$arity$1 = G__94781__1;
  G__94781.cljs$core$IFn$_invoke$arity$2 = G__94781__2;
  G__94781.cljs$core$IFn$_invoke$arity$3 = G__94781__3;
  G__94781.cljs$core$IFn$_invoke$arity$4 = G__94781__4;
  G__94781.cljs$core$IFn$_invoke$arity$5 = G__94781__5;
  G__94781.cljs$core$IFn$_invoke$arity$6 = G__94781__6;
  G__94781.cljs$core$IFn$_invoke$arity$7 = G__94781__7;
  G__94781.cljs$core$IFn$_invoke$arity$8 = G__94781__8;
  G__94781.cljs$core$IFn$_invoke$arity$9 = G__94781__9;
  G__94781.cljs$core$IFn$_invoke$arity$10 = G__94781__10;
  G__94781.cljs$core$IFn$_invoke$arity$11 = G__94781__11;
  G__94781.cljs$core$IFn$_invoke$arity$12 = G__94781__12;
  G__94781.cljs$core$IFn$_invoke$arity$13 = G__94781__13;
  G__94781.cljs$core$IFn$_invoke$arity$14 = G__94781__14;
  G__94781.cljs$core$IFn$_invoke$arity$15 = G__94781__15;
  G__94781.cljs$core$IFn$_invoke$arity$16 = G__94781__16;
  G__94781.cljs$core$IFn$_invoke$arity$17 = G__94781__17;
  G__94781.cljs$core$IFn$_invoke$arity$18 = G__94781__18;
  G__94781.cljs$core$IFn$_invoke$arity$19 = G__94781__19;
  G__94781.cljs$core$IFn$_invoke$arity$20 = G__94781__20;
  G__94781.cljs$core$IFn$_invoke$arity$21 = G__94781__21;
  G__94781.cljs$core$IFn$_invoke$arity$22 = G__94781__22;
  return G__94781;
}();
cljs.core.Var.prototype.apply = function(self__, args94736) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args94736)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__94759 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__94760 = a;
  var G__94761 = b;
  var G__94762 = c;
  var G__94763 = d;
  var G__94764 = e;
  var G__94765 = f;
  var G__94766 = g;
  var G__94767 = h;
  var G__94768 = i;
  var G__94769 = j;
  var G__94770 = k;
  var G__94771 = l;
  var G__94772 = m;
  var G__94773 = n;
  var G__94774 = o;
  var G__94775 = p;
  var G__94776 = q;
  var G__94777 = r;
  var G__94778 = s;
  var G__94779 = t;
  var G__94780 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__94759, G__94760, G__94761, G__94762, G__94763, G__94764, G__94765, G__94766, G__94767, G__94768, G__94769, G__94770, G__94771, G__94772, G__94773, G__94774, G__94775, G__94776, G__94777, G__94778, G__94779, G__94780) : cljs.core.apply.call(null, G__94759, G__94760, G__94761, G__94762, G__94763, G__94764, G__94765, G__94766, G__94767, G__94768, G__94769, G__94770, G__94771, G__94772, G__94773, 
  G__94774, G__94775, G__94776, G__94777, G__94778, G__94779, G__94780);
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function __GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__94783 = x;
  if (G__94783) {
    var bit__4662__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3981__auto__ = bit__4662__auto__;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return G__94783.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__94783.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__94783);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__94783);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__94785 = value;
  if (G__94785) {
    var bit__4662__auto__ = G__94785.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4662__auto__ || G__94785.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__94785.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__94785);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__94785);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__94787 = coll;
      if (G__94787) {
        var bit__4655__auto__ = G__94787.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4655__auto__ || G__94787.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__94789 = coll;
      if (G__94789) {
        var bit__4655__auto__ = G__94789.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4655__auto__ || G__94789.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__94791 = coll;
      if (G__94791) {
        var bit__4655__auto__ = G__94791.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4655__auto__ || G__94791.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__94793 = coll;
      if (G__94793) {
        var bit__4655__auto__ = G__94793.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4655__auto__ || G__94793.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv(x, y);
    }
  };
  var _EQ___3 = function() {
    var G__94798__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__94799 = y;
            var G__94800 = cljs.core.first(more);
            var G__94801 = cljs.core.next(more);
            x = G__94799;
            y = G__94800;
            more = G__94801;
            continue;
          } else {
            return _EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__94798 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__94802__i = 0, G__94802__a = new Array(arguments.length - 2);
        while (G__94802__i < G__94802__a.length) {
          G__94802__a[G__94802__i] = arguments[G__94802__i + 2];
          ++G__94802__i;
        }
        more = new cljs.core.IndexedSeq(G__94802__a, 0);
      }
      return G__94798__delegate.call(this, x, y, more);
    };
    G__94798.cljs$lang$maxFixedArity = 2;
    G__94798.cljs$lang$applyTo = function(arglist__94803) {
      var x = cljs.core.first(arglist__94803);
      arglist__94803 = cljs.core.next(arglist__94803);
      var y = cljs.core.first(arglist__94803);
      var more = cljs.core.rest(arglist__94803);
      return G__94798__delegate(x, y, more);
    };
    G__94798.cljs$core$IFn$_invoke$arity$variadic = G__94798__delegate;
    return G__94798;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        var G__94804 = null;
        if (arguments.length > 2) {
          var G__94805__i = 0, G__94805__a = new Array(arguments.length - 2);
          while (G__94805__i < G__94805__a.length) {
            G__94805__a[G__94805__i] = arguments[G__94805__i + 2];
            ++G__94805__i;
          }
          G__94804 = new cljs.core.IndexedSeq(G__94805__a, 0);
        }
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__94804);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__94806 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__94806) : cljs.core.es6_iterator_seq.call(null, G__94806);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function __GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__94807 = n + 1;
      var G__94808 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__94809 = cljs.core.next(coll__$1);
      n = G__94807;
      hash_code = G__94808;
      coll__$1 = G__94809;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__94810 = n + 1;
      var G__94811 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__94812 = cljs.core.next(coll__$1);
      n = G__94810;
      hash_code = G__94811;
      coll__$1 = G__94812;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__94813 = o;
  return goog.getUid(G__94813);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__94815 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__94815) : cljs.core.deref.call(null, G__94815);
  } else {
    return x;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count(cicoll);
    if (cnt === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__94822 = val;
            var G__94823 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__94822, G__94823) : f.call(null, G__94822, G__94823);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__94828 = nval;
            var G__94829 = n + 1;
            val = G__94828;
            n = G__94829;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__94824 = val__$1;
          var G__94825 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__94824, G__94825) : f.call(null, G__94824, G__94825);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__94830 = nval;
          var G__94831 = n + 1;
          val__$1 = G__94830;
          n = G__94831;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count(cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__94826 = val__$1;
          var G__94827 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__94826, G__94827) : f.call(null, G__94826, G__94827);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__94832 = nval;
          var G__94833 = n + 1;
          val__$1 = G__94832;
          n = G__94833;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = function() {
            var G__94840 = val;
            var G__94841 = arr[n];
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__94840, G__94841) : f.call(null, G__94840, G__94841);
          }();
          if (cljs.core.reduced_QMARK_(nval)) {
            return cljs.core.deref(nval);
          } else {
            var G__94846 = nval;
            var G__94847 = n + 1;
            val = G__94846;
            n = G__94847;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__94842 = val__$1;
          var G__94843 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__94842, G__94843) : f.call(null, G__94842, G__94843);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__94848 = nval;
          var G__94849 = n + 1;
          val__$1 = G__94848;
          n = G__94849;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__94844 = val__$1;
          var G__94845 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__94844, G__94845) : f.call(null, G__94844, G__94845);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__94850 = nval;
          var G__94851 = n + 1;
          val__$1 = G__94850;
          n = G__94851;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__94853 = x;
  if (G__94853) {
    var bit__4662__auto__ = G__94853.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4662__auto__ || G__94853.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__94853.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__94853);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__94853);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__94855 = x;
  if (G__94855) {
    var bit__4662__auto__ = G__94855.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4662__auto__ || G__94855.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__94855.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__94855);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__94855);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__94856 = coll__$1;
  var G__94857 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__94856, G__94857) : cljs.core.equiv_sequential.call(null, G__94856, G__94857);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__94858 = o;
  var G__94859 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__94858, G__94859) : cljs.core.cons.call(null, G__94858, G__94859);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__94862 = coll__$1;
  var G__94863 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__94862, G__94863) : cljs.core.equiv_sequential.call(null, G__94862, G__94863);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__94864 = cljs.core.List.EMPTY;
  var G__94865 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__94864, G__94865) : cljs.core.with_meta.call(null, G__94864, G__94865);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__94866 = f;
  var G__94867 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__94866, G__94867) : cljs.core.seq_reduce.call(null, G__94866, G__94867);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__94868 = f;
  var G__94869 = start;
  var G__94870 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__94868, G__94869, G__94870) : cljs.core.seq_reduce.call(null, G__94868, G__94869, G__94870);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__94871 = o;
  var G__94872 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__94871, G__94872) : cljs.core.cons.call(null, G__94871, G__94872);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.second = function second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__94873 = sn;
      s = G__94873;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj(coll, x);
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__94878__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__94879 = conj.cljs$core$IFn$_invoke$arity$2(coll, x);
          var G__94880 = cljs.core.first(xs);
          var G__94881 = cljs.core.next(xs);
          coll = G__94879;
          x = G__94880;
          xs = G__94881;
          continue;
        } else {
          return conj.cljs$core$IFn$_invoke$arity$2(coll, x);
        }
        break;
      }
    };
    var G__94878 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        var G__94882__i = 0, G__94882__a = new Array(arguments.length - 2);
        while (G__94882__i < G__94882__a.length) {
          G__94882__a[G__94882__i] = arguments[G__94882__i + 2];
          ++G__94882__i;
        }
        xs = new cljs.core.IndexedSeq(G__94882__a, 0);
      }
      return G__94878__delegate.call(this, coll, x, xs);
    };
    G__94878.cljs$lang$maxFixedArity = 2;
    G__94878.cljs$lang$applyTo = function(arglist__94883) {
      var coll = cljs.core.first(arglist__94883);
      arglist__94883 = cljs.core.next(arglist__94883);
      var x = cljs.core.first(arglist__94883);
      var xs = cljs.core.rest(arglist__94883);
      return G__94878__delegate(coll, x, xs);
    };
    G__94878.cljs$core$IFn$_invoke$arity$variadic = G__94878__delegate;
    return G__94878;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        var G__94884 = null;
        if (arguments.length > 2) {
          var G__94885__i = 0, G__94885__a = new Array(arguments.length - 2);
          while (G__94885__i < G__94885__a.length) {
            G__94885__a[G__94885__i] = arguments[G__94885__i + 2];
            ++G__94885__i;
          }
          G__94884 = new cljs.core.IndexedSeq(G__94885__a, 0);
        }
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, G__94884);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__94886 = cljs.core.next(s);
      var G__94887 = acc + 1;
      s = G__94886;
      acc = G__94887;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__94889 = coll;
      if (G__94889) {
        var bit__4655__auto__ = G__94889.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4655__auto__ || G__94889.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
          } else {
            if (cljs.core.seq(coll)) {
              var G__94890 = cljs.core.next(coll);
              var G__94891 = n - 1;
              coll = G__94890;
              n = G__94891;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq(coll)) {
            return cljs.core.first(coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_(coll)) {
            return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
          } else {
            if (cljs.core.seq(coll)) {
              var G__94892 = cljs.core.next(coll);
              var G__94893 = n - 1;
              var G__94894 = not_found;
              coll = G__94892;
              n = G__94893;
              not_found = G__94894;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__94899 = coll;
          if (G__94899) {
            var bit__4655__auto__ = G__94899.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4655__auto__ || G__94899.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__94900 = coll;
                  if (G__94900) {
                    var bit__4662__auto__ = G__94900.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4662__auto__ || G__94900.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__94900.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__94900);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__94900);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__94901 = coll;
          if (G__94901) {
            var bit__4655__auto__ = G__94901.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4655__auto__ || G__94901.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                if (function() {
                  var G__94902 = coll;
                  if (G__94902) {
                    var bit__4662__auto__ = G__94902.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4662__auto__ || G__94902.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__94902.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__94902);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__94902);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.nthrest = function nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__94903 = n__$1 - 1;
      var G__94904 = cljs.core.rest(xs);
      n__$1 = G__94903;
      xs = G__94904;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__94907 = o;
        if (G__94907) {
          var bit__4655__auto__ = G__94907.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4655__auto__ || G__94907.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$2(null, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__94908 = o;
        if (G__94908) {
          var bit__4655__auto__ = G__94908.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4655__auto__ || G__94908.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
              return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc(coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__94912__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__94913 = ret;
          var G__94914 = cljs.core.first(kvs);
          var G__94915 = cljs.core.second(kvs);
          var G__94916 = cljs.core.nnext(kvs);
          coll = G__94913;
          k = G__94914;
          v = G__94915;
          kvs = G__94916;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__94912 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__94917__i = 0, G__94917__a = new Array(arguments.length - 3);
        while (G__94917__i < G__94917__a.length) {
          G__94917__a[G__94917__i] = arguments[G__94917__i + 3];
          ++G__94917__i;
        }
        kvs = new cljs.core.IndexedSeq(G__94917__a, 0);
      }
      return G__94912__delegate.call(this, coll, k, v, kvs);
    };
    G__94912.cljs$lang$maxFixedArity = 3;
    G__94912.cljs$lang$applyTo = function(arglist__94918) {
      var coll = cljs.core.first(arglist__94918);
      arglist__94918 = cljs.core.next(arglist__94918);
      var k = cljs.core.first(arglist__94918);
      arglist__94918 = cljs.core.next(arglist__94918);
      var v = cljs.core.first(arglist__94918);
      var kvs = cljs.core.rest(arglist__94918);
      return G__94912__delegate(coll, k, v, kvs);
    };
    G__94912.cljs$core$IFn$_invoke$arity$variadic = G__94912__delegate;
    return G__94912;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        var G__94919 = null;
        if (arguments.length > 3) {
          var G__94920__i = 0, G__94920__a = new Array(arguments.length - 3);
          while (G__94920__i < G__94920__a.length) {
            G__94920__a[G__94920__i] = arguments[G__94920__i + 3];
            ++G__94920__i;
          }
          G__94919 = new cljs.core.IndexedSeq(G__94920__a, 0);
        }
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, G__94919);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc(coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__94923__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__94924 = ret;
            var G__94925 = cljs.core.first(ks);
            var G__94926 = cljs.core.next(ks);
            coll = G__94924;
            k = G__94925;
            ks = G__94926;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__94923 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__94927__i = 0, G__94927__a = new Array(arguments.length - 2);
        while (G__94927__i < G__94927__a.length) {
          G__94927__a[G__94927__i] = arguments[G__94927__i + 2];
          ++G__94927__i;
        }
        ks = new cljs.core.IndexedSeq(G__94927__a, 0);
      }
      return G__94923__delegate.call(this, coll, k, ks);
    };
    G__94923.cljs$lang$maxFixedArity = 2;
    G__94923.cljs$lang$applyTo = function(arglist__94928) {
      var coll = cljs.core.first(arglist__94928);
      arglist__94928 = cljs.core.next(arglist__94928);
      var k = cljs.core.first(arglist__94928);
      var ks = cljs.core.rest(arglist__94928);
      return G__94923__delegate(coll, k, ks);
    };
    G__94923.cljs$core$IFn$_invoke$arity$variadic = G__94923__delegate;
    return G__94923;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        var G__94929 = null;
        if (arguments.length > 2) {
          var G__94930__i = 0, G__94930__a = new Array(arguments.length - 2);
          while (G__94930__i < G__94930__a.length) {
            G__94930__a[G__94930__i] = arguments[G__94930__i + 2];
            ++G__94930__i;
          }
          G__94929 = new cljs.core.IndexedSeq(G__94930__a, 0);
        }
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__94929);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3981__auto__ = function() {
    var G__94935 = f;
    return goog.isFunction(G__94935);
  }();
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    var G__94936 = f;
    if (G__94936) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto____$1 = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto____$1)) {
          return or__3981__auto____$1;
        } else {
          return G__94936.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__94936.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__94936);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__94936);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.prototype.call = function() {
  var G__95402 = null;
  var G__95402__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__95402__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__94938 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__94938) : self__.afn.call(null, G__94938);
  };
  var G__95402__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__94939 = a;
    var G__94940 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__94939, G__94940) : self__.afn.call(null, G__94939, G__94940);
  };
  var G__95402__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__94941 = a;
    var G__94942 = b;
    var G__94943 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__94941, G__94942, G__94943) : self__.afn.call(null, G__94941, G__94942, G__94943);
  };
  var G__95402__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__94944 = a;
    var G__94945 = b;
    var G__94946 = c;
    var G__94947 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__94944, G__94945, G__94946, G__94947) : self__.afn.call(null, G__94944, G__94945, G__94946, G__94947);
  };
  var G__95402__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__94948 = a;
    var G__94949 = b;
    var G__94950 = c;
    var G__94951 = d;
    var G__94952 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__94948, G__94949, G__94950, G__94951, G__94952) : self__.afn.call(null, G__94948, G__94949, G__94950, G__94951, G__94952);
  };
  var G__95402__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__94953 = a;
    var G__94954 = b;
    var G__94955 = c;
    var G__94956 = d;
    var G__94957 = e;
    var G__94958 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__94953, G__94954, G__94955, G__94956, G__94957, G__94958) : self__.afn.call(null, G__94953, G__94954, G__94955, G__94956, G__94957, G__94958);
  };
  var G__95402__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__94959 = a;
    var G__94960 = b;
    var G__94961 = c;
    var G__94962 = d;
    var G__94963 = e;
    var G__94964 = f;
    var G__94965 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__94959, G__94960, G__94961, G__94962, G__94963, G__94964, G__94965) : self__.afn.call(null, G__94959, G__94960, G__94961, G__94962, G__94963, G__94964, G__94965);
  };
  var G__95402__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__94966 = a;
    var G__94967 = b;
    var G__94968 = c;
    var G__94969 = d;
    var G__94970 = e;
    var G__94971 = f;
    var G__94972 = g;
    var G__94973 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__94966, G__94967, G__94968, G__94969, G__94970, G__94971, G__94972, G__94973) : self__.afn.call(null, G__94966, G__94967, G__94968, G__94969, G__94970, G__94971, G__94972, G__94973);
  };
  var G__95402__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__94974 = a;
    var G__94975 = b;
    var G__94976 = c;
    var G__94977 = d;
    var G__94978 = e;
    var G__94979 = f;
    var G__94980 = g;
    var G__94981 = h;
    var G__94982 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__94974, G__94975, G__94976, G__94977, G__94978, G__94979, G__94980, G__94981, G__94982) : self__.afn.call(null, G__94974, G__94975, G__94976, G__94977, G__94978, G__94979, G__94980, G__94981, G__94982);
  };
  var G__95402__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__94983 = a;
    var G__94984 = b;
    var G__94985 = c;
    var G__94986 = d;
    var G__94987 = e;
    var G__94988 = f;
    var G__94989 = g;
    var G__94990 = h;
    var G__94991 = i;
    var G__94992 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__94983, G__94984, G__94985, G__94986, G__94987, G__94988, G__94989, G__94990, G__94991, G__94992) : self__.afn.call(null, G__94983, G__94984, G__94985, G__94986, G__94987, G__94988, G__94989, G__94990, G__94991, G__94992);
  };
  var G__95402__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__94993 = a;
    var G__94994 = b;
    var G__94995 = c;
    var G__94996 = d;
    var G__94997 = e;
    var G__94998 = f;
    var G__94999 = g;
    var G__95000 = h;
    var G__95001 = i;
    var G__95002 = j;
    var G__95003 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__94993, G__94994, G__94995, G__94996, G__94997, G__94998, G__94999, G__95000, G__95001, G__95002, G__95003) : self__.afn.call(null, G__94993, G__94994, G__94995, G__94996, G__94997, G__94998, G__94999, G__95000, G__95001, G__95002, G__95003);
  };
  var G__95402__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__95004 = a;
    var G__95005 = b;
    var G__95006 = c;
    var G__95007 = d;
    var G__95008 = e;
    var G__95009 = f;
    var G__95010 = g;
    var G__95011 = h;
    var G__95012 = i;
    var G__95013 = j;
    var G__95014 = k;
    var G__95015 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__95004, G__95005, G__95006, G__95007, G__95008, G__95009, G__95010, G__95011, G__95012, G__95013, G__95014, G__95015) : self__.afn.call(null, G__95004, G__95005, G__95006, G__95007, G__95008, G__95009, G__95010, G__95011, G__95012, G__95013, G__95014, G__95015);
  };
  var G__95402__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__95016 = a;
    var G__95017 = b;
    var G__95018 = c;
    var G__95019 = d;
    var G__95020 = e;
    var G__95021 = f;
    var G__95022 = g;
    var G__95023 = h;
    var G__95024 = i;
    var G__95025 = j;
    var G__95026 = k;
    var G__95027 = l;
    var G__95028 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__95016, G__95017, G__95018, G__95019, G__95020, G__95021, G__95022, G__95023, G__95024, G__95025, G__95026, G__95027, G__95028) : self__.afn.call(null, G__95016, G__95017, G__95018, G__95019, G__95020, G__95021, G__95022, G__95023, G__95024, G__95025, G__95026, G__95027, G__95028);
  };
  var G__95402__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__95029 = a;
    var G__95030 = b;
    var G__95031 = c;
    var G__95032 = d;
    var G__95033 = e;
    var G__95034 = f;
    var G__95035 = g;
    var G__95036 = h;
    var G__95037 = i;
    var G__95038 = j;
    var G__95039 = k;
    var G__95040 = l;
    var G__95041 = m;
    var G__95042 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__95029, G__95030, G__95031, G__95032, G__95033, G__95034, G__95035, G__95036, G__95037, G__95038, G__95039, G__95040, G__95041, G__95042) : self__.afn.call(null, G__95029, G__95030, G__95031, G__95032, G__95033, G__95034, G__95035, G__95036, G__95037, G__95038, G__95039, G__95040, G__95041, G__95042);
  };
  var G__95402__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__95043 = a;
    var G__95044 = b;
    var G__95045 = c;
    var G__95046 = d;
    var G__95047 = e;
    var G__95048 = f;
    var G__95049 = g;
    var G__95050 = h;
    var G__95051 = i;
    var G__95052 = j;
    var G__95053 = k;
    var G__95054 = l;
    var G__95055 = m;
    var G__95056 = n;
    var G__95057 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__95043, G__95044, G__95045, G__95046, G__95047, G__95048, G__95049, G__95050, G__95051, G__95052, G__95053, G__95054, G__95055, G__95056, G__95057) : self__.afn.call(null, G__95043, G__95044, G__95045, G__95046, G__95047, G__95048, G__95049, G__95050, G__95051, G__95052, G__95053, G__95054, G__95055, G__95056, G__95057);
  };
  var G__95402__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__95058 = a;
    var G__95059 = b;
    var G__95060 = c;
    var G__95061 = d;
    var G__95062 = e;
    var G__95063 = f;
    var G__95064 = g;
    var G__95065 = h;
    var G__95066 = i;
    var G__95067 = j;
    var G__95068 = k;
    var G__95069 = l;
    var G__95070 = m;
    var G__95071 = n;
    var G__95072 = o;
    var G__95073 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__95058, G__95059, G__95060, G__95061, G__95062, G__95063, G__95064, G__95065, G__95066, G__95067, G__95068, G__95069, G__95070, G__95071, G__95072, G__95073) : self__.afn.call(null, G__95058, G__95059, G__95060, G__95061, G__95062, G__95063, G__95064, G__95065, G__95066, G__95067, G__95068, G__95069, G__95070, G__95071, G__95072, G__95073);
  };
  var G__95402__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__95074 = a;
    var G__95075 = b;
    var G__95076 = c;
    var G__95077 = d;
    var G__95078 = e;
    var G__95079 = f;
    var G__95080 = g;
    var G__95081 = h;
    var G__95082 = i;
    var G__95083 = j;
    var G__95084 = k;
    var G__95085 = l;
    var G__95086 = m;
    var G__95087 = n;
    var G__95088 = o;
    var G__95089 = p;
    var G__95090 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__95074, G__95075, G__95076, G__95077, G__95078, G__95079, G__95080, G__95081, G__95082, G__95083, G__95084, G__95085, G__95086, G__95087, G__95088, G__95089, G__95090) : self__.afn.call(null, G__95074, G__95075, G__95076, G__95077, G__95078, G__95079, G__95080, G__95081, G__95082, G__95083, G__95084, G__95085, G__95086, G__95087, G__95088, G__95089, G__95090);
  };
  var G__95402__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__95091 = a;
    var G__95092 = b;
    var G__95093 = c;
    var G__95094 = d;
    var G__95095 = e;
    var G__95096 = f;
    var G__95097 = g;
    var G__95098 = h;
    var G__95099 = i;
    var G__95100 = j;
    var G__95101 = k;
    var G__95102 = l;
    var G__95103 = m;
    var G__95104 = n;
    var G__95105 = o;
    var G__95106 = p;
    var G__95107 = q;
    var G__95108 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__95091, G__95092, G__95093, G__95094, G__95095, G__95096, G__95097, G__95098, G__95099, G__95100, G__95101, G__95102, G__95103, G__95104, G__95105, G__95106, G__95107, G__95108) : self__.afn.call(null, G__95091, G__95092, G__95093, G__95094, G__95095, G__95096, G__95097, G__95098, G__95099, G__95100, G__95101, G__95102, G__95103, G__95104, G__95105, G__95106, G__95107, G__95108);
  };
  var G__95402__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__95109 = a;
    var G__95110 = b;
    var G__95111 = c;
    var G__95112 = d;
    var G__95113 = e;
    var G__95114 = f;
    var G__95115 = g;
    var G__95116 = h;
    var G__95117 = i;
    var G__95118 = j;
    var G__95119 = k;
    var G__95120 = l;
    var G__95121 = m;
    var G__95122 = n;
    var G__95123 = o;
    var G__95124 = p;
    var G__95125 = q;
    var G__95126 = r;
    var G__95127 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__95109, G__95110, G__95111, G__95112, G__95113, G__95114, G__95115, G__95116, G__95117, G__95118, G__95119, G__95120, G__95121, G__95122, G__95123, G__95124, G__95125, G__95126, G__95127) : self__.afn.call(null, G__95109, G__95110, G__95111, G__95112, G__95113, G__95114, G__95115, G__95116, G__95117, G__95118, G__95119, G__95120, G__95121, G__95122, G__95123, G__95124, G__95125, G__95126, G__95127);
  };
  var G__95402__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__95128 = a;
    var G__95129 = b;
    var G__95130 = c;
    var G__95131 = d;
    var G__95132 = e;
    var G__95133 = f;
    var G__95134 = g;
    var G__95135 = h;
    var G__95136 = i;
    var G__95137 = j;
    var G__95138 = k;
    var G__95139 = l;
    var G__95140 = m;
    var G__95141 = n;
    var G__95142 = o;
    var G__95143 = p;
    var G__95144 = q;
    var G__95145 = r;
    var G__95146 = s;
    var G__95147 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__95128, G__95129, G__95130, G__95131, G__95132, G__95133, G__95134, G__95135, G__95136, G__95137, G__95138, G__95139, G__95140, G__95141, G__95142, G__95143, G__95144, G__95145, G__95146, G__95147) : self__.afn.call(null, G__95128, G__95129, G__95130, G__95131, G__95132, G__95133, G__95134, G__95135, G__95136, G__95137, G__95138, G__95139, G__95140, G__95141, G__95142, G__95143, G__95144, G__95145, 
    G__95146, G__95147);
  };
  var G__95402__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__95148 = self__.afn;
    var G__95149 = a;
    var G__95150 = b;
    var G__95151 = c;
    var G__95152 = d;
    var G__95153 = e;
    var G__95154 = f;
    var G__95155 = g;
    var G__95156 = h;
    var G__95157 = i;
    var G__95158 = j;
    var G__95159 = k;
    var G__95160 = l;
    var G__95161 = m;
    var G__95162 = n;
    var G__95163 = o;
    var G__95164 = p;
    var G__95165 = q;
    var G__95166 = r;
    var G__95167 = s;
    var G__95168 = t;
    var G__95169 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__95148, G__95149, G__95150, G__95151, G__95152, G__95153, G__95154, G__95155, G__95156, G__95157, G__95158, G__95159, G__95160, G__95161, G__95162, G__95163, G__95164, G__95165, G__95166, G__95167, G__95168, G__95169) : cljs.core.apply.call(null, G__95148, G__95149, G__95150, G__95151, G__95152, G__95153, G__95154, G__95155, G__95156, G__95157, G__95158, G__95159, G__95160, G__95161, G__95162, 
    G__95163, G__95164, G__95165, G__95166, G__95167, G__95168, G__95169);
  };
  G__95402 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__95402__1.call(this, self__);
      case 2:
        return G__95402__2.call(this, self__, a);
      case 3:
        return G__95402__3.call(this, self__, a, b);
      case 4:
        return G__95402__4.call(this, self__, a, b, c);
      case 5:
        return G__95402__5.call(this, self__, a, b, c, d);
      case 6:
        return G__95402__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__95402__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__95402__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__95402__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__95402__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__95402__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__95402__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__95402__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__95402__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__95402__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__95402__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__95402__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__95402__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__95402__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__95402__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__95402__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__95402__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__95402.cljs$core$IFn$_invoke$arity$1 = G__95402__1;
  G__95402.cljs$core$IFn$_invoke$arity$2 = G__95402__2;
  G__95402.cljs$core$IFn$_invoke$arity$3 = G__95402__3;
  G__95402.cljs$core$IFn$_invoke$arity$4 = G__95402__4;
  G__95402.cljs$core$IFn$_invoke$arity$5 = G__95402__5;
  G__95402.cljs$core$IFn$_invoke$arity$6 = G__95402__6;
  G__95402.cljs$core$IFn$_invoke$arity$7 = G__95402__7;
  G__95402.cljs$core$IFn$_invoke$arity$8 = G__95402__8;
  G__95402.cljs$core$IFn$_invoke$arity$9 = G__95402__9;
  G__95402.cljs$core$IFn$_invoke$arity$10 = G__95402__10;
  G__95402.cljs$core$IFn$_invoke$arity$11 = G__95402__11;
  G__95402.cljs$core$IFn$_invoke$arity$12 = G__95402__12;
  G__95402.cljs$core$IFn$_invoke$arity$13 = G__95402__13;
  G__95402.cljs$core$IFn$_invoke$arity$14 = G__95402__14;
  G__95402.cljs$core$IFn$_invoke$arity$15 = G__95402__15;
  G__95402.cljs$core$IFn$_invoke$arity$16 = G__95402__16;
  G__95402.cljs$core$IFn$_invoke$arity$17 = G__95402__17;
  G__95402.cljs$core$IFn$_invoke$arity$18 = G__95402__18;
  G__95402.cljs$core$IFn$_invoke$arity$19 = G__95402__19;
  G__95402.cljs$core$IFn$_invoke$arity$20 = G__95402__20;
  G__95402.cljs$core$IFn$_invoke$arity$21 = G__95402__21;
  G__95402.cljs$core$IFn$_invoke$arity$22 = G__95402__22;
  return G__95402;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args94937) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args94937)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__95170 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__95170) : self__.afn.call(null, G__95170);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__95171 = a;
  var G__95172 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__95171, G__95172) : self__.afn.call(null, G__95171, G__95172);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__95173 = a;
  var G__95174 = b;
  var G__95175 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__95173, G__95174, G__95175) : self__.afn.call(null, G__95173, G__95174, G__95175);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__95176 = a;
  var G__95177 = b;
  var G__95178 = c;
  var G__95179 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__95176, G__95177, G__95178, G__95179) : self__.afn.call(null, G__95176, G__95177, G__95178, G__95179);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__95180 = a;
  var G__95181 = b;
  var G__95182 = c;
  var G__95183 = d;
  var G__95184 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__95180, G__95181, G__95182, G__95183, G__95184) : self__.afn.call(null, G__95180, G__95181, G__95182, G__95183, G__95184);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__95185 = a;
  var G__95186 = b;
  var G__95187 = c;
  var G__95188 = d;
  var G__95189 = e;
  var G__95190 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__95185, G__95186, G__95187, G__95188, G__95189, G__95190) : self__.afn.call(null, G__95185, G__95186, G__95187, G__95188, G__95189, G__95190);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__95191 = a;
  var G__95192 = b;
  var G__95193 = c;
  var G__95194 = d;
  var G__95195 = e;
  var G__95196 = f;
  var G__95197 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__95191, G__95192, G__95193, G__95194, G__95195, G__95196, G__95197) : self__.afn.call(null, G__95191, G__95192, G__95193, G__95194, G__95195, G__95196, G__95197);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__95198 = a;
  var G__95199 = b;
  var G__95200 = c;
  var G__95201 = d;
  var G__95202 = e;
  var G__95203 = f;
  var G__95204 = g;
  var G__95205 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__95198, G__95199, G__95200, G__95201, G__95202, G__95203, G__95204, G__95205) : self__.afn.call(null, G__95198, G__95199, G__95200, G__95201, G__95202, G__95203, G__95204, G__95205);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__95206 = a;
  var G__95207 = b;
  var G__95208 = c;
  var G__95209 = d;
  var G__95210 = e;
  var G__95211 = f;
  var G__95212 = g;
  var G__95213 = h;
  var G__95214 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__95206, G__95207, G__95208, G__95209, G__95210, G__95211, G__95212, G__95213, G__95214) : self__.afn.call(null, G__95206, G__95207, G__95208, G__95209, G__95210, G__95211, G__95212, G__95213, G__95214);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__95215 = a;
  var G__95216 = b;
  var G__95217 = c;
  var G__95218 = d;
  var G__95219 = e;
  var G__95220 = f;
  var G__95221 = g;
  var G__95222 = h;
  var G__95223 = i;
  var G__95224 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__95215, G__95216, G__95217, G__95218, G__95219, G__95220, G__95221, G__95222, G__95223, G__95224) : self__.afn.call(null, G__95215, G__95216, G__95217, G__95218, G__95219, G__95220, G__95221, G__95222, G__95223, G__95224);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__95225 = a;
  var G__95226 = b;
  var G__95227 = c;
  var G__95228 = d;
  var G__95229 = e;
  var G__95230 = f;
  var G__95231 = g;
  var G__95232 = h;
  var G__95233 = i;
  var G__95234 = j;
  var G__95235 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__95225, G__95226, G__95227, G__95228, G__95229, G__95230, G__95231, G__95232, G__95233, G__95234, G__95235) : self__.afn.call(null, G__95225, G__95226, G__95227, G__95228, G__95229, G__95230, G__95231, G__95232, G__95233, G__95234, G__95235);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__95236 = a;
  var G__95237 = b;
  var G__95238 = c;
  var G__95239 = d;
  var G__95240 = e;
  var G__95241 = f;
  var G__95242 = g;
  var G__95243 = h;
  var G__95244 = i;
  var G__95245 = j;
  var G__95246 = k;
  var G__95247 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__95236, G__95237, G__95238, G__95239, G__95240, G__95241, G__95242, G__95243, G__95244, G__95245, G__95246, G__95247) : self__.afn.call(null, G__95236, G__95237, G__95238, G__95239, G__95240, G__95241, G__95242, G__95243, G__95244, G__95245, G__95246, G__95247);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__95248 = a;
  var G__95249 = b;
  var G__95250 = c;
  var G__95251 = d;
  var G__95252 = e;
  var G__95253 = f;
  var G__95254 = g;
  var G__95255 = h;
  var G__95256 = i;
  var G__95257 = j;
  var G__95258 = k;
  var G__95259 = l;
  var G__95260 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__95248, G__95249, G__95250, G__95251, G__95252, G__95253, G__95254, G__95255, G__95256, G__95257, G__95258, G__95259, G__95260) : self__.afn.call(null, G__95248, G__95249, G__95250, G__95251, G__95252, G__95253, G__95254, G__95255, G__95256, G__95257, G__95258, G__95259, G__95260);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__95261 = a;
  var G__95262 = b;
  var G__95263 = c;
  var G__95264 = d;
  var G__95265 = e;
  var G__95266 = f;
  var G__95267 = g;
  var G__95268 = h;
  var G__95269 = i;
  var G__95270 = j;
  var G__95271 = k;
  var G__95272 = l;
  var G__95273 = m;
  var G__95274 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__95261, G__95262, G__95263, G__95264, G__95265, G__95266, G__95267, G__95268, G__95269, G__95270, G__95271, G__95272, G__95273, G__95274) : self__.afn.call(null, G__95261, G__95262, G__95263, G__95264, G__95265, G__95266, G__95267, G__95268, G__95269, G__95270, G__95271, G__95272, G__95273, G__95274);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__95275 = a;
  var G__95276 = b;
  var G__95277 = c;
  var G__95278 = d;
  var G__95279 = e;
  var G__95280 = f;
  var G__95281 = g;
  var G__95282 = h;
  var G__95283 = i;
  var G__95284 = j;
  var G__95285 = k;
  var G__95286 = l;
  var G__95287 = m;
  var G__95288 = n;
  var G__95289 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__95275, G__95276, G__95277, G__95278, G__95279, G__95280, G__95281, G__95282, G__95283, G__95284, G__95285, G__95286, G__95287, G__95288, G__95289) : self__.afn.call(null, G__95275, G__95276, G__95277, G__95278, G__95279, G__95280, G__95281, G__95282, G__95283, G__95284, G__95285, G__95286, G__95287, G__95288, G__95289);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__95290 = a;
  var G__95291 = b;
  var G__95292 = c;
  var G__95293 = d;
  var G__95294 = e;
  var G__95295 = f;
  var G__95296 = g;
  var G__95297 = h;
  var G__95298 = i;
  var G__95299 = j;
  var G__95300 = k;
  var G__95301 = l;
  var G__95302 = m;
  var G__95303 = n;
  var G__95304 = o;
  var G__95305 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__95290, G__95291, G__95292, G__95293, G__95294, G__95295, G__95296, G__95297, G__95298, G__95299, G__95300, G__95301, G__95302, G__95303, G__95304, G__95305) : self__.afn.call(null, G__95290, G__95291, G__95292, G__95293, G__95294, G__95295, G__95296, G__95297, G__95298, G__95299, G__95300, G__95301, G__95302, G__95303, G__95304, G__95305);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__95306 = a;
  var G__95307 = b;
  var G__95308 = c;
  var G__95309 = d;
  var G__95310 = e;
  var G__95311 = f;
  var G__95312 = g;
  var G__95313 = h;
  var G__95314 = i;
  var G__95315 = j;
  var G__95316 = k;
  var G__95317 = l;
  var G__95318 = m;
  var G__95319 = n;
  var G__95320 = o;
  var G__95321 = p;
  var G__95322 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__95306, G__95307, G__95308, G__95309, G__95310, G__95311, G__95312, G__95313, G__95314, G__95315, G__95316, G__95317, G__95318, G__95319, G__95320, G__95321, G__95322) : self__.afn.call(null, G__95306, G__95307, G__95308, G__95309, G__95310, G__95311, G__95312, G__95313, G__95314, G__95315, G__95316, G__95317, G__95318, G__95319, G__95320, G__95321, G__95322);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__95323 = a;
  var G__95324 = b;
  var G__95325 = c;
  var G__95326 = d;
  var G__95327 = e;
  var G__95328 = f;
  var G__95329 = g;
  var G__95330 = h;
  var G__95331 = i;
  var G__95332 = j;
  var G__95333 = k;
  var G__95334 = l;
  var G__95335 = m;
  var G__95336 = n;
  var G__95337 = o;
  var G__95338 = p;
  var G__95339 = q;
  var G__95340 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__95323, G__95324, G__95325, G__95326, G__95327, G__95328, G__95329, G__95330, G__95331, G__95332, G__95333, G__95334, G__95335, G__95336, G__95337, G__95338, G__95339, G__95340) : self__.afn.call(null, G__95323, G__95324, G__95325, G__95326, G__95327, G__95328, G__95329, G__95330, G__95331, G__95332, G__95333, G__95334, G__95335, G__95336, G__95337, G__95338, G__95339, G__95340);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__95341 = a;
  var G__95342 = b;
  var G__95343 = c;
  var G__95344 = d;
  var G__95345 = e;
  var G__95346 = f;
  var G__95347 = g;
  var G__95348 = h;
  var G__95349 = i;
  var G__95350 = j;
  var G__95351 = k;
  var G__95352 = l;
  var G__95353 = m;
  var G__95354 = n;
  var G__95355 = o;
  var G__95356 = p;
  var G__95357 = q;
  var G__95358 = r;
  var G__95359 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__95341, G__95342, G__95343, G__95344, G__95345, G__95346, G__95347, G__95348, G__95349, G__95350, G__95351, G__95352, G__95353, G__95354, G__95355, G__95356, G__95357, G__95358, G__95359) : self__.afn.call(null, G__95341, G__95342, G__95343, G__95344, G__95345, G__95346, G__95347, G__95348, G__95349, G__95350, G__95351, G__95352, G__95353, G__95354, G__95355, G__95356, G__95357, G__95358, G__95359);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__95360 = a;
  var G__95361 = b;
  var G__95362 = c;
  var G__95363 = d;
  var G__95364 = e;
  var G__95365 = f;
  var G__95366 = g;
  var G__95367 = h;
  var G__95368 = i;
  var G__95369 = j;
  var G__95370 = k;
  var G__95371 = l;
  var G__95372 = m;
  var G__95373 = n;
  var G__95374 = o;
  var G__95375 = p;
  var G__95376 = q;
  var G__95377 = r;
  var G__95378 = s;
  var G__95379 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__95360, G__95361, G__95362, G__95363, G__95364, G__95365, G__95366, G__95367, G__95368, G__95369, G__95370, G__95371, G__95372, G__95373, G__95374, G__95375, G__95376, G__95377, G__95378, G__95379) : self__.afn.call(null, G__95360, G__95361, G__95362, G__95363, G__95364, G__95365, G__95366, G__95367, G__95368, G__95369, G__95370, G__95371, G__95372, G__95373, G__95374, G__95375, G__95376, G__95377, G__95378, 
  G__95379);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__95380 = self__.afn;
  var G__95381 = a;
  var G__95382 = b;
  var G__95383 = c;
  var G__95384 = d;
  var G__95385 = e;
  var G__95386 = f;
  var G__95387 = g;
  var G__95388 = h;
  var G__95389 = i;
  var G__95390 = j;
  var G__95391 = k;
  var G__95392 = l;
  var G__95393 = m;
  var G__95394 = n;
  var G__95395 = o;
  var G__95396 = p;
  var G__95397 = q;
  var G__95398 = r;
  var G__95399 = s;
  var G__95400 = t;
  var G__95401 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__95380, G__95381, G__95382, G__95383, G__95384, G__95385, G__95386, G__95387, G__95388, G__95389, G__95390, G__95391, G__95392, G__95393, G__95394, G__95395, G__95396, G__95397, G__95398, G__95399, G__95400, G__95401) : cljs.core.apply.call(null, G__95380, G__95381, G__95382, G__95383, G__95384, G__95385, G__95386, G__95387, G__95388, G__95389, G__95390, G__95391, G__95392, G__95393, G__95394, 
  G__95395, G__95396, G__95397, G__95398, G__95399, G__95400, G__95401);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__95406 = o;
    if (G__95406) {
      var bit__4662__auto__ = G__95406.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4662__auto__ || G__95406.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__95406.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__95406);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__95406);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3969__auto__ = !(o == null);
    if (and__3969__auto__) {
      var G__95410 = o;
      if (G__95410) {
        var bit__4662__auto__ = G__95410.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4662__auto__ || G__95410.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__95410.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__95410);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__95410);
      }
    } else {
      return and__3969__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin(coll, k);
    }
  };
  var disj__3 = function() {
    var G__95413__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.cljs$core$IFn$_invoke$arity$2(coll, k);
          if (cljs.core.truth_(ks)) {
            var G__95414 = ret;
            var G__95415 = cljs.core.first(ks);
            var G__95416 = cljs.core.next(ks);
            coll = G__95414;
            k = G__95415;
            ks = G__95416;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__95413 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__95417__i = 0, G__95417__a = new Array(arguments.length - 2);
        while (G__95417__i < G__95417__a.length) {
          G__95417__a[G__95417__i] = arguments[G__95417__i + 2];
          ++G__95417__i;
        }
        ks = new cljs.core.IndexedSeq(G__95417__a, 0);
      }
      return G__95413__delegate.call(this, coll, k, ks);
    };
    G__95413.cljs$lang$maxFixedArity = 2;
    G__95413.cljs$lang$applyTo = function(arglist__95418) {
      var coll = cljs.core.first(arglist__95418);
      arglist__95418 = cljs.core.next(arglist__95418);
      var k = cljs.core.first(arglist__95418);
      var ks = cljs.core.rest(arglist__95418);
      return G__95413__delegate(coll, k, ks);
    };
    G__95413.cljs$core$IFn$_invoke$arity$variadic = G__95413__delegate;
    return G__95413;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        var G__95419 = null;
        if (arguments.length > 2) {
          var G__95420__i = 0, G__95420__a = new Array(arguments.length - 2);
          while (G__95420__i < G__95420__a.length) {
            G__95420__a[G__95420__i] = arguments[G__95420__i + 2];
            ++G__95420__i;
          }
          G__95419 = new cljs.core.IndexedSeq(G__95420__a, 0);
        }
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, G__95419);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__95422 = x;
    if (G__95422) {
      var bit__4662__auto__ = G__95422.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4662__auto__ || G__95422.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__95422.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__95422);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__95422);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__95424 = x;
    if (G__95424) {
      var bit__4662__auto__ = G__95424.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4662__auto__ || G__95424.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__95424.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__95424);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__95424);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__95426 = x;
  if (G__95426) {
    var bit__4662__auto__ = G__95426.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4662__auto__ || G__95426.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__95426.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__95426);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__95426);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__95428 = x;
  if (G__95428) {
    var bit__4662__auto__ = G__95428.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4662__auto__ || G__95428.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__95428.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__95428);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__95428);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__95430 = x;
  if (G__95430) {
    var bit__4662__auto__ = G__95430.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4662__auto__ || G__95430.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__95430.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__95430);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__95430);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__95432 = x;
  if (G__95432) {
    var bit__4662__auto__ = G__95432.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4662__auto__ || G__95432.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__95432.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__95432);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__95432);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__95434 = x;
    if (G__95434) {
      var bit__4662__auto__ = G__95434.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4662__auto__ || G__95434.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__95434.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__95434);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__95434);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__95436 = x;
  if (G__95436) {
    var bit__4662__auto__ = G__95436.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4662__auto__ || G__95436.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__95436.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__95436);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__95436);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__95438 = x;
  if (G__95438) {
    var bit__4655__auto__ = G__95438.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4655__auto__ || G__95438.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj95444 = {};
    return obj95444;
  };
  var js_obj__1 = function() {
    var G__95447__delegate = function(keyvals) {
      var G__95445 = goog.object.create;
      var G__95446 = keyvals;
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__95445, G__95446) : cljs.core.apply.call(null, G__95445, G__95446);
    };
    var G__95447 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        var G__95448__i = 0, G__95448__a = new Array(arguments.length - 0);
        while (G__95448__i < G__95448__a.length) {
          G__95448__a[G__95448__i] = arguments[G__95448__i + 0];
          ++G__95448__i;
        }
        keyvals = new cljs.core.IndexedSeq(G__95448__a, 0);
      }
      return G__95447__delegate.call(this, keyvals);
    };
    G__95447.cljs$lang$maxFixedArity = 0;
    G__95447.cljs$lang$applyTo = function(arglist__95449) {
      var keyvals = cljs.core.seq(arglist__95449);
      return G__95447__delegate(keyvals);
    };
    G__95447.cljs$core$IFn$_invoke$arity$variadic = G__95447__delegate;
    return G__95447;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        var G__95450 = null;
        if (arguments.length > 0) {
          var G__95451__i = 0, G__95451__a = new Array(arguments.length - 0);
          while (G__95451__i < G__95451__a.length) {
            G__95451__a[G__95451__i] = arguments[G__95451__i + 0];
            ++G__95451__i;
          }
          G__95450 = new cljs.core.IndexedSeq(G__95451__a, 0);
        }
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(G__95450);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  var G__95454_95456 = obj;
  var G__95455_95457 = function(G__95454_95456, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__95454_95456, keys);
  goog.object.forEach(G__95454_95456, G__95455_95457);
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__95458 = i__$1 + 1;
      var G__95459 = j__$1 + 1;
      var G__95460 = len__$1 - 1;
      i__$1 = G__95458;
      j__$1 = G__95459;
      len__$1 = G__95460;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__95461 = i__$1 - 1;
      var G__95462 = j__$1 - 1;
      var G__95463 = len__$1 - 1;
      i__$1 = G__95461;
      j__$1 = G__95462;
      len__$1 = G__95463;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj95465 = {};
  return obj95465;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__95467 = s;
    if (G__95467) {
      var bit__4662__auto__ = G__95467.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4662__auto__ || G__95467.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__95467.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__95467);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__95467);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__95469 = s;
  if (G__95469) {
    var bit__4662__auto__ = G__95469.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4662__auto__ || G__95469.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__95469.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__95469);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__95469);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3981__auto__ = cljs.core.fn_QMARK_(f);
  if (or__3981__auto__) {
    return or__3981__auto__;
  } else {
    var G__95473 = f;
    if (G__95473) {
      var bit__4662__auto__ = G__95473.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4662__auto__ || G__95473.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__95473.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__95473);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__95473);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__95486 = n;
    return isNaN(G__95486);
  }()) && !(n === Infinity) && function() {
    var G__95487 = n;
    return parseFloat(G__95487);
  }() === function() {
    var G__95488 = n;
    var G__95489 = 10;
    return parseInt(G__95488, G__95489);
  }();
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__95490__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first(xs);
          var etc = cljs.core.next(xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_(s, x__$1)) {
              return false;
            } else {
              var G__95491 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
              var G__95492 = etc;
              s = G__95491;
              xs = G__95492;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__95490 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95493__i = 0, G__95493__a = new Array(arguments.length - 2);
        while (G__95493__i < G__95493__a.length) {
          G__95493__a[G__95493__i] = arguments[G__95493__i + 2];
          ++G__95493__i;
        }
        more = new cljs.core.IndexedSeq(G__95493__a, 0);
      }
      return G__95490__delegate.call(this, x, y, more);
    };
    G__95490.cljs$lang$maxFixedArity = 2;
    G__95490.cljs$lang$applyTo = function(arglist__95494) {
      var x = cljs.core.first(arglist__95494);
      arglist__95494 = cljs.core.next(arglist__95494);
      var y = cljs.core.first(arglist__95494);
      var more = cljs.core.rest(arglist__95494);
      return G__95490__delegate(x, y, more);
    };
    G__95490.cljs$core$IFn$_invoke$arity$variadic = G__95490__delegate;
    return G__95490;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        var G__95495 = null;
        if (arguments.length > 2) {
          var G__95496__i = 0, G__95496__a = new Array(arguments.length - 2);
          while (G__95496__i < G__95496__a.length) {
            G__95496__a[G__95496__i] = arguments[G__95496__i + 2];
            ++G__95496__i;
          }
          G__95495 = new cljs.core.IndexedSeq(G__95496__a, 0);
        }
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95495);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type(x) === cljs.core.type(y)) {
          if (function() {
            var G__95500 = x;
            if (G__95500) {
              var bit__4655__auto__ = G__95500.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4655__auto__ || G__95500.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return x.cljs$core$IComparable$_compare$arity$2(null, y);
          } else {
            var G__95501 = x;
            var G__95502 = y;
            return goog.array.defaultCompare(G__95501, G__95502);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count(xs);
    var yl = cljs.core.count(ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
      if (d === 0 && n + 1 < len) {
        var G__95507 = xs;
        var G__95508 = ys;
        var G__95509 = len;
        var G__95510 = n + 1;
        xs = G__95507;
        ys = G__95508;
        len = G__95509;
        n = G__95510;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__95515 = x;
        var G__95516 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__95515, G__95516) : f.call(null, G__95515, G__95516);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(function() {
            var G__95517 = y;
            var G__95518 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__95517, G__95518) : f.call(null, G__95517, G__95518);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq(coll)) {
      var a = function() {
        var G__95524 = coll;
        return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__95524) : cljs.core.to_array.call(null, G__95524);
      }();
      var G__95525_95527 = a;
      var G__95526_95528 = cljs.core.fn__GT_comparator(comp);
      goog.array.stableSort(G__95525_95527, G__95526_95528);
      return cljs.core.seq(a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
      return cljs.core.fn__GT_comparator(comp).call(null, function() {
        var G__95534 = x;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__95534) : keyfn.call(null, G__95534);
      }(), function() {
        var G__95535 = y;
        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__95535) : keyfn.call(null, G__95535);
      }());
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq(coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      var G__95541 = f;
      var G__95542 = cljs.core.first(s);
      var G__95543 = cljs.core.next(s);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__95541, G__95542, G__95543) : cljs.core.reduce.call(null, G__95541, G__95542, G__95543);
    } else {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq(coll);
    while (true) {
      if (coll__$1) {
        var nval = function() {
          var G__95544 = val__$1;
          var G__95545 = cljs.core.first(coll__$1);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__95544, G__95545) : f.call(null, G__95544, G__95545);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__95546 = nval;
          var G__95547 = cljs.core.next(coll__$1);
          val__$1 = G__95546;
          coll__$1 = G__95547;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = function() {
    var G__95551 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__95551) : cljs.core.to_array.call(null, G__95551);
  }();
  var G__95552_95554 = a;
  goog.array.shuffle(G__95552_95554);
  var G__95553 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__95553) : cljs.core.vec.call(null, G__95553);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__95557 = coll;
      if (G__95557) {
        var bit__4655__auto__ = G__95557.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4655__auto__ || G__95557.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__95558 = coll;
      if (G__95558) {
        var bit__4655__auto__ = G__95558.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4655__auto__ || G__95558.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
            return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
          } else {
            return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__95567 = null;
      var G__95567__0 = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      };
      var G__95567__1 = function(x) {
        var G__95564 = x;
        return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__95564) : cf.call(null, G__95564);
      };
      var G__95567__2 = function(x, y) {
        var G__95565 = x;
        var G__95566 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__95565, G__95566) : f.call(null, G__95565, G__95566);
      };
      G__95567 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__95567__0.call(this);
          case 1:
            return G__95567__1.call(this, x);
          case 2:
            return G__95567__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__95567.cljs$core$IFn$_invoke$arity$0 = G__95567__0;
      G__95567.cljs$core$IFn$_invoke$arity$1 = G__95567__1;
      G__95567.cljs$core$IFn$_invoke$arity$2 = G__95567__2;
      return G__95567;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = function() {
      var G__95574 = f;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__95574) : xform.call(null, G__95574);
    }();
    var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
    var G__95575 = ret;
    return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__95575) : f__$1.call(null, G__95575);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__95576__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_PLUS_, x + y, more);
    };
    var G__95576 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95577__i = 0, G__95577__a = new Array(arguments.length - 2);
        while (G__95577__i < G__95577__a.length) {
          G__95577__a[G__95577__i] = arguments[G__95577__i + 2];
          ++G__95577__i;
        }
        more = new cljs.core.IndexedSeq(G__95577__a, 0);
      }
      return G__95576__delegate.call(this, x, y, more);
    };
    G__95576.cljs$lang$maxFixedArity = 2;
    G__95576.cljs$lang$applyTo = function(arglist__95578) {
      var x = cljs.core.first(arglist__95578);
      arglist__95578 = cljs.core.next(arglist__95578);
      var y = cljs.core.first(arglist__95578);
      var more = cljs.core.rest(arglist__95578);
      return G__95576__delegate(x, y, more);
    };
    G__95576.cljs$core$IFn$_invoke$arity$variadic = G__95576__delegate;
    return G__95576;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        var G__95579 = null;
        if (arguments.length > 2) {
          var G__95580__i = 0, G__95580__a = new Array(arguments.length - 2);
          while (G__95580__i < G__95580__a.length) {
            G__95580__a[G__95580__i] = arguments[G__95580__i + 2];
            ++G__95580__i;
          }
          G__95579 = new cljs.core.IndexedSeq(G__95580__a, 0);
        }
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95579);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__95581__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_, x - y, more);
    };
    var G__95581 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95582__i = 0, G__95582__a = new Array(arguments.length - 2);
        while (G__95582__i < G__95582__a.length) {
          G__95582__a[G__95582__i] = arguments[G__95582__i + 2];
          ++G__95582__i;
        }
        more = new cljs.core.IndexedSeq(G__95582__a, 0);
      }
      return G__95581__delegate.call(this, x, y, more);
    };
    G__95581.cljs$lang$maxFixedArity = 2;
    G__95581.cljs$lang$applyTo = function(arglist__95583) {
      var x = cljs.core.first(arglist__95583);
      arglist__95583 = cljs.core.next(arglist__95583);
      var y = cljs.core.first(arglist__95583);
      var more = cljs.core.rest(arglist__95583);
      return G__95581__delegate(x, y, more);
    };
    G__95581.cljs$core$IFn$_invoke$arity$variadic = G__95581__delegate;
    return G__95581;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        var G__95584 = null;
        if (arguments.length > 2) {
          var G__95585__i = 0, G__95585__a = new Array(arguments.length - 2);
          while (G__95585__i < G__95585__a.length) {
            G__95585__a[G__95585__i] = arguments[G__95585__i + 2];
            ++G__95585__i;
          }
          G__95584 = new cljs.core.IndexedSeq(G__95585__a, 0);
        }
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95584);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__95586__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_STAR_, x * y, more);
    };
    var G__95586 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95587__i = 0, G__95587__a = new Array(arguments.length - 2);
        while (G__95587__i < G__95587__a.length) {
          G__95587__a[G__95587__i] = arguments[G__95587__i + 2];
          ++G__95587__i;
        }
        more = new cljs.core.IndexedSeq(G__95587__a, 0);
      }
      return G__95586__delegate.call(this, x, y, more);
    };
    G__95586.cljs$lang$maxFixedArity = 2;
    G__95586.cljs$lang$applyTo = function(arglist__95588) {
      var x = cljs.core.first(arglist__95588);
      arglist__95588 = cljs.core.next(arglist__95588);
      var y = cljs.core.first(arglist__95588);
      var more = cljs.core.rest(arglist__95588);
      return G__95586__delegate(x, y, more);
    };
    G__95586.cljs$core$IFn$_invoke$arity$variadic = G__95586__delegate;
    return G__95586;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        var G__95589 = null;
        if (arguments.length > 2) {
          var G__95590__i = 0, G__95590__a = new Array(arguments.length - 2);
          while (G__95590__i < G__95590__a.length) {
            G__95590__a[G__95590__i] = arguments[G__95590__i + 2];
            ++G__95590__i;
          }
          G__95589 = new cljs.core.IndexedSeq(G__95590__a, 0);
        }
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95589);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__95595__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(_SLASH_, _SLASH_.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__95595 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95596__i = 0, G__95596__a = new Array(arguments.length - 2);
        while (G__95596__i < G__95596__a.length) {
          G__95596__a[G__95596__i] = arguments[G__95596__i + 2];
          ++G__95596__i;
        }
        more = new cljs.core.IndexedSeq(G__95596__a, 0);
      }
      return G__95595__delegate.call(this, x, y, more);
    };
    G__95595.cljs$lang$maxFixedArity = 2;
    G__95595.cljs$lang$applyTo = function(arglist__95597) {
      var x = cljs.core.first(arglist__95597);
      arglist__95597 = cljs.core.next(arglist__95597);
      var y = cljs.core.first(arglist__95597);
      var more = cljs.core.rest(arglist__95597);
      return G__95595__delegate(x, y, more);
    };
    G__95595.cljs$core$IFn$_invoke$arity$variadic = G__95595__delegate;
    return G__95595;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        var G__95598 = null;
        if (arguments.length > 2) {
          var G__95599__i = 0, G__95599__a = new Array(arguments.length - 2);
          while (G__95599__i < G__95599__a.length) {
            G__95599__a[G__95599__i] = arguments[G__95599__i + 2];
            ++G__95599__i;
          }
          G__95598 = new cljs.core.IndexedSeq(G__95599__a, 0);
        }
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95598);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__95600__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next(more)) {
            var G__95601 = y;
            var G__95602 = cljs.core.first(more);
            var G__95603 = cljs.core.next(more);
            x = G__95601;
            y = G__95602;
            more = G__95603;
            continue;
          } else {
            return y < cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__95600 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95604__i = 0, G__95604__a = new Array(arguments.length - 2);
        while (G__95604__i < G__95604__a.length) {
          G__95604__a[G__95604__i] = arguments[G__95604__i + 2];
          ++G__95604__i;
        }
        more = new cljs.core.IndexedSeq(G__95604__a, 0);
      }
      return G__95600__delegate.call(this, x, y, more);
    };
    G__95600.cljs$lang$maxFixedArity = 2;
    G__95600.cljs$lang$applyTo = function(arglist__95605) {
      var x = cljs.core.first(arglist__95605);
      arglist__95605 = cljs.core.next(arglist__95605);
      var y = cljs.core.first(arglist__95605);
      var more = cljs.core.rest(arglist__95605);
      return G__95600__delegate(x, y, more);
    };
    G__95600.cljs$core$IFn$_invoke$arity$variadic = G__95600__delegate;
    return G__95600;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        var G__95606 = null;
        if (arguments.length > 2) {
          var G__95607__i = 0, G__95607__a = new Array(arguments.length - 2);
          while (G__95607__i < G__95607__a.length) {
            G__95607__a[G__95607__i] = arguments[G__95607__i + 2];
            ++G__95607__i;
          }
          G__95606 = new cljs.core.IndexedSeq(G__95607__a, 0);
        }
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95606);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__95608__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next(more)) {
            var G__95609 = y;
            var G__95610 = cljs.core.first(more);
            var G__95611 = cljs.core.next(more);
            x = G__95609;
            y = G__95610;
            more = G__95611;
            continue;
          } else {
            return y <= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__95608 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95612__i = 0, G__95612__a = new Array(arguments.length - 2);
        while (G__95612__i < G__95612__a.length) {
          G__95612__a[G__95612__i] = arguments[G__95612__i + 2];
          ++G__95612__i;
        }
        more = new cljs.core.IndexedSeq(G__95612__a, 0);
      }
      return G__95608__delegate.call(this, x, y, more);
    };
    G__95608.cljs$lang$maxFixedArity = 2;
    G__95608.cljs$lang$applyTo = function(arglist__95613) {
      var x = cljs.core.first(arglist__95613);
      arglist__95613 = cljs.core.next(arglist__95613);
      var y = cljs.core.first(arglist__95613);
      var more = cljs.core.rest(arglist__95613);
      return G__95608__delegate(x, y, more);
    };
    G__95608.cljs$core$IFn$_invoke$arity$variadic = G__95608__delegate;
    return G__95608;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        var G__95614 = null;
        if (arguments.length > 2) {
          var G__95615__i = 0, G__95615__a = new Array(arguments.length - 2);
          while (G__95615__i < G__95615__a.length) {
            G__95615__a[G__95615__i] = arguments[G__95615__i + 2];
            ++G__95615__i;
          }
          G__95614 = new cljs.core.IndexedSeq(G__95615__a, 0);
        }
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95614);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__95616__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next(more)) {
            var G__95617 = y;
            var G__95618 = cljs.core.first(more);
            var G__95619 = cljs.core.next(more);
            x = G__95617;
            y = G__95618;
            more = G__95619;
            continue;
          } else {
            return y > cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__95616 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95620__i = 0, G__95620__a = new Array(arguments.length - 2);
        while (G__95620__i < G__95620__a.length) {
          G__95620__a[G__95620__i] = arguments[G__95620__i + 2];
          ++G__95620__i;
        }
        more = new cljs.core.IndexedSeq(G__95620__a, 0);
      }
      return G__95616__delegate.call(this, x, y, more);
    };
    G__95616.cljs$lang$maxFixedArity = 2;
    G__95616.cljs$lang$applyTo = function(arglist__95621) {
      var x = cljs.core.first(arglist__95621);
      arglist__95621 = cljs.core.next(arglist__95621);
      var y = cljs.core.first(arglist__95621);
      var more = cljs.core.rest(arglist__95621);
      return G__95616__delegate(x, y, more);
    };
    G__95616.cljs$core$IFn$_invoke$arity$variadic = G__95616__delegate;
    return G__95616;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        var G__95622 = null;
        if (arguments.length > 2) {
          var G__95623__i = 0, G__95623__a = new Array(arguments.length - 2);
          while (G__95623__i < G__95623__a.length) {
            G__95623__a[G__95623__i] = arguments[G__95623__i + 2];
            ++G__95623__i;
          }
          G__95622 = new cljs.core.IndexedSeq(G__95623__a, 0);
        }
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95622);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__95624__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next(more)) {
            var G__95625 = y;
            var G__95626 = cljs.core.first(more);
            var G__95627 = cljs.core.next(more);
            x = G__95625;
            y = G__95626;
            more = G__95627;
            continue;
          } else {
            return y >= cljs.core.first(more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__95624 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95628__i = 0, G__95628__a = new Array(arguments.length - 2);
        while (G__95628__i < G__95628__a.length) {
          G__95628__a[G__95628__i] = arguments[G__95628__i + 2];
          ++G__95628__i;
        }
        more = new cljs.core.IndexedSeq(G__95628__a, 0);
      }
      return G__95624__delegate.call(this, x, y, more);
    };
    G__95624.cljs$lang$maxFixedArity = 2;
    G__95624.cljs$lang$applyTo = function(arglist__95629) {
      var x = cljs.core.first(arglist__95629);
      arglist__95629 = cljs.core.next(arglist__95629);
      var y = cljs.core.first(arglist__95629);
      var more = cljs.core.rest(arglist__95629);
      return G__95624__delegate(x, y, more);
    };
    G__95624.cljs$core$IFn$_invoke$arity$variadic = G__95624__delegate;
    return G__95624;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        var G__95630 = null;
        if (arguments.length > 2) {
          var G__95631__i = 0, G__95631__a = new Array(arguments.length - 2);
          while (G__95631__i < G__95631__a.length) {
            G__95631__a[G__95631__i] = arguments[G__95631__i + 2];
            ++G__95631__i;
          }
          G__95630 = new cljs.core.IndexedSeq(G__95631__a, 0);
        }
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95630);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__4298__auto__ = x;
    var y__4299__auto__ = y;
    return x__4298__auto__ > y__4299__auto__ ? x__4298__auto__ : y__4299__auto__;
  };
  var max__3 = function() {
    var G__95632__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(max, function() {
        var x__4298__auto__ = x;
        var y__4299__auto__ = y;
        return x__4298__auto__ > y__4299__auto__ ? x__4298__auto__ : y__4299__auto__;
      }(), more);
    };
    var G__95632 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95633__i = 0, G__95633__a = new Array(arguments.length - 2);
        while (G__95633__i < G__95633__a.length) {
          G__95633__a[G__95633__i] = arguments[G__95633__i + 2];
          ++G__95633__i;
        }
        more = new cljs.core.IndexedSeq(G__95633__a, 0);
      }
      return G__95632__delegate.call(this, x, y, more);
    };
    G__95632.cljs$lang$maxFixedArity = 2;
    G__95632.cljs$lang$applyTo = function(arglist__95634) {
      var x = cljs.core.first(arglist__95634);
      arglist__95634 = cljs.core.next(arglist__95634);
      var y = cljs.core.first(arglist__95634);
      var more = cljs.core.rest(arglist__95634);
      return G__95632__delegate(x, y, more);
    };
    G__95632.cljs$core$IFn$_invoke$arity$variadic = G__95632__delegate;
    return G__95632;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        var G__95635 = null;
        if (arguments.length > 2) {
          var G__95636__i = 0, G__95636__a = new Array(arguments.length - 2);
          while (G__95636__i < G__95636__a.length) {
            G__95636__a[G__95636__i] = arguments[G__95636__i + 2];
            ++G__95636__i;
          }
          G__95635 = new cljs.core.IndexedSeq(G__95636__a, 0);
        }
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95635);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__4305__auto__ = x;
    var y__4306__auto__ = y;
    return x__4305__auto__ < y__4306__auto__ ? x__4305__auto__ : y__4306__auto__;
  };
  var min__3 = function() {
    var G__95637__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(min, function() {
        var x__4305__auto__ = x;
        var y__4306__auto__ = y;
        return x__4305__auto__ < y__4306__auto__ ? x__4305__auto__ : y__4306__auto__;
      }(), more);
    };
    var G__95637 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95638__i = 0, G__95638__a = new Array(arguments.length - 2);
        while (G__95638__i < G__95638__a.length) {
          G__95638__a[G__95638__i] = arguments[G__95638__i + 2];
          ++G__95638__i;
        }
        more = new cljs.core.IndexedSeq(G__95638__a, 0);
      }
      return G__95637__delegate.call(this, x, y, more);
    };
    G__95637.cljs$lang$maxFixedArity = 2;
    G__95637.cljs$lang$applyTo = function(arglist__95639) {
      var x = cljs.core.first(arglist__95639);
      arglist__95639 = cljs.core.next(arglist__95639);
      var y = cljs.core.first(arglist__95639);
      var more = cljs.core.rest(arglist__95639);
      return G__95637__delegate(x, y, more);
    };
    G__95637.cljs$core$IFn$_invoke$arity$variadic = G__95637__delegate;
    return G__95637;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        var G__95640 = null;
        if (arguments.length > 2) {
          var G__95641__i = 0, G__95641__a = new Array(arguments.length - 2);
          while (G__95641__i < G__95641__a.length) {
            G__95641__a[G__95641__i] = arguments[G__95641__i + 2];
            ++G__95641__i;
          }
          G__95640 = new cljs.core.IndexedSeq(G__95641__a, 0);
        }
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95640);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__95642__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_add, x + y, more);
    };
    var G__95642 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95643__i = 0, G__95643__a = new Array(arguments.length - 2);
        while (G__95643__i < G__95643__a.length) {
          G__95643__a[G__95643__i] = arguments[G__95643__i + 2];
          ++G__95643__i;
        }
        more = new cljs.core.IndexedSeq(G__95643__a, 0);
      }
      return G__95642__delegate.call(this, x, y, more);
    };
    G__95642.cljs$lang$maxFixedArity = 2;
    G__95642.cljs$lang$applyTo = function(arglist__95644) {
      var x = cljs.core.first(arglist__95644);
      arglist__95644 = cljs.core.next(arglist__95644);
      var y = cljs.core.first(arglist__95644);
      var more = cljs.core.rest(arglist__95644);
      return G__95642__delegate(x, y, more);
    };
    G__95642.cljs$core$IFn$_invoke$arity$variadic = G__95642__delegate;
    return G__95642;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        var G__95645 = null;
        if (arguments.length > 2) {
          var G__95646__i = 0, G__95646__a = new Array(arguments.length - 2);
          while (G__95646__i < G__95646__a.length) {
            G__95646__a[G__95646__i] = arguments[G__95646__i + 2];
            ++G__95646__i;
          }
          G__95645 = new cljs.core.IndexedSeq(G__95646__a, 0);
        }
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95645);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__95647__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_add_int, x + y, more);
    };
    var G__95647 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95648__i = 0, G__95648__a = new Array(arguments.length - 2);
        while (G__95648__i < G__95648__a.length) {
          G__95648__a[G__95648__i] = arguments[G__95648__i + 2];
          ++G__95648__i;
        }
        more = new cljs.core.IndexedSeq(G__95648__a, 0);
      }
      return G__95647__delegate.call(this, x, y, more);
    };
    G__95647.cljs$lang$maxFixedArity = 2;
    G__95647.cljs$lang$applyTo = function(arglist__95649) {
      var x = cljs.core.first(arglist__95649);
      arglist__95649 = cljs.core.next(arglist__95649);
      var y = cljs.core.first(arglist__95649);
      var more = cljs.core.rest(arglist__95649);
      return G__95647__delegate(x, y, more);
    };
    G__95647.cljs$core$IFn$_invoke$arity$variadic = G__95647__delegate;
    return G__95647;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        var G__95650 = null;
        if (arguments.length > 2) {
          var G__95651__i = 0, G__95651__a = new Array(arguments.length - 2);
          while (G__95651__i < G__95651__a.length) {
            G__95651__a[G__95651__i] = arguments[G__95651__i + 2];
            ++G__95651__i;
          }
          G__95650 = new cljs.core.IndexedSeq(G__95651__a, 0);
        }
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95650);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__95656__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_divide_int, unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(x, y), more);
    };
    var G__95656 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95657__i = 0, G__95657__a = new Array(arguments.length - 2);
        while (G__95657__i < G__95657__a.length) {
          G__95657__a[G__95657__i] = arguments[G__95657__i + 2];
          ++G__95657__i;
        }
        more = new cljs.core.IndexedSeq(G__95657__a, 0);
      }
      return G__95656__delegate.call(this, x, y, more);
    };
    G__95656.cljs$lang$maxFixedArity = 2;
    G__95656.cljs$lang$applyTo = function(arglist__95658) {
      var x = cljs.core.first(arglist__95658);
      arglist__95658 = cljs.core.next(arglist__95658);
      var y = cljs.core.first(arglist__95658);
      var more = cljs.core.rest(arglist__95658);
      return G__95656__delegate(x, y, more);
    };
    G__95656.cljs$core$IFn$_invoke$arity$variadic = G__95656__delegate;
    return G__95656;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        var G__95659 = null;
        if (arguments.length > 2) {
          var G__95660__i = 0, G__95660__a = new Array(arguments.length - 2);
          while (G__95660__i < G__95660__a.length) {
            G__95660__a[G__95660__i] = arguments[G__95660__i + 2];
            ++G__95660__i;
          }
          G__95659 = new cljs.core.IndexedSeq(G__95660__a, 0);
        }
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95659);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__95661__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_multiply, x * y, more);
    };
    var G__95661 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95662__i = 0, G__95662__a = new Array(arguments.length - 2);
        while (G__95662__i < G__95662__a.length) {
          G__95662__a[G__95662__i] = arguments[G__95662__i + 2];
          ++G__95662__i;
        }
        more = new cljs.core.IndexedSeq(G__95662__a, 0);
      }
      return G__95661__delegate.call(this, x, y, more);
    };
    G__95661.cljs$lang$maxFixedArity = 2;
    G__95661.cljs$lang$applyTo = function(arglist__95663) {
      var x = cljs.core.first(arglist__95663);
      arglist__95663 = cljs.core.next(arglist__95663);
      var y = cljs.core.first(arglist__95663);
      var more = cljs.core.rest(arglist__95663);
      return G__95661__delegate(x, y, more);
    };
    G__95661.cljs$core$IFn$_invoke$arity$variadic = G__95661__delegate;
    return G__95661;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        var G__95664 = null;
        if (arguments.length > 2) {
          var G__95665__i = 0, G__95665__a = new Array(arguments.length - 2);
          while (G__95665__i < G__95665__a.length) {
            G__95665__a[G__95665__i] = arguments[G__95665__i + 2];
            ++G__95665__i;
          }
          G__95664 = new cljs.core.IndexedSeq(G__95665__a, 0);
        }
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95664);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__95666__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_multiply_int, x * y, more);
    };
    var G__95666 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95667__i = 0, G__95667__a = new Array(arguments.length - 2);
        while (G__95667__i < G__95667__a.length) {
          G__95667__a[G__95667__i] = arguments[G__95667__i + 2];
          ++G__95667__i;
        }
        more = new cljs.core.IndexedSeq(G__95667__a, 0);
      }
      return G__95666__delegate.call(this, x, y, more);
    };
    G__95666.cljs$lang$maxFixedArity = 2;
    G__95666.cljs$lang$applyTo = function(arglist__95668) {
      var x = cljs.core.first(arglist__95668);
      arglist__95668 = cljs.core.next(arglist__95668);
      var y = cljs.core.first(arglist__95668);
      var more = cljs.core.rest(arglist__95668);
      return G__95666__delegate(x, y, more);
    };
    G__95666.cljs$core$IFn$_invoke$arity$variadic = G__95666__delegate;
    return G__95666;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        var G__95669 = null;
        if (arguments.length > 2) {
          var G__95670__i = 0, G__95670__a = new Array(arguments.length - 2);
          while (G__95670__i < G__95670__a.length) {
            G__95670__a[G__95670__i] = arguments[G__95670__i + 2];
            ++G__95670__i;
          }
          G__95669 = new cljs.core.IndexedSeq(G__95670__a, 0);
        }
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95669);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  var G__95673 = x;
  var G__95674 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__95673, G__95674) : cljs.core.mod.call(null, G__95673, G__95674);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__95675__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_subtract, x - y, more);
    };
    var G__95675 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95676__i = 0, G__95676__a = new Array(arguments.length - 2);
        while (G__95676__i < G__95676__a.length) {
          G__95676__a[G__95676__i] = arguments[G__95676__i + 2];
          ++G__95676__i;
        }
        more = new cljs.core.IndexedSeq(G__95676__a, 0);
      }
      return G__95675__delegate.call(this, x, y, more);
    };
    G__95675.cljs$lang$maxFixedArity = 2;
    G__95675.cljs$lang$applyTo = function(arglist__95677) {
      var x = cljs.core.first(arglist__95677);
      arglist__95677 = cljs.core.next(arglist__95677);
      var y = cljs.core.first(arglist__95677);
      var more = cljs.core.rest(arglist__95677);
      return G__95675__delegate(x, y, more);
    };
    G__95675.cljs$core$IFn$_invoke$arity$variadic = G__95675__delegate;
    return G__95675;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        var G__95678 = null;
        if (arguments.length > 2) {
          var G__95679__i = 0, G__95679__a = new Array(arguments.length - 2);
          while (G__95679__i < G__95679__a.length) {
            G__95679__a[G__95679__i] = arguments[G__95679__i + 2];
            ++G__95679__i;
          }
          G__95678 = new cljs.core.IndexedSeq(G__95679__a, 0);
        }
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95678);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__95680__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(unchecked_subtract_int, x - y, more);
    };
    var G__95680 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95681__i = 0, G__95681__a = new Array(arguments.length - 2);
        while (G__95681__i < G__95681__a.length) {
          G__95681__a[G__95681__i] = arguments[G__95681__i + 2];
          ++G__95681__i;
        }
        more = new cljs.core.IndexedSeq(G__95681__a, 0);
      }
      return G__95680__delegate.call(this, x, y, more);
    };
    G__95680.cljs$lang$maxFixedArity = 2;
    G__95680.cljs$lang$applyTo = function(arglist__95682) {
      var x = cljs.core.first(arglist__95682);
      arglist__95682 = cljs.core.next(arglist__95682);
      var y = cljs.core.first(arglist__95682);
      var more = cljs.core.rest(arglist__95682);
      return G__95680__delegate(x, y, more);
    };
    G__95680.cljs$core$IFn$_invoke$arity$variadic = G__95680__delegate;
    return G__95680;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        var G__95683 = null;
        if (arguments.length > 2) {
          var G__95684__i = 0, G__95684__a = new Array(arguments.length - 2);
          while (G__95684__i < G__95684__a.length) {
            G__95684__a[G__95684__i] = arguments[G__95684__i + 2];
            ++G__95684__i;
          }
          G__95683 = new cljs.core.IndexedSeq(G__95684__a, 0);
        }
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95683);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    var G__95687 = q;
    return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__95687) : Math.floor.call(null, G__95687);
  } else {
    var G__95688 = q;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__95688) : Math.ceil.call(null, G__95688);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function() {
  var bit_xor = null;
  var bit_xor__2 = function(x, y) {
    return x ^ y;
  };
  var bit_xor__3 = function() {
    var G__95689__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_xor, x ^ y, more);
    };
    var G__95689 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95690__i = 0, G__95690__a = new Array(arguments.length - 2);
        while (G__95690__i < G__95690__a.length) {
          G__95690__a[G__95690__i] = arguments[G__95690__i + 2];
          ++G__95690__i;
        }
        more = new cljs.core.IndexedSeq(G__95690__a, 0);
      }
      return G__95689__delegate.call(this, x, y, more);
    };
    G__95689.cljs$lang$maxFixedArity = 2;
    G__95689.cljs$lang$applyTo = function(arglist__95691) {
      var x = cljs.core.first(arglist__95691);
      arglist__95691 = cljs.core.next(arglist__95691);
      var y = cljs.core.first(arglist__95691);
      var more = cljs.core.rest(arglist__95691);
      return G__95689__delegate(x, y, more);
    };
    G__95689.cljs$core$IFn$_invoke$arity$variadic = G__95689__delegate;
    return G__95689;
  }();
  bit_xor = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_xor__2.call(this, x, y);
      default:
        var G__95692 = null;
        if (arguments.length > 2) {
          var G__95693__i = 0, G__95693__a = new Array(arguments.length - 2);
          while (G__95693__i < G__95693__a.length) {
            G__95693__a[G__95693__i] = arguments[G__95693__i + 2];
            ++G__95693__i;
          }
          G__95692 = new cljs.core.IndexedSeq(G__95693__a, 0);
        }
        return bit_xor__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95692);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_xor.cljs$lang$maxFixedArity = 2;
  bit_xor.cljs$lang$applyTo = bit_xor__3.cljs$lang$applyTo;
  bit_xor.cljs$core$IFn$_invoke$arity$2 = bit_xor__2;
  bit_xor.cljs$core$IFn$_invoke$arity$variadic = bit_xor__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_xor;
}();
cljs.core.bit_and = function() {
  var bit_and = null;
  var bit_and__2 = function(x, y) {
    return x & y;
  };
  var bit_and__3 = function() {
    var G__95694__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_and, x & y, more);
    };
    var G__95694 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95695__i = 0, G__95695__a = new Array(arguments.length - 2);
        while (G__95695__i < G__95695__a.length) {
          G__95695__a[G__95695__i] = arguments[G__95695__i + 2];
          ++G__95695__i;
        }
        more = new cljs.core.IndexedSeq(G__95695__a, 0);
      }
      return G__95694__delegate.call(this, x, y, more);
    };
    G__95694.cljs$lang$maxFixedArity = 2;
    G__95694.cljs$lang$applyTo = function(arglist__95696) {
      var x = cljs.core.first(arglist__95696);
      arglist__95696 = cljs.core.next(arglist__95696);
      var y = cljs.core.first(arglist__95696);
      var more = cljs.core.rest(arglist__95696);
      return G__95694__delegate(x, y, more);
    };
    G__95694.cljs$core$IFn$_invoke$arity$variadic = G__95694__delegate;
    return G__95694;
  }();
  bit_and = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_and__2.call(this, x, y);
      default:
        var G__95697 = null;
        if (arguments.length > 2) {
          var G__95698__i = 0, G__95698__a = new Array(arguments.length - 2);
          while (G__95698__i < G__95698__a.length) {
            G__95698__a[G__95698__i] = arguments[G__95698__i + 2];
            ++G__95698__i;
          }
          G__95697 = new cljs.core.IndexedSeq(G__95698__a, 0);
        }
        return bit_and__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95697);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_and.cljs$lang$maxFixedArity = 2;
  bit_and.cljs$lang$applyTo = bit_and__3.cljs$lang$applyTo;
  bit_and.cljs$core$IFn$_invoke$arity$2 = bit_and__2;
  bit_and.cljs$core$IFn$_invoke$arity$variadic = bit_and__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_and;
}();
cljs.core.bit_or = function() {
  var bit_or = null;
  var bit_or__2 = function(x, y) {
    return x | y;
  };
  var bit_or__3 = function() {
    var G__95699__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_or, x | y, more);
    };
    var G__95699 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95700__i = 0, G__95700__a = new Array(arguments.length - 2);
        while (G__95700__i < G__95700__a.length) {
          G__95700__a[G__95700__i] = arguments[G__95700__i + 2];
          ++G__95700__i;
        }
        more = new cljs.core.IndexedSeq(G__95700__a, 0);
      }
      return G__95699__delegate.call(this, x, y, more);
    };
    G__95699.cljs$lang$maxFixedArity = 2;
    G__95699.cljs$lang$applyTo = function(arglist__95701) {
      var x = cljs.core.first(arglist__95701);
      arglist__95701 = cljs.core.next(arglist__95701);
      var y = cljs.core.first(arglist__95701);
      var more = cljs.core.rest(arglist__95701);
      return G__95699__delegate(x, y, more);
    };
    G__95699.cljs$core$IFn$_invoke$arity$variadic = G__95699__delegate;
    return G__95699;
  }();
  bit_or = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_or__2.call(this, x, y);
      default:
        var G__95702 = null;
        if (arguments.length > 2) {
          var G__95703__i = 0, G__95703__a = new Array(arguments.length - 2);
          while (G__95703__i < G__95703__a.length) {
            G__95703__a[G__95703__i] = arguments[G__95703__i + 2];
            ++G__95703__i;
          }
          G__95702 = new cljs.core.IndexedSeq(G__95703__a, 0);
        }
        return bit_or__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95702);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_or.cljs$lang$maxFixedArity = 2;
  bit_or.cljs$lang$applyTo = bit_or__3.cljs$lang$applyTo;
  bit_or.cljs$core$IFn$_invoke$arity$2 = bit_or__2;
  bit_or.cljs$core$IFn$_invoke$arity$variadic = bit_or__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_or;
}();
cljs.core.bit_and_not = function() {
  var bit_and_not = null;
  var bit_and_not__2 = function(x, y) {
    return x & ~y;
  };
  var bit_and_not__3 = function() {
    var G__95704__delegate = function(x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(bit_and_not, x & ~y, more);
    };
    var G__95704 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95705__i = 0, G__95705__a = new Array(arguments.length - 2);
        while (G__95705__i < G__95705__a.length) {
          G__95705__a[G__95705__i] = arguments[G__95705__i + 2];
          ++G__95705__i;
        }
        more = new cljs.core.IndexedSeq(G__95705__a, 0);
      }
      return G__95704__delegate.call(this, x, y, more);
    };
    G__95704.cljs$lang$maxFixedArity = 2;
    G__95704.cljs$lang$applyTo = function(arglist__95706) {
      var x = cljs.core.first(arglist__95706);
      arglist__95706 = cljs.core.next(arglist__95706);
      var y = cljs.core.first(arglist__95706);
      var more = cljs.core.rest(arglist__95706);
      return G__95704__delegate(x, y, more);
    };
    G__95704.cljs$core$IFn$_invoke$arity$variadic = G__95704__delegate;
    return G__95704;
  }();
  bit_and_not = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return bit_and_not__2.call(this, x, y);
      default:
        var G__95707 = null;
        if (arguments.length > 2) {
          var G__95708__i = 0, G__95708__a = new Array(arguments.length - 2);
          while (G__95708__i < G__95708__a.length) {
            G__95708__a[G__95708__i] = arguments[G__95708__i + 2];
            ++G__95708__i;
          }
          G__95707 = new cljs.core.IndexedSeq(G__95708__a, 0);
        }
        return bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95707);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  bit_and_not.cljs$lang$maxFixedArity = 2;
  bit_and_not.cljs$lang$applyTo = bit_and_not__3.cljs$lang$applyTo;
  bit_and_not.cljs$core$IFn$_invoke$arity$2 = bit_and_not__2;
  bit_and_not.cljs$core$IFn$_invoke$arity$variadic = bit_and_not__3.cljs$core$IFn$_invoke$arity$variadic;
  return bit_and_not;
}();
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv(x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__95713__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
          if (cljs.core.next(more)) {
            var G__95714 = y;
            var G__95715 = cljs.core.first(more);
            var G__95716 = cljs.core.next(more);
            x = G__95714;
            y = G__95715;
            more = G__95716;
            continue;
          } else {
            return _EQ__EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__95713 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__95717__i = 0, G__95717__a = new Array(arguments.length - 2);
        while (G__95717__i < G__95717__a.length) {
          G__95717__a[G__95717__i] = arguments[G__95717__i + 2];
          ++G__95717__i;
        }
        more = new cljs.core.IndexedSeq(G__95717__a, 0);
      }
      return G__95713__delegate.call(this, x, y, more);
    };
    G__95713.cljs$lang$maxFixedArity = 2;
    G__95713.cljs$lang$applyTo = function(arglist__95718) {
      var x = cljs.core.first(arglist__95718);
      arglist__95718 = cljs.core.next(arglist__95718);
      var y = cljs.core.first(arglist__95718);
      var more = cljs.core.rest(arglist__95718);
      return G__95713__delegate(x, y, more);
    };
    G__95713.cljs$core$IFn$_invoke$arity$variadic = G__95713__delegate;
    return G__95713;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        var G__95719 = null;
        if (arguments.length > 2) {
          var G__95720__i = 0, G__95720__a = new Array(arguments.length - 2);
          while (G__95720__i < G__95720__a.length) {
            G__95720__a[G__95720__i] = arguments[G__95720__i + 2];
            ++G__95720__i;
          }
          G__95719 = new cljs.core.IndexedSeq(G__95720__a, 0);
        }
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95719);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__95721 = n__$1 - 1;
      var G__95722 = cljs.core.next(xs);
      n__$1 = G__95721;
      xs = G__95722;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      var G__95726 = x;
      return goog.string.buildString(G__95726);
    }
  };
  var str__2 = function() {
    var G__95727__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.cljs$core$IFn$_invoke$arity$1(x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__95728 = sb.append(str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(more)));
          var G__95729 = cljs.core.next(more);
          sb = G__95728;
          more = G__95729;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__95727 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        var G__95730__i = 0, G__95730__a = new Array(arguments.length - 1);
        while (G__95730__i < G__95730__a.length) {
          G__95730__a[G__95730__i] = arguments[G__95730__i + 1];
          ++G__95730__i;
        }
        ys = new cljs.core.IndexedSeq(G__95730__a, 0);
      }
      return G__95727__delegate.call(this, x, ys);
    };
    G__95727.cljs$lang$maxFixedArity = 1;
    G__95727.cljs$lang$applyTo = function(arglist__95731) {
      var x = cljs.core.first(arglist__95731);
      var ys = cljs.core.rest(arglist__95731);
      return G__95727__delegate(x, ys);
    };
    G__95727.cljs$core$IFn$_invoke$arity$variadic = G__95727__delegate;
    return G__95727;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        var G__95732 = null;
        if (arguments.length > 1) {
          var G__95733__i = 0, G__95733__a = new Array(arguments.length - 1);
          while (G__95733__i < G__95733__a.length) {
            G__95733__a[G__95733__i] = arguments[G__95733__i + 1];
            ++G__95733__i;
          }
          G__95732 = new cljs.core.IndexedSeq(G__95733__a, 0);
        }
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, G__95732);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__95734 = cljs.core.next(xs);
            var G__95735 = cljs.core.next(ys);
            xs = G__95734;
            ys = G__95735;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__95736 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__95737 = cljs.core.next(s);
        res = G__95736;
        s = G__95737;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__95742 = (h + (cljs.core.hash(function() {
        var G__95740 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__95740) : cljs.core.key.call(null, G__95740);
      }()) ^ cljs.core.hash(function() {
        var G__95741 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__95741) : cljs.core.val.call(null, G__95741);
      }()))) % 4503599627370496;
      var G__95743 = cljs.core.next(s);
      h = G__95742;
      s = G__95743;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__95744 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__95745 = cljs.core.next(s__$1);
      h = G__95744;
      s__$1 = G__95745;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__95756_95766 = cljs.core.seq(fn_map);
  var chunk__95757_95767 = null;
  var count__95758_95768 = 0;
  var i__95759_95769 = 0;
  while (true) {
    if (i__95759_95769 < count__95758_95768) {
      var vec__95760_95770 = chunk__95757_95767.cljs$core$IIndexed$_nth$arity$2(null, i__95759_95769);
      var key_name_95771 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__95760_95770, 0, null);
      var f_95772 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__95760_95770, 1, null);
      var str_name_95773 = function() {
        var G__95761 = key_name_95771;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__95761) : cljs.core.name.call(null, G__95761);
      }();
      obj[str_name_95773] = f_95772;
      var G__95774 = seq__95756_95766;
      var G__95775 = chunk__95757_95767;
      var G__95776 = count__95758_95768;
      var G__95777 = i__95759_95769 + 1;
      seq__95756_95766 = G__95774;
      chunk__95757_95767 = G__95775;
      count__95758_95768 = G__95776;
      i__95759_95769 = G__95777;
      continue;
    } else {
      var temp__4126__auto___95778 = cljs.core.seq(seq__95756_95766);
      if (temp__4126__auto___95778) {
        var seq__95756_95779__$1 = temp__4126__auto___95778;
        if (cljs.core.chunked_seq_QMARK_(seq__95756_95779__$1)) {
          var c__4768__auto___95780 = function() {
            var G__95762 = seq__95756_95779__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__95762) : cljs.core.chunk_first.call(null, G__95762);
          }();
          var G__95781 = function() {
            var G__95763 = seq__95756_95779__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__95763) : cljs.core.chunk_rest.call(null, G__95763);
          }();
          var G__95782 = c__4768__auto___95780;
          var G__95783 = cljs.core.count(c__4768__auto___95780);
          var G__95784 = 0;
          seq__95756_95766 = G__95781;
          chunk__95757_95767 = G__95782;
          count__95758_95768 = G__95783;
          i__95759_95769 = G__95784;
          continue;
        } else {
          var vec__95764_95785 = cljs.core.first(seq__95756_95779__$1);
          var key_name_95786 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__95764_95785, 0, null);
          var f_95787 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__95764_95785, 1, null);
          var str_name_95788 = function() {
            var G__95765 = key_name_95786;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__95765) : cljs.core.name.call(null, G__95765);
          }();
          obj[str_name_95788] = f_95787;
          var G__95789 = cljs.core.next(seq__95756_95779__$1);
          var G__95790 = null;
          var G__95791 = 0;
          var G__95792 = 0;
          seq__95756_95766 = G__95789;
          chunk__95757_95767 = G__95790;
          count__95758_95768 = G__95791;
          i__95759_95769 = G__95792;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__95794 = coll;
  if (G__95794) {
    var bit__4662__auto__ = G__95794.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4662__auto__ || G__95794.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__95794.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__95794);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__95794);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
          var G__95795 = xs__$1.cljs$core$INext$_next$arity$1(null);
          xs__$1 = G__95795;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__95796 = i - 1;
        var G__95797 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
        i = G__95796;
        r = G__95797;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      var G__95798__i = 0, G__95798__a = new Array(arguments.length - 0);
      while (G__95798__i < G__95798__a.length) {
        G__95798__a[G__95798__i] = arguments[G__95798__i + 0];
        ++G__95798__i;
      }
      xs = new cljs.core.IndexedSeq(G__95798__a, 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__95799) {
    var xs = cljs.core.seq(arglist__95799);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3981__auto__ = coll == null;
    if (or__3981__auto__) {
      return or__3981__auto__;
    } else {
      var G__95803 = coll;
      if (G__95803) {
        var bit__4655__auto__ = G__95803.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4655__auto__ || G__95803.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__95805 = x;
  if (G__95805) {
    var bit__4662__auto__ = G__95805.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4662__auto__ || G__95805.cljs$core$IList$) {
      return true;
    } else {
      if (!G__95805.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__95805);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__95805);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = cljs.core.not(a.ns);
      if (and__3969__auto__) {
        return b.ns;
      } else {
        return and__3969__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__95812 = a.ns;
            var G__95813 = b.ns;
            return goog.array.defaultCompare(G__95812, G__95813);
          }();
          if (0 === nsc) {
            var G__95814 = a.name;
            var G__95815 = b.name;
            return goog.array.defaultCompare(G__95814, G__95815);
          } else {
            return nsc;
          }
        }
      } else {
        var G__95816 = a.name;
        var G__95817 = b.name;
        return goog.array.defaultCompare(G__95816, G__95817);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4402__auto__ = self__._hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__95819 = null;
  var G__95819__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__95819__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__95819 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__95819__2.call(this, self__, coll);
      case 3:
        return G__95819__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__95819.cljs$core$IFn$_invoke$arity$2 = G__95819__2;
  G__95819.cljs$core$IFn$_invoke$arity$3 = G__95819__3;
  return G__95819;
}();
cljs.core.Keyword.prototype.apply = function(self__, args95818) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args95818)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__95821 = x;
    if (G__95821) {
      var bit__4655__auto__ = G__95821.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4655__auto__ || G__95821.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace(name), function() {
          var G__95823 = name;
          return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__95823) : cljs.core.name.call(null, G__95823);
        }(), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__95824 = ls.sval();
        ls = G__95824;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__95826 = s;
    if (G__95826) {
      var bit__4655__auto__ = G__95826.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4655__auto__ || G__95826.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__95827 = cljs.core.next(s__$1);
      s__$1 = G__95827;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_95828 = 0;
  var xs_95829 = cljs.core.seq(coll);
  while (true) {
    if (xs_95829) {
      ret[i_95828] = cljs.core.to_array(cljs.core.first(xs_95829));
      var G__95830 = i_95828 + 1;
      var G__95831 = cljs.core.next(xs_95829);
      i_95828 = G__95830;
      xs_95829 = G__95831;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__95834 = i + 1;
          var G__95835 = cljs.core.next(s__$1);
          i = G__95834;
          s__$1 = G__95835;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4868__auto___95836 = size;
      var i_95837 = 0;
      while (true) {
        if (i_95837 < n__4868__auto___95836) {
          a[i_95837] = init_val_or_seq;
          var G__95838 = i_95837 + 1;
          i_95837 = G__95838;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__95841 = i + 1;
          var G__95842 = cljs.core.next(s__$1);
          i = G__95841;
          s__$1 = G__95842;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4868__auto___95843 = size;
      var i_95844 = 0;
      while (true) {
        if (i_95844 < n__4868__auto___95843) {
          a[i_95844] = init_val_or_seq;
          var G__95845 = i_95844 + 1;
          i_95844 = G__95845;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__95848 = i + 1;
          var G__95849 = cljs.core.next(s__$1);
          i = G__95848;
          s__$1 = G__95849;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4868__auto___95850 = size;
      var i_95851 = 0;
      while (true) {
        if (i_95851 < n__4868__auto___95850) {
          a[i_95851] = init_val_or_seq;
          var G__95852 = i_95851 + 1;
          i_95851 = G__95852;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
    } else {
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_(init_val_or_seq)) {
      var s = cljs.core.seq(init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first(s__$1);
          var G__95855 = i + 1;
          var G__95856 = cljs.core.next(s__$1);
          i = G__95855;
          s__$1 = G__95856;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4868__auto___95857 = size;
      var i_95858 = 0;
      while (true) {
        if (i_95858 < n__4868__auto___95857) {
          a[i_95858] = init_val_or_seq;
          var G__95859 = i_95858 + 1;
          i_95858 = G__95859;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__95860 = cljs.core.next(s__$1);
        var G__95861 = i - 1;
        var G__95862 = sum + 1;
        s__$1 = G__95860;
        i = G__95861;
        sum = G__95862;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq(x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_(s)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(s), concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
        } else {
          return cljs.core.cons(cljs.core.first(s), concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__95882__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq(xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
              return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cat(cljs.core.chunk_rest(xys__$1), zs__$1));
            } else {
              return cljs.core.cons(cljs.core.first(xys__$1), cat(cljs.core.rest(xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat(concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
    };
    var G__95882 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        var G__95883__i = 0, G__95883__a = new Array(arguments.length - 2);
        while (G__95883__i < G__95883__a.length) {
          G__95883__a[G__95883__i] = arguments[G__95883__i + 2];
          ++G__95883__i;
        }
        zs = new cljs.core.IndexedSeq(G__95883__a, 0);
      }
      return G__95882__delegate.call(this, x, y, zs);
    };
    G__95882.cljs$lang$maxFixedArity = 2;
    G__95882.cljs$lang$applyTo = function(arglist__95884) {
      var x = cljs.core.first(arglist__95884);
      arglist__95884 = cljs.core.next(arglist__95884);
      var y = cljs.core.first(arglist__95884);
      var zs = cljs.core.rest(arglist__95884);
      return G__95882__delegate(x, y, zs);
    };
    G__95882.cljs$core$IFn$_invoke$arity$variadic = G__95882__delegate;
    return G__95882;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        var G__95885 = null;
        if (arguments.length > 2) {
          var G__95886__i = 0, G__95886__a = new Array(arguments.length - 2);
          while (G__95886__i < G__95886__a.length) {
            G__95886__a[G__95886__i] = arguments[G__95886__i + 2];
            ++G__95886__i;
          }
          G__95885 = new cljs.core.IndexedSeq(G__95886__a, 0);
        }
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__95885);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq(args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons(a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons(a, cljs.core.cons(b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
  };
  var list_STAR___5 = function() {
    var G__95887__delegate = function(a, b, c, d, more) {
      return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
    };
    var G__95887 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__95888__i = 0, G__95888__a = new Array(arguments.length - 4);
        while (G__95888__i < G__95888__a.length) {
          G__95888__a[G__95888__i] = arguments[G__95888__i + 4];
          ++G__95888__i;
        }
        more = new cljs.core.IndexedSeq(G__95888__a, 0);
      }
      return G__95887__delegate.call(this, a, b, c, d, more);
    };
    G__95887.cljs$lang$maxFixedArity = 4;
    G__95887.cljs$lang$applyTo = function(arglist__95889) {
      var a = cljs.core.first(arglist__95889);
      arglist__95889 = cljs.core.next(arglist__95889);
      var b = cljs.core.first(arglist__95889);
      arglist__95889 = cljs.core.next(arglist__95889);
      var c = cljs.core.first(arglist__95889);
      arglist__95889 = cljs.core.next(arglist__95889);
      var d = cljs.core.first(arglist__95889);
      var more = cljs.core.rest(arglist__95889);
      return G__95887__delegate(a, b, c, d, more);
    };
    G__95887.cljs$core$IFn$_invoke$arity$variadic = G__95887__delegate;
    return G__95887;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        var G__95890 = null;
        if (arguments.length > 4) {
          var G__95891__i = 0, G__95891__a = new Array(arguments.length - 4);
          while (G__95891__i < G__95891__a.length) {
            G__95891__a[G__95891__i] = arguments[G__95891__i + 4];
            ++G__95891__i;
          }
          G__95890 = new cljs.core.IndexedSeq(G__95891__a, 0);
        }
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, G__95890);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_(tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__95892__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__95893 = ntcoll;
          var G__95894 = cljs.core.first(vals);
          var G__95895 = cljs.core.next(vals);
          tcoll = G__95893;
          val = G__95894;
          vals = G__95895;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__95892 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__95896__i = 0, G__95896__a = new Array(arguments.length - 2);
        while (G__95896__i < G__95896__a.length) {
          G__95896__a[G__95896__i] = arguments[G__95896__i + 2];
          ++G__95896__i;
        }
        vals = new cljs.core.IndexedSeq(G__95896__a, 0);
      }
      return G__95892__delegate.call(this, tcoll, val, vals);
    };
    G__95892.cljs$lang$maxFixedArity = 2;
    G__95892.cljs$lang$applyTo = function(arglist__95897) {
      var tcoll = cljs.core.first(arglist__95897);
      arglist__95897 = cljs.core.next(arglist__95897);
      var val = cljs.core.first(arglist__95897);
      var vals = cljs.core.rest(arglist__95897);
      return G__95892__delegate(tcoll, val, vals);
    };
    G__95892.cljs$core$IFn$_invoke$arity$variadic = G__95892__delegate;
    return G__95892;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        var G__95898 = null;
        if (arguments.length > 2) {
          var G__95899__i = 0, G__95899__a = new Array(arguments.length - 2);
          while (G__95899__i < G__95899__a.length) {
            G__95899__a[G__95899__i] = arguments[G__95899__i + 2];
            ++G__95899__i;
          }
          G__95898 = new cljs.core.IndexedSeq(G__95899__a, 0);
        }
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__95898);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_(tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__95900__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__95901 = ntcoll;
          var G__95902 = cljs.core.first(kvs);
          var G__95903 = cljs.core.second(kvs);
          var G__95904 = cljs.core.nnext(kvs);
          tcoll = G__95901;
          key = G__95902;
          val = G__95903;
          kvs = G__95904;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__95900 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        var G__95905__i = 0, G__95905__a = new Array(arguments.length - 3);
        while (G__95905__i < G__95905__a.length) {
          G__95905__a[G__95905__i] = arguments[G__95905__i + 3];
          ++G__95905__i;
        }
        kvs = new cljs.core.IndexedSeq(G__95905__a, 0);
      }
      return G__95900__delegate.call(this, tcoll, key, val, kvs);
    };
    G__95900.cljs$lang$maxFixedArity = 3;
    G__95900.cljs$lang$applyTo = function(arglist__95906) {
      var tcoll = cljs.core.first(arglist__95906);
      arglist__95906 = cljs.core.next(arglist__95906);
      var key = cljs.core.first(arglist__95906);
      arglist__95906 = cljs.core.next(arglist__95906);
      var val = cljs.core.first(arglist__95906);
      var kvs = cljs.core.rest(arglist__95906);
      return G__95900__delegate(tcoll, key, val, kvs);
    };
    G__95900.cljs$core$IFn$_invoke$arity$variadic = G__95900__delegate;
    return G__95900;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        var G__95907 = null;
        if (arguments.length > 3) {
          var G__95908__i = 0, G__95908__a = new Array(arguments.length - 3);
          while (G__95908__i < G__95908__a.length) {
            G__95908__a[G__95908__i] = arguments[G__95908__i + 3];
            ++G__95908__i;
          }
          G__95907 = new cljs.core.IndexedSeq(G__95908__a, 0);
        }
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, G__95907);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_(tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__95909__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__95910 = ntcoll;
          var G__95911 = cljs.core.first(ks);
          var G__95912 = cljs.core.next(ks);
          tcoll = G__95910;
          key = G__95911;
          ks = G__95912;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__95909 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        var G__95913__i = 0, G__95913__a = new Array(arguments.length - 2);
        while (G__95913__i < G__95913__a.length) {
          G__95913__a[G__95913__i] = arguments[G__95913__i + 2];
          ++G__95913__i;
        }
        ks = new cljs.core.IndexedSeq(G__95913__a, 0);
      }
      return G__95909__delegate.call(this, tcoll, key, ks);
    };
    G__95909.cljs$lang$maxFixedArity = 2;
    G__95909.cljs$lang$applyTo = function(arglist__95914) {
      var tcoll = cljs.core.first(arglist__95914);
      arglist__95914 = cljs.core.next(arglist__95914);
      var key = cljs.core.first(arglist__95914);
      var ks = cljs.core.rest(arglist__95914);
      return G__95909__delegate(tcoll, key, ks);
    };
    G__95909.cljs$core$IFn$_invoke$arity$variadic = G__95909__delegate;
    return G__95909;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        var G__95915 = null;
        if (arguments.length > 2) {
          var G__95916__i = 0, G__95916__a = new Array(arguments.length - 2);
          while (G__95916__i < G__95916__a.length) {
            G__95916__a[G__95916__i] = arguments[G__95916__i + 2];
            ++G__95916__i;
          }
          G__95915 = new cljs.core.IndexedSeq(G__95916__a, 0);
        }
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, G__95915);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_(tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__95917__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__95918 = ntcoll;
          var G__95919 = cljs.core.first(vals);
          var G__95920 = cljs.core.next(vals);
          tcoll = G__95918;
          val = G__95919;
          vals = G__95920;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__95917 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        var G__95921__i = 0, G__95921__a = new Array(arguments.length - 2);
        while (G__95921__i < G__95921__a.length) {
          G__95921__a[G__95921__i] = arguments[G__95921__i + 2];
          ++G__95921__i;
        }
        vals = new cljs.core.IndexedSeq(G__95921__a, 0);
      }
      return G__95917__delegate.call(this, tcoll, val, vals);
    };
    G__95917.cljs$lang$maxFixedArity = 2;
    G__95917.cljs$lang$applyTo = function(arglist__95922) {
      var tcoll = cljs.core.first(arglist__95922);
      arglist__95922 = cljs.core.next(arglist__95922);
      var val = cljs.core.first(arglist__95922);
      var vals = cljs.core.rest(arglist__95922);
      return G__95917__delegate(tcoll, val, vals);
    };
    G__95917.cljs$core$IFn$_invoke$arity$variadic = G__95917__delegate;
    return G__95917;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        var G__95923 = null;
        if (arguments.length > 2) {
          var G__95924__i = 0, G__95924__a = new Array(arguments.length - 2);
          while (G__95924__i < G__95924__a.length) {
            G__95924__a[G__95924__i] = arguments[G__95924__i + 2];
            ++G__95924__i;
          }
          G__95923 = new cljs.core.IndexedSeq(G__95924__a, 0);
        }
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, G__95923);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a4912 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4912);
      } else {
        var G__96135 = a4912;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96135) : f.call(null, G__96135);
      }
    } else {
      var b4913 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4912, b4913);
        } else {
          var G__96136 = a4912;
          var G__96137 = b4913;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96136, G__96137) : f.call(null, G__96136, G__96137);
        }
      } else {
        var c4914 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4912, b4913, c4914);
          } else {
            var G__96138 = a4912;
            var G__96139 = b4913;
            var G__96140 = c4914;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__96138, G__96139, G__96140) : f.call(null, G__96138, G__96139, G__96140);
          }
        } else {
          var d4915 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4912, b4913, c4914, d4915);
            } else {
              var G__96141 = a4912;
              var G__96142 = b4913;
              var G__96143 = c4914;
              var G__96144 = d4915;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__96141, G__96142, G__96143, G__96144) : f.call(null, G__96141, G__96142, G__96143, G__96144);
            }
          } else {
            var e4916 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4912, b4913, c4914, d4915, e4916);
              } else {
                var G__96145 = a4912;
                var G__96146 = b4913;
                var G__96147 = c4914;
                var G__96148 = d4915;
                var G__96149 = e4916;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__96145, G__96146, G__96147, G__96148, G__96149) : f.call(null, G__96145, G__96146, G__96147, G__96148, G__96149);
              }
            } else {
              var f4917 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4912, b4913, c4914, d4915, e4916, f4917);
                } else {
                  var G__96150 = a4912;
                  var G__96151 = b4913;
                  var G__96152 = c4914;
                  var G__96153 = d4915;
                  var G__96154 = e4916;
                  var G__96155 = f4917;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__96150, G__96151, G__96152, G__96153, G__96154, G__96155) : f.call(null, G__96150, G__96151, G__96152, G__96153, G__96154, G__96155);
                }
              } else {
                var g4918 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4912, b4913, c4914, d4915, e4916, f4917, g4918);
                  } else {
                    var G__96156 = a4912;
                    var G__96157 = b4913;
                    var G__96158 = c4914;
                    var G__96159 = d4915;
                    var G__96160 = e4916;
                    var G__96161 = f4917;
                    var G__96162 = g4918;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__96156, G__96157, G__96158, G__96159, G__96160, G__96161, G__96162) : f.call(null, G__96156, G__96157, G__96158, G__96159, G__96160, G__96161, G__96162);
                  }
                } else {
                  var h4919 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919);
                    } else {
                      var G__96163 = a4912;
                      var G__96164 = b4913;
                      var G__96165 = c4914;
                      var G__96166 = d4915;
                      var G__96167 = e4916;
                      var G__96168 = f4917;
                      var G__96169 = g4918;
                      var G__96170 = h4919;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__96163, G__96164, G__96165, G__96166, G__96167, G__96168, G__96169, G__96170) : f.call(null, G__96163, G__96164, G__96165, G__96166, G__96167, G__96168, G__96169, G__96170);
                    }
                  } else {
                    var i4920 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920);
                      } else {
                        var G__96171 = a4912;
                        var G__96172 = b4913;
                        var G__96173 = c4914;
                        var G__96174 = d4915;
                        var G__96175 = e4916;
                        var G__96176 = f4917;
                        var G__96177 = g4918;
                        var G__96178 = h4919;
                        var G__96179 = i4920;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__96171, G__96172, G__96173, G__96174, G__96175, G__96176, G__96177, G__96178, G__96179) : f.call(null, G__96171, G__96172, G__96173, G__96174, G__96175, G__96176, G__96177, G__96178, G__96179);
                      }
                    } else {
                      var j4921 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921);
                        } else {
                          var G__96180 = a4912;
                          var G__96181 = b4913;
                          var G__96182 = c4914;
                          var G__96183 = d4915;
                          var G__96184 = e4916;
                          var G__96185 = f4917;
                          var G__96186 = g4918;
                          var G__96187 = h4919;
                          var G__96188 = i4920;
                          var G__96189 = j4921;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__96180, G__96181, G__96182, G__96183, G__96184, G__96185, G__96186, G__96187, G__96188, G__96189) : f.call(null, G__96180, G__96181, G__96182, G__96183, G__96184, G__96185, G__96186, G__96187, G__96188, G__96189);
                        }
                      } else {
                        var k4922 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922);
                          } else {
                            var G__96190 = a4912;
                            var G__96191 = b4913;
                            var G__96192 = c4914;
                            var G__96193 = d4915;
                            var G__96194 = e4916;
                            var G__96195 = f4917;
                            var G__96196 = g4918;
                            var G__96197 = h4919;
                            var G__96198 = i4920;
                            var G__96199 = j4921;
                            var G__96200 = k4922;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__96190, G__96191, G__96192, G__96193, G__96194, G__96195, G__96196, G__96197, G__96198, G__96199, G__96200) : f.call(null, G__96190, G__96191, G__96192, G__96193, G__96194, G__96195, G__96196, G__96197, G__96198, G__96199, G__96200);
                          }
                        } else {
                          var l4923 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923);
                            } else {
                              var G__96201 = a4912;
                              var G__96202 = b4913;
                              var G__96203 = c4914;
                              var G__96204 = d4915;
                              var G__96205 = e4916;
                              var G__96206 = f4917;
                              var G__96207 = g4918;
                              var G__96208 = h4919;
                              var G__96209 = i4920;
                              var G__96210 = j4921;
                              var G__96211 = k4922;
                              var G__96212 = l4923;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__96201, G__96202, G__96203, G__96204, G__96205, G__96206, G__96207, G__96208, G__96209, G__96210, G__96211, G__96212) : f.call(null, G__96201, G__96202, G__96203, G__96204, G__96205, G__96206, G__96207, G__96208, G__96209, G__96210, G__96211, G__96212);
                            }
                          } else {
                            var m4924 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924);
                              } else {
                                var G__96213 = a4912;
                                var G__96214 = b4913;
                                var G__96215 = c4914;
                                var G__96216 = d4915;
                                var G__96217 = e4916;
                                var G__96218 = f4917;
                                var G__96219 = g4918;
                                var G__96220 = h4919;
                                var G__96221 = i4920;
                                var G__96222 = j4921;
                                var G__96223 = k4922;
                                var G__96224 = l4923;
                                var G__96225 = m4924;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__96213, G__96214, G__96215, G__96216, G__96217, G__96218, G__96219, G__96220, G__96221, G__96222, G__96223, G__96224, G__96225) : f.call(null, G__96213, G__96214, G__96215, G__96216, G__96217, G__96218, G__96219, G__96220, G__96221, G__96222, G__96223, G__96224, G__96225);
                              }
                            } else {
                              var n4925 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925);
                                } else {
                                  var G__96226 = a4912;
                                  var G__96227 = b4913;
                                  var G__96228 = c4914;
                                  var G__96229 = d4915;
                                  var G__96230 = e4916;
                                  var G__96231 = f4917;
                                  var G__96232 = g4918;
                                  var G__96233 = h4919;
                                  var G__96234 = i4920;
                                  var G__96235 = j4921;
                                  var G__96236 = k4922;
                                  var G__96237 = l4923;
                                  var G__96238 = m4924;
                                  var G__96239 = n4925;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__96226, G__96227, G__96228, G__96229, G__96230, G__96231, G__96232, G__96233, G__96234, G__96235, G__96236, G__96237, G__96238, G__96239) : f.call(null, G__96226, G__96227, G__96228, G__96229, G__96230, G__96231, G__96232, G__96233, G__96234, G__96235, G__96236, G__96237, G__96238, G__96239);
                                }
                              } else {
                                var o4926 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926);
                                  } else {
                                    var G__96240 = a4912;
                                    var G__96241 = b4913;
                                    var G__96242 = c4914;
                                    var G__96243 = d4915;
                                    var G__96244 = e4916;
                                    var G__96245 = f4917;
                                    var G__96246 = g4918;
                                    var G__96247 = h4919;
                                    var G__96248 = i4920;
                                    var G__96249 = j4921;
                                    var G__96250 = k4922;
                                    var G__96251 = l4923;
                                    var G__96252 = m4924;
                                    var G__96253 = n4925;
                                    var G__96254 = o4926;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__96240, G__96241, G__96242, G__96243, G__96244, G__96245, G__96246, G__96247, G__96248, G__96249, G__96250, G__96251, G__96252, G__96253, G__96254) : f.call(null, G__96240, G__96241, G__96242, G__96243, G__96244, G__96245, G__96246, G__96247, G__96248, G__96249, G__96250, G__96251, G__96252, G__96253, G__96254);
                                  }
                                } else {
                                  var p4927 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927);
                                    } else {
                                      var G__96255 = a4912;
                                      var G__96256 = b4913;
                                      var G__96257 = c4914;
                                      var G__96258 = d4915;
                                      var G__96259 = e4916;
                                      var G__96260 = f4917;
                                      var G__96261 = g4918;
                                      var G__96262 = h4919;
                                      var G__96263 = i4920;
                                      var G__96264 = j4921;
                                      var G__96265 = k4922;
                                      var G__96266 = l4923;
                                      var G__96267 = m4924;
                                      var G__96268 = n4925;
                                      var G__96269 = o4926;
                                      var G__96270 = p4927;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__96255, G__96256, G__96257, G__96258, G__96259, G__96260, G__96261, G__96262, G__96263, G__96264, G__96265, G__96266, G__96267, G__96268, G__96269, G__96270) : f.call(null, G__96255, G__96256, G__96257, G__96258, G__96259, G__96260, G__96261, G__96262, G__96263, G__96264, G__96265, G__96266, G__96267, G__96268, G__96269, G__96270);
                                    }
                                  } else {
                                    var q4928 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927, q4928);
                                      } else {
                                        var G__96271 = a4912;
                                        var G__96272 = b4913;
                                        var G__96273 = c4914;
                                        var G__96274 = d4915;
                                        var G__96275 = e4916;
                                        var G__96276 = f4917;
                                        var G__96277 = g4918;
                                        var G__96278 = h4919;
                                        var G__96279 = i4920;
                                        var G__96280 = j4921;
                                        var G__96281 = k4922;
                                        var G__96282 = l4923;
                                        var G__96283 = m4924;
                                        var G__96284 = n4925;
                                        var G__96285 = o4926;
                                        var G__96286 = p4927;
                                        var G__96287 = q4928;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__96271, G__96272, G__96273, G__96274, G__96275, G__96276, G__96277, G__96278, G__96279, G__96280, G__96281, G__96282, G__96283, G__96284, G__96285, G__96286, G__96287) : f.call(null, G__96271, G__96272, G__96273, G__96274, G__96275, G__96276, G__96277, G__96278, G__96279, G__96280, G__96281, G__96282, G__96283, G__96284, G__96285, G__96286, G__96287);
                                      }
                                    } else {
                                      var r4929 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927, q4928, r4929);
                                        } else {
                                          var G__96288 = a4912;
                                          var G__96289 = b4913;
                                          var G__96290 = c4914;
                                          var G__96291 = d4915;
                                          var G__96292 = e4916;
                                          var G__96293 = f4917;
                                          var G__96294 = g4918;
                                          var G__96295 = h4919;
                                          var G__96296 = i4920;
                                          var G__96297 = j4921;
                                          var G__96298 = k4922;
                                          var G__96299 = l4923;
                                          var G__96300 = m4924;
                                          var G__96301 = n4925;
                                          var G__96302 = o4926;
                                          var G__96303 = p4927;
                                          var G__96304 = q4928;
                                          var G__96305 = r4929;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__96288, G__96289, G__96290, G__96291, G__96292, G__96293, G__96294, G__96295, G__96296, G__96297, G__96298, G__96299, G__96300, G__96301, G__96302, G__96303, G__96304, G__96305) : f.call(null, G__96288, G__96289, G__96290, G__96291, G__96292, G__96293, G__96294, G__96295, G__96296, G__96297, G__96298, G__96299, G__96300, G__96301, G__96302, G__96303, G__96304, G__96305);
                                        }
                                      } else {
                                        var s4930 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927, q4928, r4929, s4930);
                                          } else {
                                            var G__96306 = a4912;
                                            var G__96307 = b4913;
                                            var G__96308 = c4914;
                                            var G__96309 = d4915;
                                            var G__96310 = e4916;
                                            var G__96311 = f4917;
                                            var G__96312 = g4918;
                                            var G__96313 = h4919;
                                            var G__96314 = i4920;
                                            var G__96315 = j4921;
                                            var G__96316 = k4922;
                                            var G__96317 = l4923;
                                            var G__96318 = m4924;
                                            var G__96319 = n4925;
                                            var G__96320 = o4926;
                                            var G__96321 = p4927;
                                            var G__96322 = q4928;
                                            var G__96323 = r4929;
                                            var G__96324 = s4930;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__96306, G__96307, G__96308, G__96309, G__96310, G__96311, G__96312, G__96313, G__96314, G__96315, G__96316, G__96317, G__96318, G__96319, G__96320, G__96321, G__96322, G__96323, G__96324) : f.call(null, G__96306, G__96307, G__96308, G__96309, G__96310, G__96311, G__96312, G__96313, G__96314, G__96315, G__96316, G__96317, G__96318, G__96319, G__96320, G__96321, G__96322, G__96323, 
                                            G__96324);
                                          }
                                        } else {
                                          var t4931 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4912, b4913, c4914, d4915, e4916, f4917, g4918, h4919, i4920, j4921, k4922, l4923, m4924, n4925, o4926, p4927, q4928, r4929, s4930, t4931);
                                            } else {
                                              var G__96325 = a4912;
                                              var G__96326 = b4913;
                                              var G__96327 = c4914;
                                              var G__96328 = d4915;
                                              var G__96329 = e4916;
                                              var G__96330 = f4917;
                                              var G__96331 = g4918;
                                              var G__96332 = h4919;
                                              var G__96333 = i4920;
                                              var G__96334 = j4921;
                                              var G__96335 = k4922;
                                              var G__96336 = l4923;
                                              var G__96337 = m4924;
                                              var G__96338 = n4925;
                                              var G__96339 = o4926;
                                              var G__96340 = p4927;
                                              var G__96341 = q4928;
                                              var G__96342 = r4929;
                                              var G__96343 = s4930;
                                              var G__96344 = t4931;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__96325, G__96326, G__96327, G__96328, G__96329, G__96330, G__96331, G__96332, G__96333, G__96334, G__96335, G__96336, G__96337, G__96338, G__96339, G__96340, G__96341, G__96342, G__96343, G__96344) : f.call(null, G__96325, G__96326, G__96327, G__96328, G__96329, G__96330, G__96331, G__96332, G__96333, G__96334, G__96335, G__96336, G__96337, G__96338, G__96339, G__96340, G__96341, 
                                              G__96342, G__96343, G__96344);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array(args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to(f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array(arglist));
    }
  };
  var apply__6 = function() {
    var G__96345__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to(f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array(arglist));
      }
    };
    var G__96345 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        var G__96346__i = 0, G__96346__a = new Array(arguments.length - 5);
        while (G__96346__i < G__96346__a.length) {
          G__96346__a[G__96346__i] = arguments[G__96346__i + 5];
          ++G__96346__i;
        }
        args = new cljs.core.IndexedSeq(G__96346__a, 0);
      }
      return G__96345__delegate.call(this, f, a, b, c, d, args);
    };
    G__96345.cljs$lang$maxFixedArity = 5;
    G__96345.cljs$lang$applyTo = function(arglist__96347) {
      var f = cljs.core.first(arglist__96347);
      arglist__96347 = cljs.core.next(arglist__96347);
      var a = cljs.core.first(arglist__96347);
      arglist__96347 = cljs.core.next(arglist__96347);
      var b = cljs.core.first(arglist__96347);
      arglist__96347 = cljs.core.next(arglist__96347);
      var c = cljs.core.first(arglist__96347);
      arglist__96347 = cljs.core.next(arglist__96347);
      var d = cljs.core.first(arglist__96347);
      var args = cljs.core.rest(arglist__96347);
      return G__96345__delegate(f, a, b, c, d, args);
    };
    G__96345.cljs$core$IFn$_invoke$arity$variadic = G__96345__delegate;
    return G__96345;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        var G__96348 = null;
        if (arguments.length > 5) {
          var G__96349__i = 0, G__96349__a = new Array(arguments.length - 5);
          while (G__96349__i < G__96349__a.length) {
            G__96349__a[G__96349__i] = arguments[G__96349__i + 5];
            ++G__96349__i;
          }
          G__96348 = new cljs.core.IndexedSeq(G__96349__a, 0);
        }
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, G__96348);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta(obj, function() {
      var G__96365 = cljs.core.meta(obj);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96365) : f.call(null, G__96365);
    }());
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta(obj, function() {
      var G__96366 = cljs.core.meta(obj);
      var G__96367 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96366, G__96367) : f.call(null, G__96366, G__96367);
    }());
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta(obj, function() {
      var G__96368 = cljs.core.meta(obj);
      var G__96369 = a;
      var G__96370 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__96368, G__96369, G__96370) : f.call(null, G__96368, G__96369, G__96370);
    }());
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta(obj, function() {
      var G__96371 = cljs.core.meta(obj);
      var G__96372 = a;
      var G__96373 = b;
      var G__96374 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__96371, G__96372, G__96373, G__96374) : f.call(null, G__96371, G__96372, G__96373, G__96374);
    }());
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta(obj, function() {
      var G__96375 = cljs.core.meta(obj);
      var G__96376 = a;
      var G__96377 = b;
      var G__96378 = c;
      var G__96379 = d;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__96375, G__96376, G__96377, G__96378, G__96379) : f.call(null, G__96375, G__96376, G__96377, G__96378, G__96379);
    }());
  };
  var vary_meta__7 = function() {
    var G__96380__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
    };
    var G__96380 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__96381__i = 0, G__96381__a = new Array(arguments.length - 6);
        while (G__96381__i < G__96381__a.length) {
          G__96381__a[G__96381__i] = arguments[G__96381__i + 6];
          ++G__96381__i;
        }
        args = new cljs.core.IndexedSeq(G__96381__a, 0);
      }
      return G__96380__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__96380.cljs$lang$maxFixedArity = 6;
    G__96380.cljs$lang$applyTo = function(arglist__96382) {
      var obj = cljs.core.first(arglist__96382);
      arglist__96382 = cljs.core.next(arglist__96382);
      var f = cljs.core.first(arglist__96382);
      arglist__96382 = cljs.core.next(arglist__96382);
      var a = cljs.core.first(arglist__96382);
      arglist__96382 = cljs.core.next(arglist__96382);
      var b = cljs.core.first(arglist__96382);
      arglist__96382 = cljs.core.next(arglist__96382);
      var c = cljs.core.first(arglist__96382);
      arglist__96382 = cljs.core.next(arglist__96382);
      var d = cljs.core.first(arglist__96382);
      var args = cljs.core.rest(arglist__96382);
      return G__96380__delegate(obj, f, a, b, c, d, args);
    };
    G__96380.cljs$core$IFn$_invoke$arity$variadic = G__96380__delegate;
    return G__96380;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        var G__96383 = null;
        if (arguments.length > 6) {
          var G__96384__i = 0, G__96384__a = new Array(arguments.length - 6);
          while (G__96384__i < G__96384__a.length) {
            G__96384__a[G__96384__i] = arguments[G__96384__i + 6];
            ++G__96384__i;
          }
          G__96383 = new cljs.core.IndexedSeq(G__96384__a, 0);
        }
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, G__96383);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
  };
  var not_EQ___3 = function() {
    var G__96385__delegate = function(x, y, more) {
      return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
    };
    var G__96385 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        var G__96386__i = 0, G__96386__a = new Array(arguments.length - 2);
        while (G__96386__i < G__96386__a.length) {
          G__96386__a[G__96386__i] = arguments[G__96386__i + 2];
          ++G__96386__i;
        }
        more = new cljs.core.IndexedSeq(G__96386__a, 0);
      }
      return G__96385__delegate.call(this, x, y, more);
    };
    G__96385.cljs$lang$maxFixedArity = 2;
    G__96385.cljs$lang$applyTo = function(arglist__96387) {
      var x = cljs.core.first(arglist__96387);
      arglist__96387 = cljs.core.next(arglist__96387);
      var y = cljs.core.first(arglist__96387);
      var more = cljs.core.rest(arglist__96387);
      return G__96385__delegate(x, y, more);
    };
    G__96385.cljs$core$IFn$_invoke$arity$variadic = G__96385__delegate;
    return G__96385;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        var G__96388 = null;
        if (arguments.length > 2) {
          var G__96389__i = 0, G__96389__a = new Array(arguments.length - 2);
          while (G__96389__i < G__96389__a.length) {
            G__96389__a[G__96389__i] = arguments[G__96389__i + 2];
            ++G__96389__i;
          }
          G__96388 = new cljs.core.IndexedSeq(G__96389__a, 0);
        }
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__96388);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t96393 !== "undefined") {
  } else {
    cljs.core.t96393 = function(nil_iter, meta96394) {
      this.nil_iter = nil_iter;
      this.meta96394 = meta96394;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t96393.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t96393.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t96393.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t96393.prototype.cljs$core$IMeta$_meta$arity$1 = function(_96395) {
      var self__ = this;
      var _96395__$1 = this;
      return self__.meta96394;
    };
    cljs.core.t96393.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_96395, meta96394__$1) {
      var self__ = this;
      var _96395__$1 = this;
      return new cljs.core.t96393(self__.nil_iter, meta96394__$1);
    };
    cljs.core.t96393.cljs$lang$type = true;
    cljs.core.t96393.cljs$lang$ctorStr = "cljs.core/t96393";
    cljs.core.t96393.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write(writer__4569__auto__, "cljs.core/t96393");
    };
    cljs.core.__GT_t96393 = function __GT_t96393(nil_iter__$1, meta96394) {
      return new cljs.core.t96393(nil_iter__$1, meta96394);
    };
  }
  return new cljs.core.t96393(nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = !(lt.stepper == null);
      if (and__3969__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3969__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__96396 = lt;
        var G__96397 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__96396, G__96397) : self__.xform.call(null, G__96396, G__96397);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__96398 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__96398) : self__.xform.call(null, G__96398);
  }
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__96400 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__96400) : xform.call(null, G__96400);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__96402 = cljs.core.next(iters__$1);
        iters__$1 = G__96402;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4868__auto___96403 = self__.iters.length;
  var i_96404 = 0;
  while (true) {
    if (i_96404 < n__4868__auto___96403) {
      self__.nexts[i_96404] = self__.iters[i_96404].next();
      var G__96405 = i_96404 + 1;
      i_96404 = G__96405;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = !(lt.stepper == null);
      if (and__3969__auto__) {
        return this$.hasNext();
      } else {
        return and__3969__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__96401 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__96401) : self__.xform.call(null, G__96401);
  }
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer(lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(function() {
      var G__96410 = stepfn;
      return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__96410) : xform.call(null, G__96410);
    }(), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__96411_96415 = cljs.core.seq(colls);
  var chunk__96412_96416 = null;
  var count__96413_96417 = 0;
  var i__96414_96418 = 0;
  while (true) {
    if (i__96414_96418 < count__96413_96417) {
      var coll_96419 = chunk__96412_96416.cljs$core$IIndexed$_nth$arity$2(null, i__96414_96418);
      iters.push(cljs.core.iter(coll_96419));
      var G__96420 = seq__96411_96415;
      var G__96421 = chunk__96412_96416;
      var G__96422 = count__96413_96417;
      var G__96423 = i__96414_96418 + 1;
      seq__96411_96415 = G__96420;
      chunk__96412_96416 = G__96421;
      count__96413_96417 = G__96422;
      i__96414_96418 = G__96423;
      continue;
    } else {
      var temp__4126__auto___96424 = cljs.core.seq(seq__96411_96415);
      if (temp__4126__auto___96424) {
        var seq__96411_96425__$1 = temp__4126__auto___96424;
        if (cljs.core.chunked_seq_QMARK_(seq__96411_96425__$1)) {
          var c__4768__auto___96426 = cljs.core.chunk_first(seq__96411_96425__$1);
          var G__96427 = cljs.core.chunk_rest(seq__96411_96425__$1);
          var G__96428 = c__4768__auto___96426;
          var G__96429 = cljs.core.count(c__4768__auto___96426);
          var G__96430 = 0;
          seq__96411_96415 = G__96427;
          chunk__96412_96416 = G__96428;
          count__96413_96417 = G__96429;
          i__96414_96418 = G__96430;
          continue;
        } else {
          var coll_96431 = cljs.core.first(seq__96411_96425__$1);
          iters.push(cljs.core.iter(coll_96431));
          var G__96432 = cljs.core.next(seq__96411_96425__$1);
          var G__96433 = null;
          var G__96434 = 0;
          var G__96435 = 0;
          seq__96411_96415 = G__96432;
          chunk__96412_96416 = G__96433;
          count__96413_96417 = G__96434;
          i__96414_96418 = G__96435;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_(coll)) {
      return coll;
    } else {
      var or__3981__auto__ = cljs.core.seq(coll);
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__96436__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
    };
    var G__96436 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__96437__i = 0, G__96437__a = new Array(arguments.length - 2);
        while (G__96437__i < G__96437__a.length) {
          G__96437__a[G__96437__i] = arguments[G__96437__i + 2];
          ++G__96437__i;
        }
        colls = new cljs.core.IndexedSeq(G__96437__a, 0);
      }
      return G__96436__delegate.call(this, xform, coll, colls);
    };
    G__96436.cljs$lang$maxFixedArity = 2;
    G__96436.cljs$lang$applyTo = function(arglist__96438) {
      var xform = cljs.core.first(arglist__96438);
      arglist__96438 = cljs.core.next(arglist__96438);
      var coll = cljs.core.first(arglist__96438);
      var colls = cljs.core.rest(arglist__96438);
      return G__96436__delegate(xform, coll, colls);
    };
    G__96436.cljs$core$IFn$_invoke$arity$variadic = G__96436__delegate;
    return G__96436;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        var G__96439 = null;
        if (arguments.length > 2) {
          var G__96440__i = 0, G__96440__a = new Array(arguments.length - 2);
          while (G__96440__i < G__96440__a.length) {
            G__96440__a[G__96440__i] = arguments[G__96440__i + 2];
            ++G__96440__i;
          }
          G__96439 = new cljs.core.IndexedSeq(G__96440__a, 0);
        }
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, G__96439);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__96442 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__96442) : pred.call(null, G__96442);
      }())) {
        var G__96443 = pred;
        var G__96444 = cljs.core.next(coll);
        pred = G__96443;
        coll = G__96444;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__3981__auto__ = function() {
        var G__96448 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__96448) : pred.call(null, G__96448);
      }();
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        var G__96449 = pred;
        var G__96450 = cljs.core.next(coll);
        pred = G__96449;
        coll = G__96450;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_(n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__96457 = null;
    var G__96457__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__96457__1 = function(x) {
      return cljs.core.not(function() {
        var G__96454 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96454) : f.call(null, G__96454);
      }());
    };
    var G__96457__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__96455 = x;
        var G__96456 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96455, G__96456) : f.call(null, G__96455, G__96456);
      }());
    };
    var G__96457__3 = function() {
      var G__96458__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__96458 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__96459__i = 0, G__96459__a = new Array(arguments.length - 2);
          while (G__96459__i < G__96459__a.length) {
            G__96459__a[G__96459__i] = arguments[G__96459__i + 2];
            ++G__96459__i;
          }
          zs = new cljs.core.IndexedSeq(G__96459__a, 0);
        }
        return G__96458__delegate.call(this, x, y, zs);
      };
      G__96458.cljs$lang$maxFixedArity = 2;
      G__96458.cljs$lang$applyTo = function(arglist__96460) {
        var x = cljs.core.first(arglist__96460);
        arglist__96460 = cljs.core.next(arglist__96460);
        var y = cljs.core.first(arglist__96460);
        var zs = cljs.core.rest(arglist__96460);
        return G__96458__delegate(x, y, zs);
      };
      G__96458.cljs$core$IFn$_invoke$arity$variadic = G__96458__delegate;
      return G__96458;
    }();
    G__96457 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__96457__0.call(this);
        case 1:
          return G__96457__1.call(this, x);
        case 2:
          return G__96457__2.call(this, x, y);
        default:
          var G__96461 = null;
          if (arguments.length > 2) {
            var G__96462__i = 0, G__96462__a = new Array(arguments.length - 2);
            while (G__96462__i < G__96462__a.length) {
              G__96462__a[G__96462__i] = arguments[G__96462__i + 2];
              ++G__96462__i;
            }
            G__96461 = new cljs.core.IndexedSeq(G__96462__a, 0);
          }
          return G__96457__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__96461);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__96457.cljs$lang$maxFixedArity = 2;
    G__96457.cljs$lang$applyTo = G__96457__3.cljs$lang$applyTo;
    G__96457.cljs$core$IFn$_invoke$arity$0 = G__96457__0;
    G__96457.cljs$core$IFn$_invoke$arity$1 = G__96457__1;
    G__96457.cljs$core$IFn$_invoke$arity$2 = G__96457__2;
    G__96457.cljs$core$IFn$_invoke$arity$variadic = G__96457__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__96457;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__96463__delegate = function(args) {
      return x;
    };
    var G__96463 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__96464__i = 0, G__96464__a = new Array(arguments.length - 0);
        while (G__96464__i < G__96464__a.length) {
          G__96464__a[G__96464__i] = arguments[G__96464__i + 0];
          ++G__96464__i;
        }
        args = new cljs.core.IndexedSeq(G__96464__a, 0);
      }
      return G__96463__delegate.call(this, args);
    };
    G__96463.cljs$lang$maxFixedArity = 0;
    G__96463.cljs$lang$applyTo = function(arglist__96465) {
      var args = cljs.core.seq(arglist__96465);
      return G__96463__delegate(args);
    };
    G__96463.cljs$core$IFn$_invoke$arity$variadic = G__96463__delegate;
    return G__96463;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__96520 = null;
      var G__96520__0 = function() {
        var G__96493 = function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96493) : f.call(null, G__96493);
      };
      var G__96520__1 = function(x) {
        var G__96494 = function() {
          var G__96495 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__96495) : g.call(null, G__96495);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96494) : f.call(null, G__96494);
      };
      var G__96520__2 = function(x, y) {
        var G__96496 = function() {
          var G__96497 = x;
          var G__96498 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__96497, G__96498) : g.call(null, G__96497, G__96498);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96496) : f.call(null, G__96496);
      };
      var G__96520__3 = function(x, y, z) {
        var G__96499 = function() {
          var G__96500 = x;
          var G__96501 = y;
          var G__96502 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__96500, G__96501, G__96502) : g.call(null, G__96500, G__96501, G__96502);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96499) : f.call(null, G__96499);
      };
      var G__96520__4 = function() {
        var G__96521__delegate = function(x, y, z, args) {
          var G__96503 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96503) : f.call(null, G__96503);
        };
        var G__96521 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__96522__i = 0, G__96522__a = new Array(arguments.length - 3);
            while (G__96522__i < G__96522__a.length) {
              G__96522__a[G__96522__i] = arguments[G__96522__i + 3];
              ++G__96522__i;
            }
            args = new cljs.core.IndexedSeq(G__96522__a, 0);
          }
          return G__96521__delegate.call(this, x, y, z, args);
        };
        G__96521.cljs$lang$maxFixedArity = 3;
        G__96521.cljs$lang$applyTo = function(arglist__96523) {
          var x = cljs.core.first(arglist__96523);
          arglist__96523 = cljs.core.next(arglist__96523);
          var y = cljs.core.first(arglist__96523);
          arglist__96523 = cljs.core.next(arglist__96523);
          var z = cljs.core.first(arglist__96523);
          var args = cljs.core.rest(arglist__96523);
          return G__96521__delegate(x, y, z, args);
        };
        G__96521.cljs$core$IFn$_invoke$arity$variadic = G__96521__delegate;
        return G__96521;
      }();
      G__96520 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__96520__0.call(this);
          case 1:
            return G__96520__1.call(this, x);
          case 2:
            return G__96520__2.call(this, x, y);
          case 3:
            return G__96520__3.call(this, x, y, z);
          default:
            var G__96524 = null;
            if (arguments.length > 3) {
              var G__96525__i = 0, G__96525__a = new Array(arguments.length - 3);
              while (G__96525__i < G__96525__a.length) {
                G__96525__a[G__96525__i] = arguments[G__96525__i + 3];
                ++G__96525__i;
              }
              G__96524 = new cljs.core.IndexedSeq(G__96525__a, 0);
            }
            return G__96520__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__96524);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__96520.cljs$lang$maxFixedArity = 3;
      G__96520.cljs$lang$applyTo = G__96520__4.cljs$lang$applyTo;
      G__96520.cljs$core$IFn$_invoke$arity$0 = G__96520__0;
      G__96520.cljs$core$IFn$_invoke$arity$1 = G__96520__1;
      G__96520.cljs$core$IFn$_invoke$arity$2 = G__96520__2;
      G__96520.cljs$core$IFn$_invoke$arity$3 = G__96520__3;
      G__96520.cljs$core$IFn$_invoke$arity$variadic = G__96520__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__96520;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__96526 = null;
      var G__96526__0 = function() {
        var G__96504 = function() {
          var G__96505 = function() {
            return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__96505) : g.call(null, G__96505);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96504) : f.call(null, G__96504);
      };
      var G__96526__1 = function(x) {
        var G__96506 = function() {
          var G__96507 = function() {
            var G__96508 = x;
            return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__96508) : h.call(null, G__96508);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__96507) : g.call(null, G__96507);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96506) : f.call(null, G__96506);
      };
      var G__96526__2 = function(x, y) {
        var G__96509 = function() {
          var G__96510 = function() {
            var G__96511 = x;
            var G__96512 = y;
            return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__96511, G__96512) : h.call(null, G__96511, G__96512);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__96510) : g.call(null, G__96510);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96509) : f.call(null, G__96509);
      };
      var G__96526__3 = function(x, y, z) {
        var G__96513 = function() {
          var G__96514 = function() {
            var G__96515 = x;
            var G__96516 = y;
            var G__96517 = z;
            return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__96515, G__96516, G__96517) : h.call(null, G__96515, G__96516, G__96517);
          }();
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__96514) : g.call(null, G__96514);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96513) : f.call(null, G__96513);
      };
      var G__96526__4 = function() {
        var G__96527__delegate = function(x, y, z, args) {
          var G__96518 = function() {
            var G__96519 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
            return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__96519) : g.call(null, G__96519);
          }();
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96518) : f.call(null, G__96518);
        };
        var G__96527 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__96528__i = 0, G__96528__a = new Array(arguments.length - 3);
            while (G__96528__i < G__96528__a.length) {
              G__96528__a[G__96528__i] = arguments[G__96528__i + 3];
              ++G__96528__i;
            }
            args = new cljs.core.IndexedSeq(G__96528__a, 0);
          }
          return G__96527__delegate.call(this, x, y, z, args);
        };
        G__96527.cljs$lang$maxFixedArity = 3;
        G__96527.cljs$lang$applyTo = function(arglist__96529) {
          var x = cljs.core.first(arglist__96529);
          arglist__96529 = cljs.core.next(arglist__96529);
          var y = cljs.core.first(arglist__96529);
          arglist__96529 = cljs.core.next(arglist__96529);
          var z = cljs.core.first(arglist__96529);
          var args = cljs.core.rest(arglist__96529);
          return G__96527__delegate(x, y, z, args);
        };
        G__96527.cljs$core$IFn$_invoke$arity$variadic = G__96527__delegate;
        return G__96527;
      }();
      G__96526 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__96526__0.call(this);
          case 1:
            return G__96526__1.call(this, x);
          case 2:
            return G__96526__2.call(this, x, y);
          case 3:
            return G__96526__3.call(this, x, y, z);
          default:
            var G__96530 = null;
            if (arguments.length > 3) {
              var G__96531__i = 0, G__96531__a = new Array(arguments.length - 3);
              while (G__96531__i < G__96531__a.length) {
                G__96531__a[G__96531__i] = arguments[G__96531__i + 3];
                ++G__96531__i;
              }
              G__96530 = new cljs.core.IndexedSeq(G__96531__a, 0);
            }
            return G__96526__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__96530);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__96526.cljs$lang$maxFixedArity = 3;
      G__96526.cljs$lang$applyTo = G__96526__4.cljs$lang$applyTo;
      G__96526.cljs$core$IFn$_invoke$arity$0 = G__96526__0;
      G__96526.cljs$core$IFn$_invoke$arity$1 = G__96526__1;
      G__96526.cljs$core$IFn$_invoke$arity$2 = G__96526__2;
      G__96526.cljs$core$IFn$_invoke$arity$3 = G__96526__3;
      G__96526.cljs$core$IFn$_invoke$arity$variadic = G__96526__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__96526;
    }();
  };
  var comp__4 = function() {
    var G__96532__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__96533__delegate = function(args) {
            var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
            var fs__$2 = cljs.core.next(fs__$1);
            while (true) {
              if (fs__$2) {
                var G__96534 = cljs.core.first(fs__$2).call(null, ret);
                var G__96535 = cljs.core.next(fs__$2);
                ret = G__96534;
                fs__$2 = G__96535;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__96533 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              var G__96536__i = 0, G__96536__a = new Array(arguments.length - 0);
              while (G__96536__i < G__96536__a.length) {
                G__96536__a[G__96536__i] = arguments[G__96536__i + 0];
                ++G__96536__i;
              }
              args = new cljs.core.IndexedSeq(G__96536__a, 0);
            }
            return G__96533__delegate.call(this, args);
          };
          G__96533.cljs$lang$maxFixedArity = 0;
          G__96533.cljs$lang$applyTo = function(arglist__96537) {
            var args = cljs.core.seq(arglist__96537);
            return G__96533__delegate(args);
          };
          G__96533.cljs$core$IFn$_invoke$arity$variadic = G__96533__delegate;
          return G__96533;
        }();
      }(fs__$1);
    };
    var G__96532 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__96538__i = 0, G__96538__a = new Array(arguments.length - 3);
        while (G__96538__i < G__96538__a.length) {
          G__96538__a[G__96538__i] = arguments[G__96538__i + 3];
          ++G__96538__i;
        }
        fs = new cljs.core.IndexedSeq(G__96538__a, 0);
      }
      return G__96532__delegate.call(this, f1, f2, f3, fs);
    };
    G__96532.cljs$lang$maxFixedArity = 3;
    G__96532.cljs$lang$applyTo = function(arglist__96539) {
      var f1 = cljs.core.first(arglist__96539);
      arglist__96539 = cljs.core.next(arglist__96539);
      var f2 = cljs.core.first(arglist__96539);
      arglist__96539 = cljs.core.next(arglist__96539);
      var f3 = cljs.core.first(arglist__96539);
      var fs = cljs.core.rest(arglist__96539);
      return G__96532__delegate(f1, f2, f3, fs);
    };
    G__96532.cljs$core$IFn$_invoke$arity$variadic = G__96532__delegate;
    return G__96532;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        var G__96540 = null;
        if (arguments.length > 3) {
          var G__96541__i = 0, G__96541__a = new Array(arguments.length - 3);
          while (G__96541__i < G__96541__a.length) {
            G__96541__a[G__96541__i] = arguments[G__96541__i + 3];
            ++G__96541__i;
          }
          G__96540 = new cljs.core.IndexedSeq(G__96541__a, 0);
        }
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, G__96540);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__96626 = null;
      var G__96626__0 = function() {
        var G__96584 = arg1;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96584) : f.call(null, G__96584);
      };
      var G__96626__1 = function(x) {
        var G__96585 = arg1;
        var G__96586 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96585, G__96586) : f.call(null, G__96585, G__96586);
      };
      var G__96626__2 = function(x, y) {
        var G__96587 = arg1;
        var G__96588 = x;
        var G__96589 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__96587, G__96588, G__96589) : f.call(null, G__96587, G__96588, G__96589);
      };
      var G__96626__3 = function(x, y, z) {
        var G__96590 = arg1;
        var G__96591 = x;
        var G__96592 = y;
        var G__96593 = z;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__96590, G__96591, G__96592, G__96593) : f.call(null, G__96590, G__96591, G__96592, G__96593);
      };
      var G__96626__4 = function() {
        var G__96627__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
        };
        var G__96627 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__96628__i = 0, G__96628__a = new Array(arguments.length - 3);
            while (G__96628__i < G__96628__a.length) {
              G__96628__a[G__96628__i] = arguments[G__96628__i + 3];
              ++G__96628__i;
            }
            args = new cljs.core.IndexedSeq(G__96628__a, 0);
          }
          return G__96627__delegate.call(this, x, y, z, args);
        };
        G__96627.cljs$lang$maxFixedArity = 3;
        G__96627.cljs$lang$applyTo = function(arglist__96629) {
          var x = cljs.core.first(arglist__96629);
          arglist__96629 = cljs.core.next(arglist__96629);
          var y = cljs.core.first(arglist__96629);
          arglist__96629 = cljs.core.next(arglist__96629);
          var z = cljs.core.first(arglist__96629);
          var args = cljs.core.rest(arglist__96629);
          return G__96627__delegate(x, y, z, args);
        };
        G__96627.cljs$core$IFn$_invoke$arity$variadic = G__96627__delegate;
        return G__96627;
      }();
      G__96626 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__96626__0.call(this);
          case 1:
            return G__96626__1.call(this, x);
          case 2:
            return G__96626__2.call(this, x, y);
          case 3:
            return G__96626__3.call(this, x, y, z);
          default:
            var G__96630 = null;
            if (arguments.length > 3) {
              var G__96631__i = 0, G__96631__a = new Array(arguments.length - 3);
              while (G__96631__i < G__96631__a.length) {
                G__96631__a[G__96631__i] = arguments[G__96631__i + 3];
                ++G__96631__i;
              }
              G__96630 = new cljs.core.IndexedSeq(G__96631__a, 0);
            }
            return G__96626__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__96630);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__96626.cljs$lang$maxFixedArity = 3;
      G__96626.cljs$lang$applyTo = G__96626__4.cljs$lang$applyTo;
      G__96626.cljs$core$IFn$_invoke$arity$0 = G__96626__0;
      G__96626.cljs$core$IFn$_invoke$arity$1 = G__96626__1;
      G__96626.cljs$core$IFn$_invoke$arity$2 = G__96626__2;
      G__96626.cljs$core$IFn$_invoke$arity$3 = G__96626__3;
      G__96626.cljs$core$IFn$_invoke$arity$variadic = G__96626__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__96626;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__96632 = null;
      var G__96632__0 = function() {
        var G__96594 = arg1;
        var G__96595 = arg2;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96594, G__96595) : f.call(null, G__96594, G__96595);
      };
      var G__96632__1 = function(x) {
        var G__96596 = arg1;
        var G__96597 = arg2;
        var G__96598 = x;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__96596, G__96597, G__96598) : f.call(null, G__96596, G__96597, G__96598);
      };
      var G__96632__2 = function(x, y) {
        var G__96599 = arg1;
        var G__96600 = arg2;
        var G__96601 = x;
        var G__96602 = y;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__96599, G__96600, G__96601, G__96602) : f.call(null, G__96599, G__96600, G__96601, G__96602);
      };
      var G__96632__3 = function(x, y, z) {
        var G__96603 = arg1;
        var G__96604 = arg2;
        var G__96605 = x;
        var G__96606 = y;
        var G__96607 = z;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__96603, G__96604, G__96605, G__96606, G__96607) : f.call(null, G__96603, G__96604, G__96605, G__96606, G__96607);
      };
      var G__96632__4 = function() {
        var G__96633__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
        };
        var G__96633 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__96634__i = 0, G__96634__a = new Array(arguments.length - 3);
            while (G__96634__i < G__96634__a.length) {
              G__96634__a[G__96634__i] = arguments[G__96634__i + 3];
              ++G__96634__i;
            }
            args = new cljs.core.IndexedSeq(G__96634__a, 0);
          }
          return G__96633__delegate.call(this, x, y, z, args);
        };
        G__96633.cljs$lang$maxFixedArity = 3;
        G__96633.cljs$lang$applyTo = function(arglist__96635) {
          var x = cljs.core.first(arglist__96635);
          arglist__96635 = cljs.core.next(arglist__96635);
          var y = cljs.core.first(arglist__96635);
          arglist__96635 = cljs.core.next(arglist__96635);
          var z = cljs.core.first(arglist__96635);
          var args = cljs.core.rest(arglist__96635);
          return G__96633__delegate(x, y, z, args);
        };
        G__96633.cljs$core$IFn$_invoke$arity$variadic = G__96633__delegate;
        return G__96633;
      }();
      G__96632 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__96632__0.call(this);
          case 1:
            return G__96632__1.call(this, x);
          case 2:
            return G__96632__2.call(this, x, y);
          case 3:
            return G__96632__3.call(this, x, y, z);
          default:
            var G__96636 = null;
            if (arguments.length > 3) {
              var G__96637__i = 0, G__96637__a = new Array(arguments.length - 3);
              while (G__96637__i < G__96637__a.length) {
                G__96637__a[G__96637__i] = arguments[G__96637__i + 3];
                ++G__96637__i;
              }
              G__96636 = new cljs.core.IndexedSeq(G__96637__a, 0);
            }
            return G__96632__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__96636);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__96632.cljs$lang$maxFixedArity = 3;
      G__96632.cljs$lang$applyTo = G__96632__4.cljs$lang$applyTo;
      G__96632.cljs$core$IFn$_invoke$arity$0 = G__96632__0;
      G__96632.cljs$core$IFn$_invoke$arity$1 = G__96632__1;
      G__96632.cljs$core$IFn$_invoke$arity$2 = G__96632__2;
      G__96632.cljs$core$IFn$_invoke$arity$3 = G__96632__3;
      G__96632.cljs$core$IFn$_invoke$arity$variadic = G__96632__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__96632;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__96638 = null;
      var G__96638__0 = function() {
        var G__96608 = arg1;
        var G__96609 = arg2;
        var G__96610 = arg3;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__96608, G__96609, G__96610) : f.call(null, G__96608, G__96609, G__96610);
      };
      var G__96638__1 = function(x) {
        var G__96611 = arg1;
        var G__96612 = arg2;
        var G__96613 = arg3;
        var G__96614 = x;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__96611, G__96612, G__96613, G__96614) : f.call(null, G__96611, G__96612, G__96613, G__96614);
      };
      var G__96638__2 = function(x, y) {
        var G__96615 = arg1;
        var G__96616 = arg2;
        var G__96617 = arg3;
        var G__96618 = x;
        var G__96619 = y;
        return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__96615, G__96616, G__96617, G__96618, G__96619) : f.call(null, G__96615, G__96616, G__96617, G__96618, G__96619);
      };
      var G__96638__3 = function(x, y, z) {
        var G__96620 = arg1;
        var G__96621 = arg2;
        var G__96622 = arg3;
        var G__96623 = x;
        var G__96624 = y;
        var G__96625 = z;
        return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__96620, G__96621, G__96622, G__96623, G__96624, G__96625) : f.call(null, G__96620, G__96621, G__96622, G__96623, G__96624, G__96625);
      };
      var G__96638__4 = function() {
        var G__96639__delegate = function(x, y, z, args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
        };
        var G__96639 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__96640__i = 0, G__96640__a = new Array(arguments.length - 3);
            while (G__96640__i < G__96640__a.length) {
              G__96640__a[G__96640__i] = arguments[G__96640__i + 3];
              ++G__96640__i;
            }
            args = new cljs.core.IndexedSeq(G__96640__a, 0);
          }
          return G__96639__delegate.call(this, x, y, z, args);
        };
        G__96639.cljs$lang$maxFixedArity = 3;
        G__96639.cljs$lang$applyTo = function(arglist__96641) {
          var x = cljs.core.first(arglist__96641);
          arglist__96641 = cljs.core.next(arglist__96641);
          var y = cljs.core.first(arglist__96641);
          arglist__96641 = cljs.core.next(arglist__96641);
          var z = cljs.core.first(arglist__96641);
          var args = cljs.core.rest(arglist__96641);
          return G__96639__delegate(x, y, z, args);
        };
        G__96639.cljs$core$IFn$_invoke$arity$variadic = G__96639__delegate;
        return G__96639;
      }();
      G__96638 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__96638__0.call(this);
          case 1:
            return G__96638__1.call(this, x);
          case 2:
            return G__96638__2.call(this, x, y);
          case 3:
            return G__96638__3.call(this, x, y, z);
          default:
            var G__96642 = null;
            if (arguments.length > 3) {
              var G__96643__i = 0, G__96643__a = new Array(arguments.length - 3);
              while (G__96643__i < G__96643__a.length) {
                G__96643__a[G__96643__i] = arguments[G__96643__i + 3];
                ++G__96643__i;
              }
              G__96642 = new cljs.core.IndexedSeq(G__96643__a, 0);
            }
            return G__96638__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__96642);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__96638.cljs$lang$maxFixedArity = 3;
      G__96638.cljs$lang$applyTo = G__96638__4.cljs$lang$applyTo;
      G__96638.cljs$core$IFn$_invoke$arity$0 = G__96638__0;
      G__96638.cljs$core$IFn$_invoke$arity$1 = G__96638__1;
      G__96638.cljs$core$IFn$_invoke$arity$2 = G__96638__2;
      G__96638.cljs$core$IFn$_invoke$arity$3 = G__96638__3;
      G__96638.cljs$core$IFn$_invoke$arity$variadic = G__96638__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__96638;
    }();
  };
  var partial__5 = function() {
    var G__96644__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__96645__delegate = function(args) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
        };
        var G__96645 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            var G__96646__i = 0, G__96646__a = new Array(arguments.length - 0);
            while (G__96646__i < G__96646__a.length) {
              G__96646__a[G__96646__i] = arguments[G__96646__i + 0];
              ++G__96646__i;
            }
            args = new cljs.core.IndexedSeq(G__96646__a, 0);
          }
          return G__96645__delegate.call(this, args);
        };
        G__96645.cljs$lang$maxFixedArity = 0;
        G__96645.cljs$lang$applyTo = function(arglist__96647) {
          var args = cljs.core.seq(arglist__96647);
          return G__96645__delegate(args);
        };
        G__96645.cljs$core$IFn$_invoke$arity$variadic = G__96645__delegate;
        return G__96645;
      }();
    };
    var G__96644 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__96648__i = 0, G__96648__a = new Array(arguments.length - 4);
        while (G__96648__i < G__96648__a.length) {
          G__96648__a[G__96648__i] = arguments[G__96648__i + 4];
          ++G__96648__i;
        }
        more = new cljs.core.IndexedSeq(G__96648__a, 0);
      }
      return G__96644__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__96644.cljs$lang$maxFixedArity = 4;
    G__96644.cljs$lang$applyTo = function(arglist__96649) {
      var f = cljs.core.first(arglist__96649);
      arglist__96649 = cljs.core.next(arglist__96649);
      var arg1 = cljs.core.first(arglist__96649);
      arglist__96649 = cljs.core.next(arglist__96649);
      var arg2 = cljs.core.first(arglist__96649);
      arglist__96649 = cljs.core.next(arglist__96649);
      var arg3 = cljs.core.first(arglist__96649);
      var more = cljs.core.rest(arglist__96649);
      return G__96644__delegate(f, arg1, arg2, arg3, more);
    };
    G__96644.cljs$core$IFn$_invoke$arity$variadic = G__96644__delegate;
    return G__96644;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        var G__96650 = null;
        if (arguments.length > 4) {
          var G__96651__i = 0, G__96651__a = new Array(arguments.length - 4);
          while (G__96651__i < G__96651__a.length) {
            G__96651__a[G__96651__i] = arguments[G__96651__i + 4];
            ++G__96651__i;
          }
          G__96650 = new cljs.core.IndexedSeq(G__96651__a, 0);
        }
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, G__96650);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__96684 = null;
      var G__96684__1 = function(a) {
        var G__96668 = a == null ? x : a;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96668) : f.call(null, G__96668);
      };
      var G__96684__2 = function(a, b) {
        var G__96669 = a == null ? x : a;
        var G__96670 = b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96669, G__96670) : f.call(null, G__96669, G__96670);
      };
      var G__96684__3 = function(a, b, c) {
        var G__96671 = a == null ? x : a;
        var G__96672 = b;
        var G__96673 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__96671, G__96672, G__96673) : f.call(null, G__96671, G__96672, G__96673);
      };
      var G__96684__4 = function() {
        var G__96685__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
        };
        var G__96685 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__96686__i = 0, G__96686__a = new Array(arguments.length - 3);
            while (G__96686__i < G__96686__a.length) {
              G__96686__a[G__96686__i] = arguments[G__96686__i + 3];
              ++G__96686__i;
            }
            ds = new cljs.core.IndexedSeq(G__96686__a, 0);
          }
          return G__96685__delegate.call(this, a, b, c, ds);
        };
        G__96685.cljs$lang$maxFixedArity = 3;
        G__96685.cljs$lang$applyTo = function(arglist__96687) {
          var a = cljs.core.first(arglist__96687);
          arglist__96687 = cljs.core.next(arglist__96687);
          var b = cljs.core.first(arglist__96687);
          arglist__96687 = cljs.core.next(arglist__96687);
          var c = cljs.core.first(arglist__96687);
          var ds = cljs.core.rest(arglist__96687);
          return G__96685__delegate(a, b, c, ds);
        };
        G__96685.cljs$core$IFn$_invoke$arity$variadic = G__96685__delegate;
        return G__96685;
      }();
      G__96684 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__96684__1.call(this, a);
          case 2:
            return G__96684__2.call(this, a, b);
          case 3:
            return G__96684__3.call(this, a, b, c);
          default:
            var G__96688 = null;
            if (arguments.length > 3) {
              var G__96689__i = 0, G__96689__a = new Array(arguments.length - 3);
              while (G__96689__i < G__96689__a.length) {
                G__96689__a[G__96689__i] = arguments[G__96689__i + 3];
                ++G__96689__i;
              }
              G__96688 = new cljs.core.IndexedSeq(G__96689__a, 0);
            }
            return G__96684__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__96688);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__96684.cljs$lang$maxFixedArity = 3;
      G__96684.cljs$lang$applyTo = G__96684__4.cljs$lang$applyTo;
      G__96684.cljs$core$IFn$_invoke$arity$1 = G__96684__1;
      G__96684.cljs$core$IFn$_invoke$arity$2 = G__96684__2;
      G__96684.cljs$core$IFn$_invoke$arity$3 = G__96684__3;
      G__96684.cljs$core$IFn$_invoke$arity$variadic = G__96684__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__96684;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__96690 = null;
      var G__96690__2 = function(a, b) {
        var G__96674 = a == null ? x : a;
        var G__96675 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96674, G__96675) : f.call(null, G__96674, G__96675);
      };
      var G__96690__3 = function(a, b, c) {
        var G__96676 = a == null ? x : a;
        var G__96677 = b == null ? y : b;
        var G__96678 = c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__96676, G__96677, G__96678) : f.call(null, G__96676, G__96677, G__96678);
      };
      var G__96690__4 = function() {
        var G__96691__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__96691 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__96692__i = 0, G__96692__a = new Array(arguments.length - 3);
            while (G__96692__i < G__96692__a.length) {
              G__96692__a[G__96692__i] = arguments[G__96692__i + 3];
              ++G__96692__i;
            }
            ds = new cljs.core.IndexedSeq(G__96692__a, 0);
          }
          return G__96691__delegate.call(this, a, b, c, ds);
        };
        G__96691.cljs$lang$maxFixedArity = 3;
        G__96691.cljs$lang$applyTo = function(arglist__96693) {
          var a = cljs.core.first(arglist__96693);
          arglist__96693 = cljs.core.next(arglist__96693);
          var b = cljs.core.first(arglist__96693);
          arglist__96693 = cljs.core.next(arglist__96693);
          var c = cljs.core.first(arglist__96693);
          var ds = cljs.core.rest(arglist__96693);
          return G__96691__delegate(a, b, c, ds);
        };
        G__96691.cljs$core$IFn$_invoke$arity$variadic = G__96691__delegate;
        return G__96691;
      }();
      G__96690 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__96690__2.call(this, a, b);
          case 3:
            return G__96690__3.call(this, a, b, c);
          default:
            var G__96694 = null;
            if (arguments.length > 3) {
              var G__96695__i = 0, G__96695__a = new Array(arguments.length - 3);
              while (G__96695__i < G__96695__a.length) {
                G__96695__a[G__96695__i] = arguments[G__96695__i + 3];
                ++G__96695__i;
              }
              G__96694 = new cljs.core.IndexedSeq(G__96695__a, 0);
            }
            return G__96690__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__96694);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__96690.cljs$lang$maxFixedArity = 3;
      G__96690.cljs$lang$applyTo = G__96690__4.cljs$lang$applyTo;
      G__96690.cljs$core$IFn$_invoke$arity$2 = G__96690__2;
      G__96690.cljs$core$IFn$_invoke$arity$3 = G__96690__3;
      G__96690.cljs$core$IFn$_invoke$arity$variadic = G__96690__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__96690;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__96696 = null;
      var G__96696__2 = function(a, b) {
        var G__96679 = a == null ? x : a;
        var G__96680 = b == null ? y : b;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96679, G__96680) : f.call(null, G__96679, G__96680);
      };
      var G__96696__3 = function(a, b, c) {
        var G__96681 = a == null ? x : a;
        var G__96682 = b == null ? y : b;
        var G__96683 = c == null ? z : c;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__96681, G__96682, G__96683) : f.call(null, G__96681, G__96682, G__96683);
      };
      var G__96696__4 = function() {
        var G__96697__delegate = function(a, b, c, ds) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__96697 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            var G__96698__i = 0, G__96698__a = new Array(arguments.length - 3);
            while (G__96698__i < G__96698__a.length) {
              G__96698__a[G__96698__i] = arguments[G__96698__i + 3];
              ++G__96698__i;
            }
            ds = new cljs.core.IndexedSeq(G__96698__a, 0);
          }
          return G__96697__delegate.call(this, a, b, c, ds);
        };
        G__96697.cljs$lang$maxFixedArity = 3;
        G__96697.cljs$lang$applyTo = function(arglist__96699) {
          var a = cljs.core.first(arglist__96699);
          arglist__96699 = cljs.core.next(arglist__96699);
          var b = cljs.core.first(arglist__96699);
          arglist__96699 = cljs.core.next(arglist__96699);
          var c = cljs.core.first(arglist__96699);
          var ds = cljs.core.rest(arglist__96699);
          return G__96697__delegate(a, b, c, ds);
        };
        G__96697.cljs$core$IFn$_invoke$arity$variadic = G__96697__delegate;
        return G__96697;
      }();
      G__96696 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__96696__2.call(this, a, b);
          case 3:
            return G__96696__3.call(this, a, b, c);
          default:
            var G__96700 = null;
            if (arguments.length > 3) {
              var G__96701__i = 0, G__96701__a = new Array(arguments.length - 3);
              while (G__96701__i < G__96701__a.length) {
                G__96701__a[G__96701__i] = arguments[G__96701__i + 3];
                ++G__96701__i;
              }
              G__96700 = new cljs.core.IndexedSeq(G__96701__a, 0);
            }
            return G__96696__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__96700);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__96696.cljs$lang$maxFixedArity = 3;
      G__96696.cljs$lang$applyTo = G__96696__4.cljs$lang$applyTo;
      G__96696.cljs$core$IFn$_invoke$arity$2 = G__96696__2;
      G__96696.cljs$core$IFn$_invoke$arity$3 = G__96696__3;
      G__96696.cljs$core$IFn$_invoke$arity$variadic = G__96696__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__96696;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function() {
  var map_indexed = null;
  var map_indexed__1 = function(f) {
    return function(rf) {
      var i = function() {
        var G__96732 = -1;
        return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__96732) : cljs.core.volatile_BANG_.call(null, G__96732);
      }();
      return function(i) {
        return function() {
          var G__96762 = null;
          var G__96762__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__96762__1 = function(result) {
            var G__96733 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__96733) : rf.call(null, G__96733);
          };
          var G__96762__2 = function(result, input) {
            var G__96734 = result;
            var G__96735 = function() {
              var G__96736 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
              var G__96737 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96736, G__96737) : f.call(null, G__96736, G__96737);
            }();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__96734, G__96735) : rf.call(null, G__96734, G__96735);
          };
          G__96762 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__96762__0.call(this);
              case 1:
                return G__96762__1.call(this, result);
              case 2:
                return G__96762__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__96762.cljs$core$IFn$_invoke$arity$0 = G__96762__0;
          G__96762.cljs$core$IFn$_invoke$arity$1 = G__96762__1;
          G__96762.cljs$core$IFn$_invoke$arity$2 = G__96762__2;
          return G__96762;
        }();
      }(i);
    };
  };
  var map_indexed__2 = function(f, coll) {
    var mapi = function mapi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__4868__auto___96763 = size;
            var i_96764 = 0;
            while (true) {
              if (i_96764 < n__4868__auto___96763) {
                cljs.core.chunk_append(b, function() {
                  var G__96758 = idx + i_96764;
                  var G__96759 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_96764);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96758, G__96759) : f.call(null, G__96758, G__96759);
                }());
                var G__96765 = i_96764 + 1;
                i_96764 = G__96765;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), mapi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            return cljs.core.cons(function() {
              var G__96760 = idx;
              var G__96761 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96760, G__96761) : f.call(null, G__96760, G__96761);
            }(), mapi(idx + 1, cljs.core.rest(s)));
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return mapi(0, coll);
  };
  map_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return map_indexed__1.call(this, f);
      case 2:
        return map_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map_indexed.cljs$core$IFn$_invoke$arity$1 = map_indexed__1;
  map_indexed.cljs$core$IFn$_invoke$arity$2 = map_indexed__2;
  return map_indexed;
}();
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__96784 = null;
        var G__96784__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__96784__1 = function(result) {
          var G__96778 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__96778) : rf.call(null, G__96778);
        };
        var G__96784__2 = function(result, input) {
          var v = function() {
            var G__96779 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96779) : f.call(null, G__96779);
          }();
          if (v == null) {
            return result;
          } else {
            var G__96780 = result;
            var G__96781 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__96780, G__96781) : rf.call(null, G__96780, G__96781);
          }
        };
        G__96784 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__96784__0.call(this);
            case 1:
              return G__96784__1.call(this, result);
            case 2:
              return G__96784__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__96784.cljs$core$IFn$_invoke$arity$0 = G__96784__0;
        G__96784.cljs$core$IFn$_invoke$arity$1 = G__96784__1;
        G__96784.cljs$core$IFn$_invoke$arity$2 = G__96784__2;
        return G__96784;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4868__auto___96785 = size;
          var i_96786 = 0;
          while (true) {
            if (i_96786 < n__4868__auto___96785) {
              var x_96787 = function() {
                var G__96782 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_96786);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96782) : f.call(null, G__96782);
              }();
              if (x_96787 == null) {
              } else {
                cljs.core.chunk_append(b, x_96787);
              }
              var G__96788 = i_96786 + 1;
              i_96786 = G__96788;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__96783 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96783) : f.call(null, G__96783);
          }();
          if (x == null) {
            return keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__96789 = this$__$1;
  return goog.getUid(G__96789);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__96790 = cljs.core.seq(self__.watches);
  var chunk__96791 = null;
  var count__96792 = 0;
  var i__96793 = 0;
  while (true) {
    if (i__96793 < count__96792) {
      var vec__96794 = chunk__96791.cljs$core$IIndexed$_nth$arity$2(null, i__96793);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__96794, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__96794, 1, null);
      var G__96795_96804 = key;
      var G__96796_96805 = this$__$1;
      var G__96797_96806 = oldval;
      var G__96798_96807 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__96795_96804, G__96796_96805, G__96797_96806, G__96798_96807) : f.call(null, G__96795_96804, G__96796_96805, G__96797_96806, G__96798_96807);
      var G__96808 = seq__96790;
      var G__96809 = chunk__96791;
      var G__96810 = count__96792;
      var G__96811 = i__96793 + 1;
      seq__96790 = G__96808;
      chunk__96791 = G__96809;
      count__96792 = G__96810;
      i__96793 = G__96811;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__96790);
      if (temp__4126__auto__) {
        var seq__96790__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__96790__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__96790__$1);
          var G__96812 = cljs.core.chunk_rest(seq__96790__$1);
          var G__96813 = c__4768__auto__;
          var G__96814 = cljs.core.count(c__4768__auto__);
          var G__96815 = 0;
          seq__96790 = G__96812;
          chunk__96791 = G__96813;
          count__96792 = G__96814;
          i__96793 = G__96815;
          continue;
        } else {
          var vec__96799 = cljs.core.first(seq__96790__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__96799, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__96799, 1, null);
          var G__96800_96816 = key;
          var G__96801_96817 = this$__$1;
          var G__96802_96818 = oldval;
          var G__96803_96819 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__96800_96816, G__96801_96817, G__96802_96818, G__96803_96819) : f.call(null, G__96800_96816, G__96801_96817, G__96802_96818, G__96803_96819);
          var G__96820 = cljs.core.next(seq__96790__$1);
          var G__96821 = null;
          var G__96822 = 0;
          var G__96823 = 0;
          seq__96790 = G__96820;
          chunk__96791 = G__96821;
          count__96792 = G__96822;
          i__96793 = G__96823;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__96827__delegate = function(x, p__96824) {
      var map__96826 = p__96824;
      var map__96826__$1 = cljs.core.seq_QMARK_(map__96826) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__96826) : map__96826;
      var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__96826__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__96826__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__96827 = function(x, var_args) {
      var p__96824 = null;
      if (arguments.length > 1) {
        var G__96828__i = 0, G__96828__a = new Array(arguments.length - 1);
        while (G__96828__i < G__96828__a.length) {
          G__96828__a[G__96828__i] = arguments[G__96828__i + 1];
          ++G__96828__i;
        }
        p__96824 = new cljs.core.IndexedSeq(G__96828__a, 0);
      }
      return G__96827__delegate.call(this, x, p__96824);
    };
    G__96827.cljs$lang$maxFixedArity = 1;
    G__96827.cljs$lang$applyTo = function(arglist__96829) {
      var x = cljs.core.first(arglist__96829);
      var p__96824 = cljs.core.rest(arglist__96829);
      return G__96827__delegate(x, p__96824);
    };
    G__96827.cljs$core$IFn$_invoke$arity$variadic = G__96827__delegate;
    return G__96827;
  }();
  atom = function(x, var_args) {
    var p__96824 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        var G__96830 = null;
        if (arguments.length > 1) {
          var G__96831__i = 0, G__96831__a = new Array(arguments.length - 1);
          while (G__96831__i < G__96831__a.length) {
            G__96831__a[G__96831__i] = arguments[G__96831__i + 1];
            ++G__96831__i;
          }
          G__96830 = new cljs.core.IndexedSeq(G__96831__a, 0);
        }
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, G__96830);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__96834 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__96834) : validate.call(null, G__96834);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__96835 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__96835) : cljs.core.pr_str.call(null, G__96835);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__96842 = a.state;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__96842) : f.call(null, G__96842);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__96843 = a.state;
        var G__96844 = x;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96843, G__96844) : f.call(null, G__96843, G__96844);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_(a, function() {
        var G__96845 = a.state;
        var G__96846 = x;
        var G__96847 = y;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__96845, G__96846, G__96847) : f.call(null, G__96845, G__96846, G__96847);
      }());
    } else {
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__96848__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
      }
    };
    var G__96848 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        var G__96849__i = 0, G__96849__a = new Array(arguments.length - 4);
        while (G__96849__i < G__96849__a.length) {
          G__96849__a[G__96849__i] = arguments[G__96849__i + 4];
          ++G__96849__i;
        }
        more = new cljs.core.IndexedSeq(G__96849__a, 0);
      }
      return G__96848__delegate.call(this, a, f, x, y, more);
    };
    G__96848.cljs$lang$maxFixedArity = 4;
    G__96848.cljs$lang$applyTo = function(arglist__96850) {
      var a = cljs.core.first(arglist__96850);
      arglist__96850 = cljs.core.next(arglist__96850);
      var f = cljs.core.first(arglist__96850);
      arglist__96850 = cljs.core.next(arglist__96850);
      var x = cljs.core.first(arglist__96850);
      arglist__96850 = cljs.core.next(arglist__96850);
      var y = cljs.core.first(arglist__96850);
      var more = cljs.core.rest(arglist__96850);
      return G__96848__delegate(a, f, x, y, more);
    };
    G__96848.cljs$core$IFn$_invoke$arity$variadic = G__96848__delegate;
    return G__96848;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        var G__96851 = null;
        if (arguments.length > 4) {
          var G__96852__i = 0, G__96852__a = new Array(arguments.length - 4);
          while (G__96852__i < G__96852__a.length) {
            G__96852__a[G__96852__i] = arguments[G__96852__i + 4];
            ++G__96852__i;
          }
          G__96851 = new cljs.core.IndexedSeq(G__96852__a, 0);
        }
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, G__96851);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function __GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__96919 = null;
          var G__96919__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__96919__1 = function(result) {
            var G__96886 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__96886) : rf.call(null, G__96886);
          };
          var G__96919__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            var v = function() {
              var G__96887 = i;
              var G__96888 = input;
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96887, G__96888) : f.call(null, G__96887, G__96888);
            }();
            if (v == null) {
              return result;
            } else {
              var G__96889 = result;
              var G__96890 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__96889, G__96890) : rf.call(null, G__96889, G__96890);
            }
          };
          G__96919 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__96919__0.call(this);
              case 1:
                return G__96919__1.call(this, result);
              case 2:
                return G__96919__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__96919.cljs$core$IFn$_invoke$arity$0 = G__96919__0;
          G__96919.cljs$core$IFn$_invoke$arity$1 = G__96919__1;
          G__96919.cljs$core$IFn$_invoke$arity$2 = G__96919__2;
          return G__96919;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq(coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(s)) {
            var c = cljs.core.chunk_first(s);
            var size = cljs.core.count(c);
            var b = cljs.core.chunk_buffer(size);
            var n__4868__auto___96920 = size;
            var i_96921 = 0;
            while (true) {
              if (i_96921 < n__4868__auto___96920) {
                var x_96922 = function() {
                  var G__96915 = idx + i_96921;
                  var G__96916 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_96921);
                  return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96915, G__96916) : f.call(null, G__96915, G__96916);
                }();
                if (x_96922 == null) {
                } else {
                  cljs.core.chunk_append(b, x_96922);
                }
                var G__96923 = i_96921 + 1;
                i_96921 = G__96923;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons(cljs.core.chunk(b), keepi(idx + size, cljs.core.chunk_rest(s)));
          } else {
            var x = function() {
              var G__96917 = idx;
              var G__96918 = cljs.core.first(s);
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__96917, G__96918) : f.call(null, G__96917, G__96918);
            }();
            if (x == null) {
              return keepi(idx + 1, cljs.core.rest(s));
            } else {
              return cljs.core.cons(x, keepi(idx + 1, cljs.core.rest(s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi(0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$(function() {
          var G__97137 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__97137) : p.call(null, G__97137);
        }());
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__97139 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__97139) : p.call(null, G__97139);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var G__97140 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__97140) : p.call(null, G__97140);
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__97142 = x;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__97142) : p.call(null, G__97142);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__97144 = y;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__97144) : p.call(null, G__97144);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var G__97145 = z;
              return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__97145) : p.call(null, G__97145);
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__97314__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep1.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(p, args));
        };
        var G__97314 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__97315__i = 0, G__97315__a = new Array(arguments.length - 3);
            while (G__97315__i < G__97315__a.length) {
              G__97315__a[G__97315__i] = arguments[G__97315__i + 3];
              ++G__97315__i;
            }
            args = new cljs.core.IndexedSeq(G__97315__a, 0);
          }
          return G__97314__delegate.call(this, x, y, z, args);
        };
        G__97314.cljs$lang$maxFixedArity = 3;
        G__97314.cljs$lang$applyTo = function(arglist__97316) {
          var x = cljs.core.first(arglist__97316);
          arglist__97316 = cljs.core.next(arglist__97316);
          var y = cljs.core.first(arglist__97316);
          arglist__97316 = cljs.core.next(arglist__97316);
          var z = cljs.core.first(arglist__97316);
          var args = cljs.core.rest(arglist__97316);
          return G__97314__delegate(x, y, z, args);
        };
        G__97314.cljs$core$IFn$_invoke$arity$variadic = G__97314__delegate;
        return G__97314;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            var G__97317 = null;
            if (arguments.length > 3) {
              var G__97318__i = 0, G__97318__a = new Array(arguments.length - 3);
              while (G__97318__i < G__97318__a.length) {
                G__97318__a[G__97318__i] = arguments[G__97318__i + 3];
                ++G__97318__i;
              }
              G__97317 = new cljs.core.IndexedSeq(G__97318__a, 0);
            }
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__97317);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__97177 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97177) : p1.call(null, G__97177);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var G__97178 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97178) : p2.call(null, G__97178);
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__97180 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97180) : p1.call(null, G__97180);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__97182 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97182) : p1.call(null, G__97182);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var and__3969__auto____$2 = function() {
                var G__97184 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97184) : p2.call(null, G__97184);
              }();
              if (cljs.core.truth_(and__3969__auto____$2)) {
                var G__97185 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97185) : p2.call(null, G__97185);
              } else {
                return and__3969__auto____$2;
              }
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__97187 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97187) : p1.call(null, G__97187);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__97189 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97189) : p1.call(null, G__97189);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var and__3969__auto____$2 = function() {
                var G__97191 = z;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97191) : p1.call(null, G__97191);
              }();
              if (cljs.core.truth_(and__3969__auto____$2)) {
                var and__3969__auto____$3 = function() {
                  var G__97193 = x;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97193) : p2.call(null, G__97193);
                }();
                if (cljs.core.truth_(and__3969__auto____$3)) {
                  var and__3969__auto____$4 = function() {
                    var G__97195 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97195) : p2.call(null, G__97195);
                  }();
                  if (cljs.core.truth_(and__3969__auto____$4)) {
                    var G__97196 = z;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97196) : p2.call(null, G__97196);
                  } else {
                    return and__3969__auto____$4;
                  }
                } else {
                  return and__3969__auto____$3;
                }
              } else {
                return and__3969__auto____$2;
              }
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__97319__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep2.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__96924_SHARP_) {
            var and__3969__auto__ = function() {
              var G__97201 = p1__96924_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97201) : p1.call(null, G__97201);
            }();
            if (cljs.core.truth_(and__3969__auto__)) {
              var G__97202 = p1__96924_SHARP_;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97202) : p2.call(null, G__97202);
            } else {
              return and__3969__auto__;
            }
          }, args));
        };
        var G__97319 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__97320__i = 0, G__97320__a = new Array(arguments.length - 3);
            while (G__97320__i < G__97320__a.length) {
              G__97320__a[G__97320__i] = arguments[G__97320__i + 3];
              ++G__97320__i;
            }
            args = new cljs.core.IndexedSeq(G__97320__a, 0);
          }
          return G__97319__delegate.call(this, x, y, z, args);
        };
        G__97319.cljs$lang$maxFixedArity = 3;
        G__97319.cljs$lang$applyTo = function(arglist__97321) {
          var x = cljs.core.first(arglist__97321);
          arglist__97321 = cljs.core.next(arglist__97321);
          var y = cljs.core.first(arglist__97321);
          arglist__97321 = cljs.core.next(arglist__97321);
          var z = cljs.core.first(arglist__97321);
          var args = cljs.core.rest(arglist__97321);
          return G__97319__delegate(x, y, z, args);
        };
        G__97319.cljs$core$IFn$_invoke$arity$variadic = G__97319__delegate;
        return G__97319;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            var G__97322 = null;
            if (arguments.length > 3) {
              var G__97323__i = 0, G__97323__a = new Array(arguments.length - 3);
              while (G__97323__i < G__97323__a.length) {
                G__97323__a[G__97323__i] = arguments[G__97323__i + 3];
                ++G__97323__i;
              }
              G__97322 = new cljs.core.IndexedSeq(G__97323__a, 0);
            }
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__97322);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__97248 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97248) : p1.call(null, G__97248);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__97250 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97250) : p2.call(null, G__97250);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var G__97251 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__97251) : p3.call(null, G__97251);
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__97253 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97253) : p1.call(null, G__97253);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__97255 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97255) : p2.call(null, G__97255);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var and__3969__auto____$2 = function() {
                var G__97257 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__97257) : p3.call(null, G__97257);
              }();
              if (cljs.core.truth_(and__3969__auto____$2)) {
                var and__3969__auto____$3 = function() {
                  var G__97259 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97259) : p1.call(null, G__97259);
                }();
                if (cljs.core.truth_(and__3969__auto____$3)) {
                  var and__3969__auto____$4 = function() {
                    var G__97261 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97261) : p2.call(null, G__97261);
                  }();
                  if (cljs.core.truth_(and__3969__auto____$4)) {
                    var G__97262 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__97262) : p3.call(null, G__97262);
                  } else {
                    return and__3969__auto____$4;
                  }
                } else {
                  return and__3969__auto____$3;
                }
              } else {
                return and__3969__auto____$2;
              }
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$(function() {
          var and__3969__auto__ = function() {
            var G__97264 = x;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97264) : p1.call(null, G__97264);
          }();
          if (cljs.core.truth_(and__3969__auto__)) {
            var and__3969__auto____$1 = function() {
              var G__97266 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97266) : p2.call(null, G__97266);
            }();
            if (cljs.core.truth_(and__3969__auto____$1)) {
              var and__3969__auto____$2 = function() {
                var G__97268 = x;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__97268) : p3.call(null, G__97268);
              }();
              if (cljs.core.truth_(and__3969__auto____$2)) {
                var and__3969__auto____$3 = function() {
                  var G__97270 = y;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97270) : p1.call(null, G__97270);
                }();
                if (cljs.core.truth_(and__3969__auto____$3)) {
                  var and__3969__auto____$4 = function() {
                    var G__97272 = y;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97272) : p2.call(null, G__97272);
                  }();
                  if (cljs.core.truth_(and__3969__auto____$4)) {
                    var and__3969__auto____$5 = function() {
                      var G__97274 = y;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__97274) : p3.call(null, G__97274);
                    }();
                    if (cljs.core.truth_(and__3969__auto____$5)) {
                      var and__3969__auto____$6 = function() {
                        var G__97276 = z;
                        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97276) : p1.call(null, G__97276);
                      }();
                      if (cljs.core.truth_(and__3969__auto____$6)) {
                        var and__3969__auto____$7 = function() {
                          var G__97278 = z;
                          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97278) : p2.call(null, G__97278);
                        }();
                        if (cljs.core.truth_(and__3969__auto____$7)) {
                          var G__97279 = z;
                          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__97279) : p3.call(null, G__97279);
                        } else {
                          return and__3969__auto____$7;
                        }
                      } else {
                        return and__3969__auto____$6;
                      }
                    } else {
                      return and__3969__auto____$5;
                    }
                  } else {
                    return and__3969__auto____$4;
                  }
                } else {
                  return and__3969__auto____$3;
                }
              } else {
                return and__3969__auto____$2;
              }
            } else {
              return and__3969__auto____$1;
            }
          } else {
            return and__3969__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__97324__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(ep3.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(p1__96925_SHARP_) {
            var and__3969__auto__ = function() {
              var G__97286 = p1__96925_SHARP_;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97286) : p1.call(null, G__97286);
            }();
            if (cljs.core.truth_(and__3969__auto__)) {
              var and__3969__auto____$1 = function() {
                var G__97288 = p1__96925_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97288) : p2.call(null, G__97288);
              }();
              if (cljs.core.truth_(and__3969__auto____$1)) {
                var G__97289 = p1__96925_SHARP_;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__97289) : p3.call(null, G__97289);
              } else {
                return and__3969__auto____$1;
              }
            } else {
              return and__3969__auto__;
            }
          }, args));
        };
        var G__97324 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__97325__i = 0, G__97325__a = new Array(arguments.length - 3);
            while (G__97325__i < G__97325__a.length) {
              G__97325__a[G__97325__i] = arguments[G__97325__i + 3];
              ++G__97325__i;
            }
            args = new cljs.core.IndexedSeq(G__97325__a, 0);
          }
          return G__97324__delegate.call(this, x, y, z, args);
        };
        G__97324.cljs$lang$maxFixedArity = 3;
        G__97324.cljs$lang$applyTo = function(arglist__97326) {
          var x = cljs.core.first(arglist__97326);
          arglist__97326 = cljs.core.next(arglist__97326);
          var y = cljs.core.first(arglist__97326);
          arglist__97326 = cljs.core.next(arglist__97326);
          var z = cljs.core.first(arglist__97326);
          var args = cljs.core.rest(arglist__97326);
          return G__97324__delegate(x, y, z, args);
        };
        G__97324.cljs$core$IFn$_invoke$arity$variadic = G__97324__delegate;
        return G__97324;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            var G__97327 = null;
            if (arguments.length > 3) {
              var G__97328__i = 0, G__97328__a = new Array(arguments.length - 3);
              while (G__97328__i < G__97328__a.length) {
                G__97328__a[G__97328__i] = arguments[G__97328__i + 3];
                ++G__97328__i;
              }
              G__97327 = new cljs.core.IndexedSeq(G__97328__a, 0);
            }
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__97327);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__97329__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__96926_SHARP_) {
                var G__97305 = x;
                return p1__96926_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__96926_SHARP_.cljs$core$IFn$_invoke$arity$1(G__97305) : p1__96926_SHARP_.call(null, G__97305);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__96927_SHARP_) {
                var and__3969__auto__ = function() {
                  var G__97307 = x;
                  return p1__96927_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__96927_SHARP_.cljs$core$IFn$_invoke$arity$1(G__97307) : p1__96927_SHARP_.call(null, G__97307);
                }();
                if (cljs.core.truth_(and__3969__auto__)) {
                  var G__97308 = y;
                  return p1__96927_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__96927_SHARP_.cljs$core$IFn$_invoke$arity$1(G__97308) : p1__96927_SHARP_.call(null, G__97308);
                } else {
                  return and__3969__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_(function(ps__$1) {
              return function(p1__96928_SHARP_) {
                var and__3969__auto__ = function() {
                  var G__97310 = x;
                  return p1__96928_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__96928_SHARP_.cljs$core$IFn$_invoke$arity$1(G__97310) : p1__96928_SHARP_.call(null, G__97310);
                }();
                if (cljs.core.truth_(and__3969__auto__)) {
                  var and__3969__auto____$1 = function() {
                    var G__97312 = y;
                    return p1__96928_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__96928_SHARP_.cljs$core$IFn$_invoke$arity$1(G__97312) : p1__96928_SHARP_.call(null, G__97312);
                  }();
                  if (cljs.core.truth_(and__3969__auto____$1)) {
                    var G__97313 = z;
                    return p1__96928_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__96928_SHARP_.cljs$core$IFn$_invoke$arity$1(G__97313) : p1__96928_SHARP_.call(null, G__97313);
                  } else {
                    return and__3969__auto____$1;
                  }
                } else {
                  return and__3969__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__97330__delegate = function(x, y, z, args) {
              return cljs.core.boolean$(epn.cljs$core$IFn$_invoke$arity$3(x, y, z) && cljs.core.every_QMARK_(function(ps__$1) {
                return function(p1__96929_SHARP_) {
                  return cljs.core.every_QMARK_(p1__96929_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__97330 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__97331__i = 0, G__97331__a = new Array(arguments.length - 3);
                while (G__97331__i < G__97331__a.length) {
                  G__97331__a[G__97331__i] = arguments[G__97331__i + 3];
                  ++G__97331__i;
                }
                args = new cljs.core.IndexedSeq(G__97331__a, 0);
              }
              return G__97330__delegate.call(this, x, y, z, args);
            };
            G__97330.cljs$lang$maxFixedArity = 3;
            G__97330.cljs$lang$applyTo = function(arglist__97332) {
              var x = cljs.core.first(arglist__97332);
              arglist__97332 = cljs.core.next(arglist__97332);
              var y = cljs.core.first(arglist__97332);
              arglist__97332 = cljs.core.next(arglist__97332);
              var z = cljs.core.first(arglist__97332);
              var args = cljs.core.rest(arglist__97332);
              return G__97330__delegate(x, y, z, args);
            };
            G__97330.cljs$core$IFn$_invoke$arity$variadic = G__97330__delegate;
            return G__97330;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                var G__97333 = null;
                if (arguments.length > 3) {
                  var G__97334__i = 0, G__97334__a = new Array(arguments.length - 3);
                  while (G__97334__i < G__97334__a.length) {
                    G__97334__a[G__97334__i] = arguments[G__97334__i + 3];
                    ++G__97334__i;
                  }
                  G__97333 = new cljs.core.IndexedSeq(G__97334__a, 0);
                }
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__97333);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__97329 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__97335__i = 0, G__97335__a = new Array(arguments.length - 3);
        while (G__97335__i < G__97335__a.length) {
          G__97335__a[G__97335__i] = arguments[G__97335__i + 3];
          ++G__97335__i;
        }
        ps = new cljs.core.IndexedSeq(G__97335__a, 0);
      }
      return G__97329__delegate.call(this, p1, p2, p3, ps);
    };
    G__97329.cljs$lang$maxFixedArity = 3;
    G__97329.cljs$lang$applyTo = function(arglist__97336) {
      var p1 = cljs.core.first(arglist__97336);
      arglist__97336 = cljs.core.next(arglist__97336);
      var p2 = cljs.core.first(arglist__97336);
      arglist__97336 = cljs.core.next(arglist__97336);
      var p3 = cljs.core.first(arglist__97336);
      var ps = cljs.core.rest(arglist__97336);
      return G__97329__delegate(p1, p2, p3, ps);
    };
    G__97329.cljs$core$IFn$_invoke$arity$variadic = G__97329__delegate;
    return G__97329;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        var G__97337 = null;
        if (arguments.length > 3) {
          var G__97338__i = 0, G__97338__a = new Array(arguments.length - 3);
          while (G__97338__i < G__97338__a.length) {
            G__97338__a[G__97338__i] = arguments[G__97338__i + 3];
            ++G__97338__i;
          }
          G__97337 = new cljs.core.IndexedSeq(G__97338__a, 0);
        }
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__97337);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        var G__97544 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__97544) : p.call(null, G__97544);
      };
      var sp1__2 = function(x, y) {
        var or__3981__auto__ = function() {
          var G__97546 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__97546) : p.call(null, G__97546);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var G__97547 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__97547) : p.call(null, G__97547);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3981__auto__ = function() {
          var G__97549 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__97549) : p.call(null, G__97549);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__97551 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__97551) : p.call(null, G__97551);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var G__97552 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__97552) : p.call(null, G__97552);
          }
        }
      };
      var sp1__4 = function() {
        var G__97713__delegate = function(x, y, z, args) {
          var or__3981__auto__ = sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return cljs.core.some(p, args);
          }
        };
        var G__97713 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__97714__i = 0, G__97714__a = new Array(arguments.length - 3);
            while (G__97714__i < G__97714__a.length) {
              G__97714__a[G__97714__i] = arguments[G__97714__i + 3];
              ++G__97714__i;
            }
            args = new cljs.core.IndexedSeq(G__97714__a, 0);
          }
          return G__97713__delegate.call(this, x, y, z, args);
        };
        G__97713.cljs$lang$maxFixedArity = 3;
        G__97713.cljs$lang$applyTo = function(arglist__97715) {
          var x = cljs.core.first(arglist__97715);
          arglist__97715 = cljs.core.next(arglist__97715);
          var y = cljs.core.first(arglist__97715);
          arglist__97715 = cljs.core.next(arglist__97715);
          var z = cljs.core.first(arglist__97715);
          var args = cljs.core.rest(arglist__97715);
          return G__97713__delegate(x, y, z, args);
        };
        G__97713.cljs$core$IFn$_invoke$arity$variadic = G__97713__delegate;
        return G__97713;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            var G__97716 = null;
            if (arguments.length > 3) {
              var G__97717__i = 0, G__97717__a = new Array(arguments.length - 3);
              while (G__97717__i < G__97717__a.length) {
                G__97717__a[G__97717__i] = arguments[G__97717__i + 3];
                ++G__97717__i;
              }
              G__97716 = new cljs.core.IndexedSeq(G__97717__a, 0);
            }
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__97716);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3981__auto__ = function() {
          var G__97584 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97584) : p1.call(null, G__97584);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var G__97585 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97585) : p2.call(null, G__97585);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3981__auto__ = function() {
          var G__97587 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97587) : p1.call(null, G__97587);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__97589 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97589) : p1.call(null, G__97589);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var or__3981__auto____$2 = function() {
              var G__97591 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97591) : p2.call(null, G__97591);
            }();
            if (cljs.core.truth_(or__3981__auto____$2)) {
              return or__3981__auto____$2;
            } else {
              var G__97592 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97592) : p2.call(null, G__97592);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3981__auto__ = function() {
          var G__97594 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97594) : p1.call(null, G__97594);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__97596 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97596) : p1.call(null, G__97596);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var or__3981__auto____$2 = function() {
              var G__97598 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97598) : p1.call(null, G__97598);
            }();
            if (cljs.core.truth_(or__3981__auto____$2)) {
              return or__3981__auto____$2;
            } else {
              var or__3981__auto____$3 = function() {
                var G__97600 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97600) : p2.call(null, G__97600);
              }();
              if (cljs.core.truth_(or__3981__auto____$3)) {
                return or__3981__auto____$3;
              } else {
                var or__3981__auto____$4 = function() {
                  var G__97602 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97602) : p2.call(null, G__97602);
                }();
                if (cljs.core.truth_(or__3981__auto____$4)) {
                  return or__3981__auto____$4;
                } else {
                  var G__97603 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97603) : p2.call(null, G__97603);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__97718__delegate = function(x, y, z, args) {
          var or__3981__auto__ = sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return cljs.core.some(function(or__3981__auto__) {
              return function(p1__97339_SHARP_) {
                var or__3981__auto____$1 = function() {
                  var G__97605 = p1__97339_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97605) : p1.call(null, G__97605);
                }();
                if (cljs.core.truth_(or__3981__auto____$1)) {
                  return or__3981__auto____$1;
                } else {
                  var G__97606 = p1__97339_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97606) : p2.call(null, G__97606);
                }
              };
            }(or__3981__auto__), args);
          }
        };
        var G__97718 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__97719__i = 0, G__97719__a = new Array(arguments.length - 3);
            while (G__97719__i < G__97719__a.length) {
              G__97719__a[G__97719__i] = arguments[G__97719__i + 3];
              ++G__97719__i;
            }
            args = new cljs.core.IndexedSeq(G__97719__a, 0);
          }
          return G__97718__delegate.call(this, x, y, z, args);
        };
        G__97718.cljs$lang$maxFixedArity = 3;
        G__97718.cljs$lang$applyTo = function(arglist__97720) {
          var x = cljs.core.first(arglist__97720);
          arglist__97720 = cljs.core.next(arglist__97720);
          var y = cljs.core.first(arglist__97720);
          arglist__97720 = cljs.core.next(arglist__97720);
          var z = cljs.core.first(arglist__97720);
          var args = cljs.core.rest(arglist__97720);
          return G__97718__delegate(x, y, z, args);
        };
        G__97718.cljs$core$IFn$_invoke$arity$variadic = G__97718__delegate;
        return G__97718;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            var G__97721 = null;
            if (arguments.length > 3) {
              var G__97722__i = 0, G__97722__a = new Array(arguments.length - 3);
              while (G__97722__i < G__97722__a.length) {
                G__97722__a[G__97722__i] = arguments[G__97722__i + 3];
                ++G__97722__i;
              }
              G__97721 = new cljs.core.IndexedSeq(G__97722__a, 0);
            }
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__97721);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3981__auto__ = function() {
          var G__97652 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97652) : p1.call(null, G__97652);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__97654 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97654) : p2.call(null, G__97654);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var G__97655 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__97655) : p3.call(null, G__97655);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3981__auto__ = function() {
          var G__97657 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97657) : p1.call(null, G__97657);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__97659 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97659) : p2.call(null, G__97659);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var or__3981__auto____$2 = function() {
              var G__97661 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__97661) : p3.call(null, G__97661);
            }();
            if (cljs.core.truth_(or__3981__auto____$2)) {
              return or__3981__auto____$2;
            } else {
              var or__3981__auto____$3 = function() {
                var G__97663 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97663) : p1.call(null, G__97663);
              }();
              if (cljs.core.truth_(or__3981__auto____$3)) {
                return or__3981__auto____$3;
              } else {
                var or__3981__auto____$4 = function() {
                  var G__97665 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97665) : p2.call(null, G__97665);
                }();
                if (cljs.core.truth_(or__3981__auto____$4)) {
                  return or__3981__auto____$4;
                } else {
                  var G__97666 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__97666) : p3.call(null, G__97666);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3981__auto__ = function() {
          var G__97668 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97668) : p1.call(null, G__97668);
        }();
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = function() {
            var G__97670 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97670) : p2.call(null, G__97670);
          }();
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            var or__3981__auto____$2 = function() {
              var G__97672 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__97672) : p3.call(null, G__97672);
            }();
            if (cljs.core.truth_(or__3981__auto____$2)) {
              return or__3981__auto____$2;
            } else {
              var or__3981__auto____$3 = function() {
                var G__97674 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97674) : p1.call(null, G__97674);
              }();
              if (cljs.core.truth_(or__3981__auto____$3)) {
                return or__3981__auto____$3;
              } else {
                var or__3981__auto____$4 = function() {
                  var G__97676 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97676) : p2.call(null, G__97676);
                }();
                if (cljs.core.truth_(or__3981__auto____$4)) {
                  return or__3981__auto____$4;
                } else {
                  var or__3981__auto____$5 = function() {
                    var G__97678 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__97678) : p3.call(null, G__97678);
                  }();
                  if (cljs.core.truth_(or__3981__auto____$5)) {
                    return or__3981__auto____$5;
                  } else {
                    var or__3981__auto____$6 = function() {
                      var G__97680 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97680) : p1.call(null, G__97680);
                    }();
                    if (cljs.core.truth_(or__3981__auto____$6)) {
                      return or__3981__auto____$6;
                    } else {
                      var or__3981__auto____$7 = function() {
                        var G__97682 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97682) : p2.call(null, G__97682);
                      }();
                      if (cljs.core.truth_(or__3981__auto____$7)) {
                        return or__3981__auto____$7;
                      } else {
                        var G__97683 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__97683) : p3.call(null, G__97683);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__97723__delegate = function(x, y, z, args) {
          var or__3981__auto__ = sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return cljs.core.some(function(or__3981__auto__) {
              return function(p1__97340_SHARP_) {
                var or__3981__auto____$1 = function() {
                  var G__97685 = p1__97340_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__97685) : p1.call(null, G__97685);
                }();
                if (cljs.core.truth_(or__3981__auto____$1)) {
                  return or__3981__auto____$1;
                } else {
                  var or__3981__auto____$2 = function() {
                    var G__97687 = p1__97340_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__97687) : p2.call(null, G__97687);
                  }();
                  if (cljs.core.truth_(or__3981__auto____$2)) {
                    return or__3981__auto____$2;
                  } else {
                    var G__97688 = p1__97340_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__97688) : p3.call(null, G__97688);
                  }
                }
              };
            }(or__3981__auto__), args);
          }
        };
        var G__97723 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__97724__i = 0, G__97724__a = new Array(arguments.length - 3);
            while (G__97724__i < G__97724__a.length) {
              G__97724__a[G__97724__i] = arguments[G__97724__i + 3];
              ++G__97724__i;
            }
            args = new cljs.core.IndexedSeq(G__97724__a, 0);
          }
          return G__97723__delegate.call(this, x, y, z, args);
        };
        G__97723.cljs$lang$maxFixedArity = 3;
        G__97723.cljs$lang$applyTo = function(arglist__97725) {
          var x = cljs.core.first(arglist__97725);
          arglist__97725 = cljs.core.next(arglist__97725);
          var y = cljs.core.first(arglist__97725);
          arglist__97725 = cljs.core.next(arglist__97725);
          var z = cljs.core.first(arglist__97725);
          var args = cljs.core.rest(arglist__97725);
          return G__97723__delegate(x, y, z, args);
        };
        G__97723.cljs$core$IFn$_invoke$arity$variadic = G__97723__delegate;
        return G__97723;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            var G__97726 = null;
            if (arguments.length > 3) {
              var G__97727__i = 0, G__97727__a = new Array(arguments.length - 3);
              while (G__97727__i < G__97727__a.length) {
                G__97727__a[G__97727__i] = arguments[G__97727__i + 3];
                ++G__97727__i;
              }
              G__97726 = new cljs.core.IndexedSeq(G__97727__a, 0);
            }
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__97726);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__97728__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__97341_SHARP_) {
                var G__97704 = x;
                return p1__97341_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__97341_SHARP_.cljs$core$IFn$_invoke$arity$1(G__97704) : p1__97341_SHARP_.call(null, G__97704);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__97342_SHARP_) {
                var or__3981__auto__ = function() {
                  var G__97706 = x;
                  return p1__97342_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__97342_SHARP_.cljs$core$IFn$_invoke$arity$1(G__97706) : p1__97342_SHARP_.call(null, G__97706);
                }();
                if (cljs.core.truth_(or__3981__auto__)) {
                  return or__3981__auto__;
                } else {
                  var G__97707 = y;
                  return p1__97342_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__97342_SHARP_.cljs$core$IFn$_invoke$arity$1(G__97707) : p1__97342_SHARP_.call(null, G__97707);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some(function(ps__$1) {
              return function(p1__97343_SHARP_) {
                var or__3981__auto__ = function() {
                  var G__97709 = x;
                  return p1__97343_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__97343_SHARP_.cljs$core$IFn$_invoke$arity$1(G__97709) : p1__97343_SHARP_.call(null, G__97709);
                }();
                if (cljs.core.truth_(or__3981__auto__)) {
                  return or__3981__auto__;
                } else {
                  var or__3981__auto____$1 = function() {
                    var G__97711 = y;
                    return p1__97343_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__97343_SHARP_.cljs$core$IFn$_invoke$arity$1(G__97711) : p1__97343_SHARP_.call(null, G__97711);
                  }();
                  if (cljs.core.truth_(or__3981__auto____$1)) {
                    return or__3981__auto____$1;
                  } else {
                    var G__97712 = z;
                    return p1__97343_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__97343_SHARP_.cljs$core$IFn$_invoke$arity$1(G__97712) : p1__97343_SHARP_.call(null, G__97712);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__97729__delegate = function(x, y, z, args) {
              var or__3981__auto__ = spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
              if (cljs.core.truth_(or__3981__auto__)) {
                return or__3981__auto__;
              } else {
                return cljs.core.some(function(or__3981__auto__, ps__$1) {
                  return function(p1__97344_SHARP_) {
                    return cljs.core.some(p1__97344_SHARP_, args);
                  };
                }(or__3981__auto__, ps__$1), ps__$1);
              }
            };
            var G__97729 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__97730__i = 0, G__97730__a = new Array(arguments.length - 3);
                while (G__97730__i < G__97730__a.length) {
                  G__97730__a[G__97730__i] = arguments[G__97730__i + 3];
                  ++G__97730__i;
                }
                args = new cljs.core.IndexedSeq(G__97730__a, 0);
              }
              return G__97729__delegate.call(this, x, y, z, args);
            };
            G__97729.cljs$lang$maxFixedArity = 3;
            G__97729.cljs$lang$applyTo = function(arglist__97731) {
              var x = cljs.core.first(arglist__97731);
              arglist__97731 = cljs.core.next(arglist__97731);
              var y = cljs.core.first(arglist__97731);
              arglist__97731 = cljs.core.next(arglist__97731);
              var z = cljs.core.first(arglist__97731);
              var args = cljs.core.rest(arglist__97731);
              return G__97729__delegate(x, y, z, args);
            };
            G__97729.cljs$core$IFn$_invoke$arity$variadic = G__97729__delegate;
            return G__97729;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                var G__97732 = null;
                if (arguments.length > 3) {
                  var G__97733__i = 0, G__97733__a = new Array(arguments.length - 3);
                  while (G__97733__i < G__97733__a.length) {
                    G__97733__a[G__97733__i] = arguments[G__97733__i + 3];
                    ++G__97733__i;
                  }
                  G__97732 = new cljs.core.IndexedSeq(G__97733__a, 0);
                }
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__97732);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__97728 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        var G__97734__i = 0, G__97734__a = new Array(arguments.length - 3);
        while (G__97734__i < G__97734__a.length) {
          G__97734__a[G__97734__i] = arguments[G__97734__i + 3];
          ++G__97734__i;
        }
        ps = new cljs.core.IndexedSeq(G__97734__a, 0);
      }
      return G__97728__delegate.call(this, p1, p2, p3, ps);
    };
    G__97728.cljs$lang$maxFixedArity = 3;
    G__97728.cljs$lang$applyTo = function(arglist__97735) {
      var p1 = cljs.core.first(arglist__97735);
      arglist__97735 = cljs.core.next(arglist__97735);
      var p2 = cljs.core.first(arglist__97735);
      arglist__97735 = cljs.core.next(arglist__97735);
      var p3 = cljs.core.first(arglist__97735);
      var ps = cljs.core.rest(arglist__97735);
      return G__97728__delegate(p1, p2, p3, ps);
    };
    G__97728.cljs$core$IFn$_invoke$arity$variadic = G__97728__delegate;
    return G__97728;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        var G__97736 = null;
        if (arguments.length > 3) {
          var G__97737__i = 0, G__97737__a = new Array(arguments.length - 3);
          while (G__97737__i < G__97737__a.length) {
            G__97737__a[G__97737__i] = arguments[G__97737__i + 3];
            ++G__97737__i;
          }
          G__97736 = new cljs.core.IndexedSeq(G__97737__a, 0);
        }
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, G__97736);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__97792 = null;
        var G__97792__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__97792__1 = function(result) {
          var G__97778 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__97778) : rf.call(null, G__97778);
        };
        var G__97792__2 = function(result, input) {
          var G__97779 = result;
          var G__97780 = function() {
            var G__97781 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__97781) : f.call(null, G__97781);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__97779, G__97780) : rf.call(null, G__97779, G__97780);
        };
        var G__97792__3 = function() {
          var G__97793__delegate = function(result, input, inputs) {
            var G__97782 = result;
            var G__97783 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__97782, G__97783) : rf.call(null, G__97782, G__97783);
          };
          var G__97793 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              var G__97794__i = 0, G__97794__a = new Array(arguments.length - 2);
              while (G__97794__i < G__97794__a.length) {
                G__97794__a[G__97794__i] = arguments[G__97794__i + 2];
                ++G__97794__i;
              }
              inputs = new cljs.core.IndexedSeq(G__97794__a, 0);
            }
            return G__97793__delegate.call(this, result, input, inputs);
          };
          G__97793.cljs$lang$maxFixedArity = 2;
          G__97793.cljs$lang$applyTo = function(arglist__97795) {
            var result = cljs.core.first(arglist__97795);
            arglist__97795 = cljs.core.next(arglist__97795);
            var input = cljs.core.first(arglist__97795);
            var inputs = cljs.core.rest(arglist__97795);
            return G__97793__delegate(result, input, inputs);
          };
          G__97793.cljs$core$IFn$_invoke$arity$variadic = G__97793__delegate;
          return G__97793;
        }();
        G__97792 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__97792__0.call(this);
            case 1:
              return G__97792__1.call(this, result);
            case 2:
              return G__97792__2.call(this, result, input);
            default:
              var G__97796 = null;
              if (arguments.length > 2) {
                var G__97797__i = 0, G__97797__a = new Array(arguments.length - 2);
                while (G__97797__i < G__97797__a.length) {
                  G__97797__a[G__97797__i] = arguments[G__97797__i + 2];
                  ++G__97797__i;
                }
                G__97796 = new cljs.core.IndexedSeq(G__97797__a, 0);
              }
              return G__97792__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__97796);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__97792.cljs$lang$maxFixedArity = 2;
        G__97792.cljs$lang$applyTo = G__97792__3.cljs$lang$applyTo;
        G__97792.cljs$core$IFn$_invoke$arity$0 = G__97792__0;
        G__97792.cljs$core$IFn$_invoke$arity$1 = G__97792__1;
        G__97792.cljs$core$IFn$_invoke$arity$2 = G__97792__2;
        G__97792.cljs$core$IFn$_invoke$arity$variadic = G__97792__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__97792;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4868__auto___97798 = size;
          var i_97799 = 0;
          while (true) {
            if (i_97799 < n__4868__auto___97798) {
              cljs.core.chunk_append(b, function() {
                var G__97784 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_97799);
                return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__97784) : f.call(null, G__97784);
              }());
              var G__97800 = i_97799 + 1;
              i_97799 = G__97800;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__97785 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__97785) : f.call(null, G__97785);
          }(), map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(function() {
          var G__97786 = cljs.core.first(s1);
          var G__97787 = cljs.core.first(s2);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__97786, G__97787) : f.call(null, G__97786, G__97787);
        }(), map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      var s3 = cljs.core.seq(c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons(function() {
          var G__97788 = cljs.core.first(s1);
          var G__97789 = cljs.core.first(s2);
          var G__97790 = cljs.core.first(s3);
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__97788, G__97789, G__97790) : f.call(null, G__97788, G__97789, G__97790);
        }(), map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__97801__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
          if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
            return cljs.core.cons(map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), step(map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.cljs$core$IFn$_invoke$arity$2(function(step) {
        return function(p1__97738_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__97738_SHARP_);
        };
      }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
    };
    var G__97801 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__97802__i = 0, G__97802__a = new Array(arguments.length - 4);
        while (G__97802__i < G__97802__a.length) {
          G__97802__a[G__97802__i] = arguments[G__97802__i + 4];
          ++G__97802__i;
        }
        colls = new cljs.core.IndexedSeq(G__97802__a, 0);
      }
      return G__97801__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__97801.cljs$lang$maxFixedArity = 4;
    G__97801.cljs$lang$applyTo = function(arglist__97803) {
      var f = cljs.core.first(arglist__97803);
      arglist__97803 = cljs.core.next(arglist__97803);
      var c1 = cljs.core.first(arglist__97803);
      arglist__97803 = cljs.core.next(arglist__97803);
      var c2 = cljs.core.first(arglist__97803);
      arglist__97803 = cljs.core.next(arglist__97803);
      var c3 = cljs.core.first(arglist__97803);
      var colls = cljs.core.rest(arglist__97803);
      return G__97801__delegate(f, c1, c2, c3, colls);
    };
    G__97801.cljs$core$IFn$_invoke$arity$variadic = G__97801__delegate;
    return G__97801;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        var G__97804 = null;
        if (arguments.length > 4) {
          var G__97805__i = 0, G__97805__a = new Array(arguments.length - 4);
          while (G__97805__i < G__97805__a.length) {
            G__97805__a[G__97805__i] = arguments[G__97805__i + 4];
            ++G__97805__i;
          }
          G__97804 = new cljs.core.IndexedSeq(G__97805__a, 0);
        }
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__97804);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__97814 = null;
          var G__97814__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__97814__1 = function(result) {
            var G__97811 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__97811) : rf.call(null, G__97811);
          };
          var G__97814__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            var nn = na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            var result__$1 = n__$1 > 0 ? function() {
              var G__97812 = result;
              var G__97813 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__97812, G__97813) : rf.call(null, G__97812, G__97813);
            }() : result;
            if (!(nn > 0)) {
              return cljs.core.ensure_reduced(result__$1);
            } else {
              return result__$1;
            }
          };
          G__97814 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__97814__0.call(this);
              case 1:
                return G__97814__1.call(this, result);
              case 2:
                return G__97814__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__97814.cljs$core$IFn$_invoke$arity$0 = G__97814__0;
          G__97814.cljs$core$IFn$_invoke$arity$1 = G__97814__1;
          G__97814.cljs$core$IFn$_invoke$arity$2 = G__97814__2;
          return G__97814;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq(coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons(cljs.core.first(s), take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.volatile_BANG_(n);
      return function(na) {
        return function() {
          var G__97821 = null;
          var G__97821__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__97821__1 = function(result) {
            var G__97818 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__97818) : rf.call(null, G__97818);
          };
          var G__97821__2 = function(result, input) {
            var n__$1 = cljs.core.deref(na);
            na.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, na.cljs$core$IDeref$_deref$arity$1(null) - 1);
            if (n__$1 > 0) {
              return result;
            } else {
              var G__97819 = result;
              var G__97820 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__97819, G__97820) : rf.call(null, G__97819, G__97820);
            }
          };
          G__97821 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__97821__0.call(this);
              case 1:
                return G__97821__1.call(this, result);
              case 2:
                return G__97821__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__97821.cljs$core$IFn$_invoke$arity$0 = G__97821__0;
          G__97821.cljs$core$IFn$_invoke$arity$1 = G__97821__1;
          G__97821.cljs$core$IFn$_invoke$arity$2 = G__97821__2;
          return G__97821;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (n__$1 > 0 && s) {
          var G__97822 = n__$1 - 1;
          var G__97823 = cljs.core.rest(s);
          n__$1 = G__97822;
          coll__$1 = G__97823;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
      return x;
    }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__97826 = cljs.core.next(s);
      var G__97827 = cljs.core.next(lead);
      s = G__97826;
      lead = G__97827;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.volatile_BANG_(true);
      return function(da) {
        return function() {
          var G__97840 = null;
          var G__97840__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__97840__1 = function(result) {
            var G__97834 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__97834) : rf.call(null, G__97834);
          };
          var G__97840__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref(da);
            if (cljs.core.truth_(function() {
              var and__3969__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3969__auto__)) {
                var G__97835 = input;
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__97835) : pred.call(null, G__97835);
              } else {
                return and__3969__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.vreset_BANG_(da, null);
              var G__97836 = result;
              var G__97837 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__97836, G__97837) : rf.call(null, G__97836, G__97837);
            }
          };
          G__97840 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__97840__0.call(this);
              case 1:
                return G__97840__1.call(this, result);
              case 2:
                return G__97840__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__97840.cljs$core$IFn$_invoke$arity$0 = G__97840__0;
          G__97840.cljs$core$IFn$_invoke$arity$1 = G__97840__1;
          G__97840.cljs$core$IFn$_invoke$arity$2 = G__97840__2;
          return G__97840;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq(coll__$1);
        if (cljs.core.truth_(function() {
          var and__3969__auto__ = s;
          if (and__3969__auto__) {
            var G__97839 = cljs.core.first(s);
            return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__97839) : pred__$1.call(null, G__97839);
          } else {
            return and__3969__auto__;
          }
        }())) {
          var G__97841 = pred__$1;
          var G__97842 = cljs.core.rest(s);
          pred__$1 = G__97841;
          coll__$1 = G__97842;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step(pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq(coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(x, repeat.cljs$core$IFn$_invoke$arity$1(x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, repeat.cljs$core$IFn$_invoke$arity$1(x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), repeatedly.cljs$core$IFn$_invoke$arity$1(f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return iterate(f, function() {
      var G__97851 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__97851) : f.call(null, G__97851);
    }());
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq(c1);
      var s2 = cljs.core.seq(c2);
      if (s1 && s2) {
        return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__97854__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
        if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
          return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__97854 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        var G__97855__i = 0, G__97855__a = new Array(arguments.length - 2);
        while (G__97855__i < G__97855__a.length) {
          G__97855__a[G__97855__i] = arguments[G__97855__i + 2];
          ++G__97855__i;
        }
        colls = new cljs.core.IndexedSeq(G__97855__a, 0);
      }
      return G__97854__delegate.call(this, c1, c2, colls);
    };
    G__97854.cljs$lang$maxFixedArity = 2;
    G__97854.cljs$lang$applyTo = function(arglist__97856) {
      var c1 = cljs.core.first(arglist__97856);
      arglist__97856 = cljs.core.next(arglist__97856);
      var c2 = cljs.core.first(arglist__97856);
      var colls = cljs.core.rest(arglist__97856);
      return G__97854__delegate(c1, c2, colls);
    };
    G__97854.cljs$core$IFn$_invoke$arity$variadic = G__97854__delegate;
    return G__97854;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        var G__97857 = null;
        if (arguments.length > 2) {
          var G__97858__i = 0, G__97858__a = new Array(arguments.length - 2);
          while (G__97858__i < G__97858__a.length) {
            G__97858__a[G__97858__i] = arguments[G__97858__i + 2];
            ++G__97858__i;
          }
          G__97857 = new cljs.core.IndexedSeq(G__97858__a, 0);
        }
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, G__97857);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function() {
  var interpose = null;
  var interpose__1 = function(sep) {
    return function(rf) {
      var started = cljs.core.volatile_BANG_(false);
      return function(started) {
        return function() {
          var G__97873 = null;
          var G__97873__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__97873__1 = function(result) {
            var G__97866 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__97866) : rf.call(null, G__97866);
          };
          var G__97873__2 = function(result, input) {
            if (cljs.core.truth_(cljs.core.deref(started))) {
              var sepr = function() {
                var G__97867 = result;
                var G__97868 = sep;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__97867, G__97868) : rf.call(null, G__97867, G__97868);
              }();
              if (cljs.core.reduced_QMARK_(sepr)) {
                return sepr;
              } else {
                var G__97869 = sepr;
                var G__97870 = input;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__97869, G__97870) : rf.call(null, G__97869, G__97870);
              }
            } else {
              cljs.core.vreset_BANG_(started, true);
              var G__97871 = result;
              var G__97872 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__97871, G__97872) : rf.call(null, G__97871, G__97872);
            }
          };
          G__97873 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__97873__0.call(this);
              case 1:
                return G__97873__1.call(this, result);
              case 2:
                return G__97873__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__97873.cljs$core$IFn$_invoke$arity$0 = G__97873__0;
          G__97873.cljs$core$IFn$_invoke$arity$1 = G__97873__1;
          G__97873.cljs$core$IFn$_invoke$arity$2 = G__97873__2;
          return G__97873;
        }();
      }(started);
    };
  };
  var interpose__2 = function(sep, coll) {
    return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
  };
  interpose = function(sep, coll) {
    switch(arguments.length) {
      case 1:
        return interpose__1.call(this, sep);
      case 2:
        return interpose__2.call(this, sep, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interpose.cljs$core$IFn$_invoke$arity$1 = interpose__1;
  interpose.cljs$core$IFn$_invoke$arity$2 = interpose__2;
  return interpose;
}();
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__97882__delegate = function(f, colls) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
    };
    var G__97882 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        var G__97883__i = 0, G__97883__a = new Array(arguments.length - 1);
        while (G__97883__i < G__97883__a.length) {
          G__97883__a[G__97883__i] = arguments[G__97883__i + 1];
          ++G__97883__i;
        }
        colls = new cljs.core.IndexedSeq(G__97883__a, 0);
      }
      return G__97882__delegate.call(this, f, colls);
    };
    G__97882.cljs$lang$maxFixedArity = 1;
    G__97882.cljs$lang$applyTo = function(arglist__97884) {
      var f = cljs.core.first(arglist__97884);
      var colls = cljs.core.rest(arglist__97884);
      return G__97882__delegate(f, colls);
    };
    G__97882.cljs$core$IFn$_invoke$arity$variadic = G__97882__delegate;
    return G__97882;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        var G__97885 = null;
        if (arguments.length > 1) {
          var G__97886__i = 0, G__97886__a = new Array(arguments.length - 1);
          while (G__97886__i < G__97886__a.length) {
            G__97886__a[G__97886__i] = arguments[G__97886__i + 1];
            ++G__97886__i;
          }
          G__97885 = new cljs.core.IndexedSeq(G__97886__a, 0);
        }
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, G__97885);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__97905 = null;
        var G__97905__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__97905__1 = function(result) {
          var G__97899 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__97899) : rf.call(null, G__97899);
        };
        var G__97905__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__97900 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__97900) : pred.call(null, G__97900);
          }())) {
            var G__97901 = result;
            var G__97902 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__97901, G__97902) : rf.call(null, G__97901, G__97902);
          } else {
            return result;
          }
        };
        G__97905 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__97905__0.call(this);
            case 1:
              return G__97905__1.call(this, result);
            case 2:
              return G__97905__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__97905.cljs$core$IFn$_invoke$arity$0 = G__97905__0;
        G__97905.cljs$core$IFn$_invoke$arity$1 = G__97905__1;
        G__97905.cljs$core$IFn$_invoke$arity$2 = G__97905__2;
        return G__97905;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__4868__auto___97906 = size;
          var i_97907 = 0;
          while (true) {
            if (i_97907 < n__4868__auto___97906) {
              if (cljs.core.truth_(function() {
                var G__97903 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_97907);
                return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__97903) : pred.call(null, G__97903);
              }())) {
                cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_97907));
              } else {
              }
              var G__97908 = i_97907 + 1;
              i_97907 = G__97908;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
        } else {
          var f = cljs.core.first(s);
          var r = cljs.core.rest(s);
          if (cljs.core.truth_(function() {
            var G__97904 = f;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__97904) : pred.call(null, G__97904);
          }())) {
            return cljs.core.cons(f, filter.cljs$core$IFn$_invoke$arity$2(pred, r));
          } else {
            return filter.cljs$core$IFn$_invoke$arity$2(pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__97915 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__97915) : branch_QMARK_.call(null, G__97915);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(walk, cljs.core.array_seq([function() {
        var G__97916 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__97916) : children.call(null, G__97916);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__97917_SHARP_) {
    return!cljs.core.sequential_QMARK_(p1__97917_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__97920 = to;
        if (G__97920) {
          var bit__4655__auto__ = G__97920.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4655__auto__ || G__97920.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
      } else {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__97921 = to;
      if (G__97921) {
        var bit__4655__auto__ = G__97921.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4655__auto__ || G__97921.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
        var G__97923 = o;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__97923) : f.call(null, G__97923);
      }());
    }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__97924__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
    };
    var G__97924 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        var G__97925__i = 0, G__97925__a = new Array(arguments.length - 4);
        while (G__97925__i < G__97925__a.length) {
          G__97925__a[G__97925__i] = arguments[G__97925__i + 4];
          ++G__97925__i;
        }
        colls = new cljs.core.IndexedSeq(G__97925__a, 0);
      }
      return G__97924__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__97924.cljs$lang$maxFixedArity = 4;
    G__97924.cljs$lang$applyTo = function(arglist__97926) {
      var f = cljs.core.first(arglist__97926);
      arglist__97926 = cljs.core.next(arglist__97926);
      var c1 = cljs.core.first(arglist__97926);
      arglist__97926 = cljs.core.next(arglist__97926);
      var c2 = cljs.core.first(arglist__97926);
      arglist__97926 = cljs.core.next(arglist__97926);
      var c3 = cljs.core.first(arglist__97926);
      var colls = cljs.core.rest(arglist__97926);
      return G__97924__delegate(f, c1, c2, c3, colls);
    };
    G__97924.cljs$core$IFn$_invoke$arity$variadic = G__97924__delegate;
    return G__97924;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        var G__97927 = null;
        if (arguments.length > 4) {
          var G__97928__i = 0, G__97928__a = new Array(arguments.length - 4);
          while (G__97928__i < G__97928__a.length) {
            G__97928__a[G__97928__i] = arguments[G__97928__i + 4];
            ++G__97928__i;
          }
          G__97927 = new cljs.core.IndexedSeq(G__97928__a, 0);
        }
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, G__97927);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__97930 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__97930) : pred.call(null, G__97930);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
        if (n === cljs.core.count(p)) {
          return cljs.core.cons(p, partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
        } else {
          return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq(ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__97945 = m__$1;
          if (G__97945) {
            var bit__4662__auto__ = G__97945.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4662__auto__ || G__97945.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__97945.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__97945);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__97945);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__97946 = sentinel;
            var G__97947 = m__$2;
            var G__97948 = cljs.core.next(ks__$1);
            sentinel = G__97946;
            m__$1 = G__97947;
            ks__$1 = G__97948;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__97949, v) {
  var vec__97954 = p__97949;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__97954, 0, null);
  var ks = cljs.core.nthnext(vec__97954, 1);
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__97955, f) {
    var vec__97993 = p__97955;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__97993, 0, null);
    var ks = cljs.core.nthnext(vec__97993, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__97994 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__97994) : f.call(null, G__97994);
      }());
    }
  };
  var update_in__4 = function(m, p__97956, f, a) {
    var vec__97995 = p__97956;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__97995, 0, null);
    var ks = cljs.core.nthnext(vec__97995, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__97996 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__97997 = a;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__97996, G__97997) : f.call(null, G__97996, G__97997);
      }());
    }
  };
  var update_in__5 = function(m, p__97957, f, a, b) {
    var vec__97998 = p__97957;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__97998, 0, null);
    var ks = cljs.core.nthnext(vec__97998, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__97999 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__98000 = a;
        var G__98001 = b;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__97999, G__98000, G__98001) : f.call(null, G__97999, G__98000, G__98001);
      }());
    }
  };
  var update_in__6 = function(m, p__97958, f, a, b, c) {
    var vec__98002 = p__97958;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98002, 0, null);
    var ks = cljs.core.nthnext(vec__98002, 1);
    if (ks) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
        var G__98003 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
        var G__98004 = a;
        var G__98005 = b;
        var G__98006 = c;
        return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__98003, G__98004, G__98005, G__98006) : f.call(null, G__98003, G__98004, G__98005, G__98006);
      }());
    }
  };
  var update_in__7 = function() {
    var G__98008__delegate = function(m, p__97959, f, a, b, c, args) {
      var vec__98007 = p__97959;
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98007, 0, null);
      var ks = cljs.core.nthnext(vec__98007, 1);
      if (ks) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
      }
    };
    var G__98008 = function(m, p__97959, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        var G__98009__i = 0, G__98009__a = new Array(arguments.length - 6);
        while (G__98009__i < G__98009__a.length) {
          G__98009__a[G__98009__i] = arguments[G__98009__i + 6];
          ++G__98009__i;
        }
        args = new cljs.core.IndexedSeq(G__98009__a, 0);
      }
      return G__98008__delegate.call(this, m, p__97959, f, a, b, c, args);
    };
    G__98008.cljs$lang$maxFixedArity = 6;
    G__98008.cljs$lang$applyTo = function(arglist__98010) {
      var m = cljs.core.first(arglist__98010);
      arglist__98010 = cljs.core.next(arglist__98010);
      var p__97959 = cljs.core.first(arglist__98010);
      arglist__98010 = cljs.core.next(arglist__98010);
      var f = cljs.core.first(arglist__98010);
      arglist__98010 = cljs.core.next(arglist__98010);
      var a = cljs.core.first(arglist__98010);
      arglist__98010 = cljs.core.next(arglist__98010);
      var b = cljs.core.first(arglist__98010);
      arglist__98010 = cljs.core.next(arglist__98010);
      var c = cljs.core.first(arglist__98010);
      var args = cljs.core.rest(arglist__98010);
      return G__98008__delegate(m, p__97959, f, a, b, c, args);
    };
    G__98008.cljs$core$IFn$_invoke$arity$variadic = G__98008__delegate;
    return G__98008;
  }();
  update_in = function(m, p__97959, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__97959, f);
      case 4:
        return update_in__4.call(this, m, p__97959, f, a);
      case 5:
        return update_in__5.call(this, m, p__97959, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__97959, f, a, b, c);
      default:
        var G__98011 = null;
        if (arguments.length > 6) {
          var G__98012__i = 0, G__98012__a = new Array(arguments.length - 6);
          while (G__98012__i < G__98012__a.length) {
            G__98012__a[G__98012__i] = arguments[G__98012__i + 6];
            ++G__98012__i;
          }
          G__98011 = new cljs.core.IndexedSeq(G__98012__a, 0);
        }
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__97959, f, a, b, c, G__98011);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.update = function() {
  var update = null;
  var update__3 = function(m, k, f) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__98023 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__98023) : f.call(null, G__98023);
    }());
  };
  var update__4 = function(m, k, f, x) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__98024 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__98025 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98024, G__98025) : f.call(null, G__98024, G__98025);
    }());
  };
  var update__5 = function(m, k, f, x, y) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__98026 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__98027 = x;
      var G__98028 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__98026, G__98027, G__98028) : f.call(null, G__98026, G__98027, G__98028);
    }());
  };
  var update__6 = function(m, k, f, x, y, z) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__98029 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__98030 = x;
      var G__98031 = y;
      var G__98032 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__98029, G__98030, G__98031, G__98032) : f.call(null, G__98029, G__98030, G__98031, G__98032);
    }());
  };
  var update__7 = function() {
    var G__98033__delegate = function(m, k, f, x, y, z, more) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
    };
    var G__98033 = function(m, k, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 6) {
        var G__98034__i = 0, G__98034__a = new Array(arguments.length - 6);
        while (G__98034__i < G__98034__a.length) {
          G__98034__a[G__98034__i] = arguments[G__98034__i + 6];
          ++G__98034__i;
        }
        more = new cljs.core.IndexedSeq(G__98034__a, 0);
      }
      return G__98033__delegate.call(this, m, k, f, x, y, z, more);
    };
    G__98033.cljs$lang$maxFixedArity = 6;
    G__98033.cljs$lang$applyTo = function(arglist__98035) {
      var m = cljs.core.first(arglist__98035);
      arglist__98035 = cljs.core.next(arglist__98035);
      var k = cljs.core.first(arglist__98035);
      arglist__98035 = cljs.core.next(arglist__98035);
      var f = cljs.core.first(arglist__98035);
      arglist__98035 = cljs.core.next(arglist__98035);
      var x = cljs.core.first(arglist__98035);
      arglist__98035 = cljs.core.next(arglist__98035);
      var y = cljs.core.first(arglist__98035);
      arglist__98035 = cljs.core.next(arglist__98035);
      var z = cljs.core.first(arglist__98035);
      var more = cljs.core.rest(arglist__98035);
      return G__98033__delegate(m, k, f, x, y, z, more);
    };
    G__98033.cljs$core$IFn$_invoke$arity$variadic = G__98033__delegate;
    return G__98033;
  }();
  update = function(m, k, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 3:
        return update__3.call(this, m, k, f);
      case 4:
        return update__4.call(this, m, k, f, x);
      case 5:
        return update__5.call(this, m, k, f, x, y);
      case 6:
        return update__6.call(this, m, k, f, x, y, z);
      default:
        var G__98036 = null;
        if (arguments.length > 6) {
          var G__98037__i = 0, G__98037__a = new Array(arguments.length - 6);
          while (G__98037__i < G__98037__a.length) {
            G__98037__a[G__98037__i] = arguments[G__98037__i + 6];
            ++G__98037__i;
          }
          G__98036 = new cljs.core.IndexedSeq(G__98037__a, 0);
        }
        return update__7.cljs$core$IFn$_invoke$arity$variadic(m, k, f, x, y, z, G__98036);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update.cljs$lang$maxFixedArity = 6;
  update.cljs$lang$applyTo = update__7.cljs$lang$applyTo;
  update.cljs$core$IFn$_invoke$arity$3 = update__3;
  update.cljs$core$IFn$_invoke$arity$4 = update__4;
  update.cljs$core$IFn$_invoke$arity$5 = update__5;
  update.cljs$core$IFn$_invoke$arity$6 = update__6;
  update.cljs$core$IFn$_invoke$arity$variadic = update__7.cljs$core$IFn$_invoke$arity$variadic;
  return update;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__98038 = ll - 5;
      var G__98039 = r;
      ll = G__98038;
      ret = G__98039;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__98044 = cljs.core.pv_aget(node, 0);
      var G__98045 = level - 5;
      node = G__98044;
      level = G__98045;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__98046 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__98047 = level - 5;
        node = G__98046;
        level = G__98047;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__98057 = init__$2;
              var G__98058 = j + i;
              var G__98059 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__98057, G__98058, G__98059) : f.call(null, G__98057, G__98058, G__98059);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__98070 = j + 1;
              var G__98071 = init__$3;
              j = G__98070;
              init__$2 = G__98071;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__98060 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__98060) : cljs.core.deref.call(null, G__98060);
      } else {
        var G__98072 = i + len;
        var G__98073 = init__$2;
        i = G__98072;
        init__$1 = G__98073;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__98061 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__98061) : cljs.core.tv_editable_root.call(null, G__98061);
  }(), function() {
    var G__98062 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__98062) : cljs.core.tv_editable_tail.call(null, G__98062);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__98063 = init__$2;
              var G__98064 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98063, G__98064) : f.call(null, G__98063, G__98064);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__98074 = j + 1;
              var G__98075 = init__$3;
              j = G__98074;
              init__$2 = G__98075;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__98065 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__98065) : cljs.core.deref.call(null, G__98065);
      } else {
        var G__98076 = i + len;
        var G__98077 = init__$2;
        i = G__98076;
        init__$1 = G__98077;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__98066 = coll__$1;
      var G__98067 = cljs.core.first_array_for_longvec(coll__$1);
      var G__98068 = 0;
      var G__98069 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__98066, G__98067, G__98068, G__98069) : cljs.core.chunked_seq.call(null, G__98066, G__98067, G__98068, G__98069);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4868__auto___98078 = len;
    var i_98079 = 0;
    while (true) {
      if (i_98079 < n__4868__auto___98078) {
        new_tail[i_98079] = self__.tail[i_98079];
        var G__98080 = i_98079 + 1;
        i_98079 = G__98080;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__98081 = null;
  var G__98081__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__98081__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__98081 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__98081__2.call(this, self__, k);
      case 3:
        return G__98081__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__98081.cljs$core$IFn$_invoke$arity$2 = G__98081__2;
  G__98081.cljs$core$IFn$_invoke$arity$3 = G__98081__3;
  return G__98081;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args98056) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args98056)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__98082 = i + 1;
        var G__98083 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__98082;
        out = G__98083;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.vec = function vec(coll) {
  if (coll instanceof Array) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec(args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      var G__98084__i = 0, G__98084__a = new Array(arguments.length - 0);
      while (G__98084__i < G__98084__a.length) {
        G__98084__a[G__98084__i] = arguments[G__98084__i + 0];
        ++G__98084__i;
      }
      args = new cljs.core.IndexedSeq(G__98084__a, 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__98085) {
    var args = cljs.core.seq(arglist__98085);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__98086 = self__.vec;
      var G__98087 = self__.node;
      var G__98088 = self__.i;
      var G__98089 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__98086, G__98087, G__98088, G__98089) : cljs.core.chunked_seq.call(null, G__98086, G__98087, G__98088, G__98089);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__98090 = self__.vec;
    var G__98091 = self__.i + self__.off;
    var G__98092 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__98090, G__98091, G__98092) : cljs.core.subvec.call(null, G__98090, G__98091, G__98092);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__98093 = self__.vec;
    var G__98094 = self__.i + self__.off;
    var G__98095 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__98093, G__98094, G__98095) : cljs.core.subvec.call(null, G__98093, G__98094, G__98095);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__98096 = self__.vec;
      var G__98097 = self__.node;
      var G__98098 = self__.i;
      var G__98099 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__98096, G__98097, G__98098, G__98099) : cljs.core.chunked_seq.call(null, G__98096, G__98097, G__98098, G__98099);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__98100 = self__.vec;
    var G__98101 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__98102 = end;
    var G__98103 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__98100, G__98101, G__98102, G__98103) : cljs.core.chunked_seq.call(null, G__98100, G__98101, G__98102, G__98103);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__98104 = self__.vec;
  var G__98105 = self__.node;
  var G__98106 = self__.i;
  var G__98107 = self__.off;
  var G__98108 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__98104, G__98105, G__98106, G__98107, G__98108) : cljs.core.chunked_seq.call(null, G__98104, G__98105, G__98106, G__98107, G__98108);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__98109 = self__.vec;
    var G__98110 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__98111 = end;
    var G__98112 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__98109, G__98110, G__98111, G__98112) : cljs.core.chunked_seq.call(null, G__98109, G__98110, G__98111, G__98112);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__98114 = self__.meta;
  var G__98115 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__98116 = self__.start;
  var G__98117 = function() {
    var x__4298__auto__ = self__.end;
    var y__4299__auto__ = v_pos + 1;
    return x__4298__auto__ > y__4299__auto__ ? x__4298__auto__ : y__4299__auto__;
  }();
  var G__98118 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__98114, G__98115, G__98116, G__98117, G__98118) : cljs.core.build_subvec.call(null, G__98114, G__98115, G__98116, G__98117, G__98118);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__98119 = self__.meta;
    var G__98120 = self__.v;
    var G__98121 = self__.start;
    var G__98122 = self__.end - 1;
    var G__98123 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__98119, G__98120, G__98121, G__98122, G__98123) : cljs.core.build_subvec.call(null, G__98119, G__98120, G__98121, G__98122, G__98123);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__98125 = meta__$1;
  var G__98126 = self__.v;
  var G__98127 = self__.start;
  var G__98128 = self__.end;
  var G__98129 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__98125, G__98126, G__98127, G__98128, G__98129) : cljs.core.build_subvec.call(null, G__98125, G__98126, G__98127, G__98128, G__98129);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__98130 = self__.meta;
  var G__98131 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__98132 = self__.start;
  var G__98133 = self__.end + 1;
  var G__98134 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__98130, G__98131, G__98132, G__98133, G__98134) : cljs.core.build_subvec.call(null, G__98130, G__98131, G__98132, G__98133, G__98134);
};
cljs.core.Subvec.prototype.call = function() {
  var G__98135 = null;
  var G__98135__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__98135__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__98135 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__98135__2.call(this, self__, k);
      case 3:
        return G__98135__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__98135.cljs$core$IFn$_invoke$arity$2 = G__98135__2;
  G__98135.cljs$core$IFn$_invoke$arity$3 = G__98135__3;
  return G__98135;
}();
cljs.core.Subvec.prototype.apply = function(self__, args98113) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args98113)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__98136 = meta;
      var G__98137 = v.v;
      var G__98138 = v.start + start;
      var G__98139 = v.start + end;
      var G__98140 = __hash;
      meta = G__98136;
      v = G__98137;
      start = G__98138;
      end = G__98139;
      __hash = G__98140;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec(null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj98147 = {};
    return obj98147;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__98155 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__98156 = level - 5;
        node = G__98155;
        level = G__98156;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.prototype.call = function() {
  var G__98160 = null;
  var G__98160__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__98160__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__98160 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__98160__2.call(this, self__, k);
      case 3:
        return G__98160__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__98160.cljs$core$IFn$_invoke$arity$2 = G__98160__2;
  G__98160.cljs$core$IFn$_invoke$arity$3 = G__98160__3;
  return G__98160;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args98157) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args98157)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next(self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next(self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__3981__auto__ = self__.front;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__3981__auto__ = self__.rear;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__98161 = i + incr;
        i = G__98161;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__98162 = i + 1;
      var G__98163 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__98162;
      out = G__98163;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj98167 = {};
    return obj98167;
  }();
  var l = ks.length;
  var i_98168 = 0;
  while (true) {
    if (i_98168 < l) {
      var k_98169 = ks[i_98168];
      new_obj[k_98169] = obj[k_98169];
      var G__98170 = i_98168 + 1;
      i_98168 = G__98170;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = function() {
      var G__98174 = k;
      return goog.isString(G__98174);
    }();
    if (cljs.core.truth_(and__3969__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3969__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__98175 = init__$1;
        var G__98176 = k;
        var G__98177 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__98175, G__98176, G__98177) : f.call(null, G__98175, G__98176, G__98177);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__98178 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__98178) : cljs.core.deref.call(null, G__98178);
      } else {
        var G__98184 = cljs.core.rest(keys__$1);
        var G__98185 = init__$2;
        keys__$1 = G__98184;
        init__$1 = G__98185;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = function() {
      var G__98180 = k;
      return goog.isString(G__98180);
    }();
    if (cljs.core.truth_(and__3969__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3969__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__98181 = k;
    return goog.isString(G__98181);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = function() {
      var G__98183 = k;
      return goog.isString(G__98183);
    }();
    if (cljs.core.truth_(and__3969__auto__)) {
      return!(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__3969__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__98171_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__98171_SHARP_, self__.strobj[p1__98171_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__98186 = null;
  var G__98186__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__98186__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__98186 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__98186__2.call(this, self__, k);
      case 3:
        return G__98186__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__98186.cljs$core$IFn$_invoke$arity$2 = G__98186__2;
  G__98186.cljs$core$IFn$_invoke$arity$3 = G__98186__3;
  return G__98186;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args98172) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args98172)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj98188 = {};
  return obj98188;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__98189 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98189, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98189, 1, null);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__98190 = i + 2;
        i = G__98190;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__98191 = i + 2;
        i = G__98191;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__98192 = i + 2;
        i = G__98192;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__98193 = i + 2;
        i = G__98193;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__98194 = i + 2;
        i = G__98194;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_(arr, m, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__3981__auto__ = function() {
        var G__98198 = k;
        return goog.isString(G__98198);
      }();
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_map_index_of_identical_QMARK_(arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_(arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_(arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_(arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_98199 = 0;
  while (true) {
    if (i_98199 < l) {
      narr[i_98199] = arr[i_98199];
      var G__98200 = i_98199 + 1;
      i_98199 = G__98200;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__98202 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__98202) : cljs.core.keys.call(null, G__98202);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__98203 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__98203) : cljs.core.vals.call(null, G__98203);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__98204 = cljs.core.seq(coll);
  var chunk__98205 = null;
  var count__98206 = 0;
  var i__98207 = 0;
  while (true) {
    if (i__98207 < count__98206) {
      var vec__98208 = chunk__98205.cljs$core$IIndexed$_nth$arity$2(null, i__98207);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98208, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98208, 1, null);
      var G__98209_98222 = v;
      var G__98210_98223 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98209_98222, G__98210_98223) : f.call(null, G__98209_98222, G__98210_98223);
      var G__98224 = seq__98204;
      var G__98225 = chunk__98205;
      var G__98226 = count__98206;
      var G__98227 = i__98207 + 1;
      seq__98204 = G__98224;
      chunk__98205 = G__98225;
      count__98206 = G__98226;
      i__98207 = G__98227;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__98204);
      if (temp__4126__auto__) {
        var seq__98204__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__98204__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__98204__$1);
          var G__98228 = cljs.core.chunk_rest(seq__98204__$1);
          var G__98229 = c__4768__auto__;
          var G__98230 = cljs.core.count(c__4768__auto__);
          var G__98231 = 0;
          seq__98204 = G__98228;
          chunk__98205 = G__98229;
          count__98206 = G__98230;
          i__98207 = G__98231;
          continue;
        } else {
          var vec__98211 = cljs.core.first(seq__98204__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98211, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98211, 1, null);
          var G__98212_98232 = v;
          var G__98213_98233 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98212_98232, G__98213_98233) : f.call(null, G__98212_98232, G__98213_98233);
          var G__98234 = cljs.core.next(seq__98204__$1);
          var G__98235 = null;
          var G__98236 = 0;
          var G__98237 = 0;
          seq__98204 = G__98234;
          chunk__98205 = G__98235;
          count__98206 = G__98236;
          i__98207 = G__98237;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__98214 = init__$1;
        var G__98215 = self__.arr[i];
        var G__98216 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__98214, G__98215, G__98216) : f.call(null, G__98214, G__98215, G__98216);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__98217 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__98217) : cljs.core.deref.call(null, G__98217);
      } else {
        var G__98238 = i + 2;
        var G__98239 = init__$2;
        i = G__98238;
        init__$1 = G__98239;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__98218 = other;
    if (G__98218) {
      var bit__4655__auto__ = G__98218.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4655__auto__ || G__98218.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__98240 = i + 2;
              i = G__98240;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj98220 = {};
    return obj98220;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__98241 = s + 2;
            var G__98242 = d;
            s = G__98241;
            d = G__98242;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__98243 = s + 2;
            var G__98244 = d + 2;
            s = G__98243;
            d = G__98244;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__98221 = cljs.core.aclone(self__.arr);
        G__98221[idx + 1] = v;
        return G__98221;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__98245 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__98246 = cljs.core.next(es);
          ret = G__98245;
          es = G__98246;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__98247 = null;
  var G__98247__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__98247__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__98247 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__98247__2.call(this, self__, k);
      case 3:
        return G__98247__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__98247.cljs$core$IFn$_invoke$arity$2 = G__98247__2;
  G__98247.cljs$core$IFn$_invoke$arity$3 = G__98247__3;
  return G__98247;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args98201) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args98201)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__98248 = i + 2;
        var G__98249 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
        i = G__98248;
        ret = G__98249;
        continue;
      } else {
        return cljs.core._persistent_BANG_(ret);
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__98250_98258 = self__.arr;
      G__98250_98258.pop();
      G__98250_98258.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__98251 = self__.len;
          var G__98252 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__98251, G__98252) : cljs.core.array__GT_transient_hash_map.call(null, G__98251, G__98252);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__98253 = o;
      if (G__98253) {
        var bit__4662__auto__ = G__98253.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4662__auto__ || G__98253.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__98253.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__98253);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__98253);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__98254 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__98254) : cljs.core.key.call(null, G__98254);
      }(), function() {
        var G__98255 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__98255) : cljs.core.val.call(null, G__98255);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__98259 = cljs.core.next(es);
          var G__98260 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__98256 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__98256) : cljs.core.key.call(null, G__98256);
          }(), function() {
            var G__98257 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__98257) : cljs.core.val.call(null, G__98257);
          }());
          es = G__98259;
          tcoll__$2 = G__98260;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__98261 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__98262 = i + 2;
      out = G__98261;
      i = G__98262;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__98265 = cljs.core.aclone(arr);
    G__98265[i] = a;
    return G__98265;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__98266 = cljs.core.aclone(arr);
    G__98266[i] = a;
    G__98266[j] = b;
    return G__98266;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__98271 = init__$1;
          var G__98272 = k;
          var G__98273 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__98271, G__98272, G__98273) : f.call(null, G__98271, G__98272, G__98273);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__98274 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__98274) : cljs.core.deref.call(null, G__98274);
      } else {
        var G__98275 = i + 2;
        var G__98276 = init__$2;
        i = G__98275;
        init__$1 = G__98276;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__98277 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__98277) : cljs.core.create_inode_seq.call(null, G__98277);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_98291 = 0;
        var j_98292 = 0;
        while (true) {
          if (i_98291 < 32) {
            if ((self__.bitmap >>> i_98291 & 1) === 0) {
              var G__98293 = i_98291 + 1;
              var G__98294 = j_98292;
              i_98291 = G__98293;
              j_98292 = G__98294;
              continue;
            } else {
              nodes[i_98291] = !(self__.arr[j_98292] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_98292]), self__.arr[j_98292], self__.arr[j_98292 + 1], added_leaf_QMARK_) : self__.arr[j_98292 + 1];
              var G__98295 = i_98291 + 1;
              var G__98296 = j_98292 + 2;
              i_98291 = G__98295;
              j_98292 = G__98296;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__98278 = edit__$1;
          var G__98279 = shift + 5;
          var G__98280 = key_or_nil;
          var G__98281 = val_or_node;
          var G__98282 = hash;
          var G__98283 = key;
          var G__98284 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__98278, G__98279, G__98280, G__98281, G__98282, G__98283, G__98284) : cljs.core.create_node.call(null, G__98278, G__98279, G__98280, G__98281, G__98282, G__98283, G__98284);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_98297 = 0;
      var j_98298 = 0;
      while (true) {
        if (i_98297 < 32) {
          if ((self__.bitmap >>> i_98297 & 1) === 0) {
            var G__98299 = i_98297 + 1;
            var G__98300 = j_98298;
            i_98297 = G__98299;
            j_98298 = G__98300;
            continue;
          } else {
            nodes[i_98297] = !(self__.arr[j_98298] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_98298]), self__.arr[j_98298], self__.arr[j_98298 + 1], added_leaf_QMARK_) : self__.arr[j_98298 + 1];
            var G__98301 = i_98297 + 1;
            var G__98302 = j_98298 + 2;
            i_98297 = G__98301;
            j_98298 = G__98302;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__98285 = shift + 5;
          var G__98286 = key_or_nil;
          var G__98287 = val_or_node;
          var G__98288 = hash;
          var G__98289 = key;
          var G__98290 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__98285, G__98286, G__98287, G__98288, G__98289, G__98290) : cljs.core.create_node.call(null, G__98285, G__98286, G__98287, G__98288, G__98289, G__98290);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__98303 = i + 1;
        var G__98304 = j + 2;
        var G__98305 = bitmap | 1 << i;
        i = G__98303;
        j = G__98304;
        bitmap = G__98305;
        continue;
      } else {
        var G__98306 = i + 1;
        var G__98307 = j;
        var G__98308 = bitmap;
        i = G__98306;
        j = G__98307;
        bitmap = G__98308;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__98309 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__98309) : cljs.core.create_array_node_seq.call(null, G__98309);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__98310 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__98310) : cljs.core.deref.call(null, G__98310);
        } else {
          var G__98311 = i + 1;
          var G__98312 = init__$2;
          i = G__98311;
          init__$1 = G__98312;
          continue;
        }
      } else {
        var G__98313 = i + 1;
        var G__98314 = init__$1;
        i = G__98313;
        init__$1 = G__98314;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__98315 = i + 2;
        i = G__98315;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__98316 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__98316) : cljs.core.create_inode_seq.call(null, G__98316);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash(key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__98317 = self__.nodes;
    var G__98318 = self__.i + 2;
    var G__98319 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__98317, G__98318, G__98319) : cljs.core.create_inode_seq.call(null, G__98317, G__98318, G__98319);
  } else {
    var G__98320 = self__.nodes;
    var G__98321 = self__.i;
    var G__98322 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__98320, G__98321, G__98322) : cljs.core.create_inode_seq.call(null, G__98320, G__98321, G__98322);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__98326 = j + 2;
                j = G__98326;
                continue;
              }
            } else {
              var G__98327 = j + 2;
              j = G__98327;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__98328 = null;
  var G__98329 = self__.nodes;
  var G__98330 = self__.i;
  var G__98331 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__98328, G__98329, G__98330, G__98331) : cljs.core.create_array_node_seq.call(null, G__98328, G__98329, G__98330, G__98331);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__98336 = j + 1;
              j = G__98336;
              continue;
            }
          } else {
            var G__98337 = j + 1;
            j = G__98337;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__98339 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__98339) : cljs.core.keys.call(null, G__98339);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__98340 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__98340) : cljs.core.vals.call(null, G__98340);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__98341 = cljs.core.seq(coll);
  var chunk__98342 = null;
  var count__98343 = 0;
  var i__98344 = 0;
  while (true) {
    if (i__98344 < count__98343) {
      var vec__98345 = chunk__98342.cljs$core$IIndexed$_nth$arity$2(null, i__98344);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98345, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98345, 1, null);
      var G__98346_98357 = v;
      var G__98347_98358 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98346_98357, G__98347_98358) : f.call(null, G__98346_98357, G__98347_98358);
      var G__98359 = seq__98341;
      var G__98360 = chunk__98342;
      var G__98361 = count__98343;
      var G__98362 = i__98344 + 1;
      seq__98341 = G__98359;
      chunk__98342 = G__98360;
      count__98343 = G__98361;
      i__98344 = G__98362;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__98341);
      if (temp__4126__auto__) {
        var seq__98341__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__98341__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__98341__$1);
          var G__98363 = cljs.core.chunk_rest(seq__98341__$1);
          var G__98364 = c__4768__auto__;
          var G__98365 = cljs.core.count(c__4768__auto__);
          var G__98366 = 0;
          seq__98341 = G__98363;
          chunk__98342 = G__98364;
          count__98343 = G__98365;
          i__98344 = G__98366;
          continue;
        } else {
          var vec__98348 = cljs.core.first(seq__98341__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98348, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98348, 1, null);
          var G__98349_98367 = v;
          var G__98350_98368 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98349_98367, G__98350_98368) : f.call(null, G__98349_98367, G__98350_98368);
          var G__98369 = cljs.core.next(seq__98341__$1);
          var G__98370 = null;
          var G__98371 = 0;
          var G__98372 = 0;
          seq__98341 = G__98369;
          chunk__98342 = G__98370;
          count__98343 = G__98371;
          i__98344 = G__98372;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__98351 = init;
    var G__98352 = null;
    var G__98353 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__98351, G__98352, G__98353) : f.call(null, G__98351, G__98352, G__98353);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__98354 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__98354) : cljs.core.deref.call(null, G__98354);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj98356 = {};
    return obj98356;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__98373 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__98374 = cljs.core.next(es);
          ret = G__98373;
          es = G__98374;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__98375 = null;
  var G__98375__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__98375__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__98375 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__98375__2.call(this, self__, k);
      case 3:
        return G__98375__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__98375.cljs$core$IFn$_invoke$arity$2 = G__98375__2;
  G__98375.cljs$core$IFn$_invoke$arity$3 = G__98375__3;
  return G__98375;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args98338) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args98338)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__98376 = i + 2;
      var G__98377 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__98376;
      ret = G__98377;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__98378 = i + 1;
      var G__98379 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__98378;
      out = G__98379;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__98380 = o;
      if (G__98380) {
        var bit__4662__auto__ = G__98380.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4662__auto__ || G__98380.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__98380.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__98380);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__98380);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__98381 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__98381) : cljs.core.key.call(null, G__98381);
      }(), function() {
        var G__98382 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__98382) : cljs.core.val.call(null, G__98382);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__98385 = cljs.core.next(es);
          var G__98386 = tcoll__$1.assoc_BANG_(function() {
            var G__98383 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__98383) : cljs.core.key.call(null, G__98383);
          }(), function() {
            var G__98384 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__98384) : cljs.core.val.call(null, G__98384);
          }());
          es = G__98385;
          tcoll__$1 = G__98386;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__98387 = ascending_QMARK_ ? t.left : t.right;
      var G__98388 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__98387;
      stack__$1 = G__98388;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__98401 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__98401) : cljs.core.deref.call(null, G__98401);
  } else {
    var init__$2 = function() {
      var G__98402 = init__$1;
      var G__98403 = node.key;
      var G__98404 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__98402, G__98403, G__98404) : f.call(null, G__98402, G__98403, G__98404);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__98405 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__98405) : cljs.core.deref.call(null, G__98405);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__98406 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__98406) : cljs.core.deref.call(null, G__98406);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__98408 = null;
  var G__98408__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__98408__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__98408 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__98408__2.call(this, self__, k);
      case 3:
        return G__98408__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__98408.cljs$core$IFn$_invoke$arity$2 = G__98408__2;
  G__98408.cljs$core$IFn$_invoke$arity$3 = G__98408__3;
  return G__98408;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args98407) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args98407)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__98410 = null;
  var G__98410__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__98410__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__98410 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__98410__2.call(this, self__, k);
      case 3:
        return G__98410__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__98410.cljs$core$IFn$_invoke$arity$2 = G__98410__2;
  G__98410.cljs$core$IFn$_invoke$arity$3 = G__98410__3;
  return G__98410;
}();
cljs.core.RedNode.prototype.apply = function(self__, args98409) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args98409)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__98423 = k;
      var G__98424 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__98423, G__98424) : comp.call(null, G__98423, G__98424);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append(left, right.left), right.right, null);
        } else {
          var app = tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__98443 = k;
      var G__98444 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__98443, G__98444) : comp.call(null, G__98443, G__98444);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__98455 = k;
    var G__98456 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__98455, G__98456) : comp.call(null, G__98455, G__98456);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__98458 = cljs.core.seq(coll);
  var chunk__98459 = null;
  var count__98460 = 0;
  var i__98461 = 0;
  while (true) {
    if (i__98461 < count__98460) {
      var vec__98462 = chunk__98459.cljs$core$IIndexed$_nth$arity$2(null, i__98461);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98462, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98462, 1, null);
      var G__98463_98475 = v;
      var G__98464_98476 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98463_98475, G__98464_98476) : f.call(null, G__98463_98475, G__98464_98476);
      var G__98477 = seq__98458;
      var G__98478 = chunk__98459;
      var G__98479 = count__98460;
      var G__98480 = i__98461 + 1;
      seq__98458 = G__98477;
      chunk__98459 = G__98478;
      count__98460 = G__98479;
      i__98461 = G__98480;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__98458);
      if (temp__4126__auto__) {
        var seq__98458__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__98458__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__98458__$1);
          var G__98481 = cljs.core.chunk_rest(seq__98458__$1);
          var G__98482 = c__4768__auto__;
          var G__98483 = cljs.core.count(c__4768__auto__);
          var G__98484 = 0;
          seq__98458 = G__98481;
          chunk__98459 = G__98482;
          count__98460 = G__98483;
          i__98461 = G__98484;
          continue;
        } else {
          var vec__98465 = cljs.core.first(seq__98458__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98465, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98465, 1, null);
          var G__98466_98485 = v;
          var G__98467_98486 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98466_98485, G__98467_98486) : f.call(null, G__98466_98485, G__98467_98486);
          var G__98487 = cljs.core.next(seq__98458__$1);
          var G__98488 = null;
          var G__98489 = 0;
          var G__98490 = 0;
          seq__98458 = G__98487;
          chunk__98459 = G__98488;
          count__98460 = G__98489;
          i__98461 = G__98490;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__98468 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__98468) : cljs.core.keys.call(null, G__98468);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__98469 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__98469) : cljs.core.vals.call(null, G__98469);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__98470 = k;
        var G__98471 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__98470, G__98471) : self__.comp.call(null, G__98470, G__98471);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__98491 = t.left;
          t = G__98491;
          continue;
        } else {
          var G__98492 = t.right;
          t = G__98492;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__98493 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__98494 = cljs.core.next(es);
          ret = G__98493;
          es = G__98494;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__98495 = null;
  var G__98495__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__98495__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__98495 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__98495__2.call(this, self__, k);
      case 3:
        return G__98495__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__98495.cljs$core$IFn$_invoke$arity$2 = G__98495__2;
  G__98495.cljs$core$IFn$_invoke$arity$3 = G__98495__3;
  return G__98495;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args98457) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args98457)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__98472 = k;
          var G__98473 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__98472, G__98473) : self__.comp.call(null, G__98472, G__98473);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__98496 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__98497 = t.left;
              stack = G__98496;
              t = G__98497;
              continue;
            } else {
              var G__98498 = stack;
              var G__98499 = t.right;
              stack = G__98498;
              t = G__98499;
              continue;
            }
          } else {
            if (c > 0) {
              var G__98500 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__98501 = t.right;
              stack = G__98500;
              t = G__98501;
              continue;
            } else {
              var G__98502 = stack;
              var G__98503 = t.left;
              stack = G__98502;
              t = G__98503;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__98474 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__98474) : cljs.core.key.call(null, G__98474);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__98504 = cljs.core.nnext(in$);
        var G__98505 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__98504;
        out = G__98505;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__98506__i = 0, G__98506__a = new Array(arguments.length - 0);
      while (G__98506__i < G__98506__a.length) {
        G__98506__a[G__98506__i] = arguments[G__98506__i + 0];
        ++G__98506__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__98506__a, 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__98507) {
    var keyvals = cljs.core.seq(arglist__98507);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return cljs.core.PersistentArrayMap.fromArray(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array, keyvals), true, false);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__98508__i = 0, G__98508__a = new Array(arguments.length - 0);
      while (G__98508__i < G__98508__a.length) {
        G__98508__a[G__98508__i] = arguments[G__98508__i + 0];
        ++G__98508__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__98508__a, 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__98509) {
    var keyvals = cljs.core.seq(arglist__98509);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj98513 = {};
      return obj98513;
    }();
    var kvs = cljs.core.seq(keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first(kvs));
        obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
        var G__98514 = cljs.core.nnext(kvs);
        kvs = G__98514;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__98515__i = 0, G__98515__a = new Array(arguments.length - 0);
      while (G__98515__i < G__98515__a.length) {
        G__98515__a[G__98515__i] = arguments[G__98515__i + 0];
        ++G__98515__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__98515__a, 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__98516) {
    var keyvals = cljs.core.seq(arglist__98516);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__98517 = cljs.core.nnext(in$);
        var G__98518 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__98517;
        out = G__98518;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      var G__98519__i = 0, G__98519__a = new Array(arguments.length - 0);
      while (G__98519__i < G__98519__a.length) {
        G__98519__a[G__98519__i] = arguments[G__98519__i + 0];
        ++G__98519__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__98519__a, 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__98520) {
    var keyvals = cljs.core.seq(arglist__98520);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq(keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__98521 = cljs.core.nnext(in$);
        var G__98522 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
        in$ = G__98521;
        out = G__98522;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      var G__98523__i = 0, G__98523__a = new Array(arguments.length - 1);
      while (G__98523__i < G__98523__a.length) {
        G__98523__a[G__98523__i] = arguments[G__98523__i + 1];
        ++G__98523__i;
      }
      keyvals = new cljs.core.IndexedSeq(G__98523__a, 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__98524) {
    var comparator = cljs.core.first(arglist__98524);
    var keyvals = cljs.core.rest(arglist__98524);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__98525 = self__.mseq;
    if (G__98525) {
      var bit__4662__auto__ = G__98525.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4662__auto__ || G__98525.cljs$core$INext$) {
        return true;
      } else {
        if (!G__98525.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__98525);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__98525);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__98526 = self__.mseq;
    if (G__98526) {
      var bit__4662__auto__ = G__98526.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4662__auto__ || G__98526.cljs$core$INext$) {
        return true;
      } else {
        if (!G__98526.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__98526);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__98526);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__98527 = self__.mseq;
    if (G__98527) {
      var bit__4662__auto__ = G__98527.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4662__auto__ || G__98527.cljs$core$INext$) {
        return true;
      } else {
        if (!G__98527.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__98527);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__98527);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__98528 = self__.mseq;
    if (G__98528) {
      var bit__4662__auto__ = G__98528.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4662__auto__ || G__98528.cljs$core$INext$) {
        return true;
      } else {
        if (!G__98528.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__98528);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__98528);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq(hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__98529_SHARP_, p2__98530_SHARP_) {
        return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
          var or__3981__auto__ = p1__98529_SHARP_;
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__98530_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      var G__98531__i = 0, G__98531__a = new Array(arguments.length - 0);
      while (G__98531__i < G__98531__a.length) {
        G__98531__a[G__98531__i] = arguments[G__98531__i + 0];
        ++G__98531__i;
      }
      maps = new cljs.core.IndexedSeq(G__98531__a, 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__98532) {
    var maps = cljs.core.seq(arglist__98532);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first(e);
        var v = cljs.core.second(e);
        if (cljs.core.contains_QMARK_(m, k)) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
            var G__98535 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
            var G__98536 = v;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98535, G__98536) : f.call(null, G__98535, G__98536);
          }());
        } else {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
            var or__3981__auto__ = m1;
            if (cljs.core.truth_(or__3981__auto__)) {
              return or__3981__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq(m2));
        };
      }(merge_entry);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      var G__98537__i = 0, G__98537__a = new Array(arguments.length - 1);
      while (G__98537__i < G__98537__a.length) {
        G__98537__a[G__98537__i] = arguments[G__98537__i + 1];
        ++G__98537__i;
      }
      maps = new cljs.core.IndexedSeq(G__98537__a, 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__98538) {
    var f = cljs.core.first(arglist__98538);
    var maps = cljs.core.rest(arglist__98538);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__98539 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__98540 = cljs.core.next(keys);
      ret = G__98539;
      keys = G__98540;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__98543 = cljs.core.seq(coll);
  var chunk__98544 = null;
  var count__98545 = 0;
  var i__98546 = 0;
  while (true) {
    if (i__98546 < count__98545) {
      var vec__98547 = chunk__98544.cljs$core$IIndexed$_nth$arity$2(null, i__98546);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98547, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98547, 1, null);
      var G__98548_98553 = v;
      var G__98549_98554 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98548_98553, G__98549_98554) : f.call(null, G__98548_98553, G__98549_98554);
      var G__98555 = seq__98543;
      var G__98556 = chunk__98544;
      var G__98557 = count__98545;
      var G__98558 = i__98546 + 1;
      seq__98543 = G__98555;
      chunk__98544 = G__98556;
      count__98545 = G__98557;
      i__98546 = G__98558;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__98543);
      if (temp__4126__auto__) {
        var seq__98543__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__98543__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__98543__$1);
          var G__98559 = cljs.core.chunk_rest(seq__98543__$1);
          var G__98560 = c__4768__auto__;
          var G__98561 = cljs.core.count(c__4768__auto__);
          var G__98562 = 0;
          seq__98543 = G__98559;
          chunk__98544 = G__98560;
          count__98545 = G__98561;
          i__98546 = G__98562;
          continue;
        } else {
          var vec__98550 = cljs.core.first(seq__98543__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98550, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98550, 1, null);
          var G__98551_98563 = v;
          var G__98552_98564 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98551_98563, G__98552_98564) : f.call(null, G__98551_98563, G__98552_98564);
          var G__98565 = cljs.core.next(seq__98543__$1);
          var G__98566 = null;
          var G__98567 = 0;
          var G__98568 = 0;
          seq__98543 = G__98565;
          chunk__98544 = G__98566;
          count__98545 = G__98567;
          i__98546 = G__98568;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__98541_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__98541_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__98569 = null;
  var G__98569__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__98569__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__98569 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__98569__2.call(this, self__, k);
      case 3:
        return G__98569__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__98569.cljs$core$IFn$_invoke$arity$2 = G__98569__2;
  G__98569.cljs$core$IFn$_invoke$arity$3 = G__98569__3;
  return G__98569;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args98542) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args98542)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__98570 = i + 1;
        var G__98571 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__98570;
        out = G__98571;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__98572 = i + 1;
        var G__98573 = cljs.core._conj_BANG_(out, items[i]);
        i = G__98572;
        out = G__98573;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__98575 = null;
  var G__98575__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__98575__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__98575 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__98575__2.call(this, self__, k);
      case 3:
        return G__98575__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__98575.cljs$core$IFn$_invoke$arity$2 = G__98575__2;
  G__98575.cljs$core$IFn$_invoke$arity$3 = G__98575__3;
  return G__98575;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args98574) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args98574)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__98578 = cljs.core.seq(coll);
  var chunk__98579 = null;
  var count__98580 = 0;
  var i__98581 = 0;
  while (true) {
    if (i__98581 < count__98580) {
      var vec__98582 = chunk__98579.cljs$core$IIndexed$_nth$arity$2(null, i__98581);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98582, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98582, 1, null);
      var G__98583_98588 = v;
      var G__98584_98589 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98583_98588, G__98584_98589) : f.call(null, G__98583_98588, G__98584_98589);
      var G__98590 = seq__98578;
      var G__98591 = chunk__98579;
      var G__98592 = count__98580;
      var G__98593 = i__98581 + 1;
      seq__98578 = G__98590;
      chunk__98579 = G__98591;
      count__98580 = G__98592;
      i__98581 = G__98593;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__98578);
      if (temp__4126__auto__) {
        var seq__98578__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__98578__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__98578__$1);
          var G__98594 = cljs.core.chunk_rest(seq__98578__$1);
          var G__98595 = c__4768__auto__;
          var G__98596 = cljs.core.count(c__4768__auto__);
          var G__98597 = 0;
          seq__98578 = G__98594;
          chunk__98579 = G__98595;
          count__98580 = G__98596;
          i__98581 = G__98597;
          continue;
        } else {
          var vec__98585 = cljs.core.first(seq__98578__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98585, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98585, 1, null);
          var G__98586_98598 = v;
          var G__98587_98599 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98586_98598, G__98587_98599) : f.call(null, G__98586_98598, G__98587_98599);
          var G__98600 = cljs.core.next(seq__98578__$1);
          var G__98601 = null;
          var G__98602 = 0;
          var G__98603 = 0;
          seq__98578 = G__98600;
          chunk__98579 = G__98601;
          count__98580 = G__98602;
          i__98581 = G__98603;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__98576_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__98576_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__98604 = null;
  var G__98604__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__98604__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__98604 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__98604__2.call(this, self__, k);
      case 3:
        return G__98604__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__98604.cljs$core$IFn$_invoke$arity$2 = G__98604__2;
  G__98604.cljs$core$IFn$_invoke$arity$3 = G__98604__3;
  return G__98604;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args98577) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args98577)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4862__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4862__auto__.length) {
        var G__98605 = i + 1;
        var G__98606 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__98605;
        res = G__98606;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__98607 = in$__$1.cljs$core$INext$_next$arity$1(null);
          var G__98608 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__98607;
          out = G__98608;
          continue;
        } else {
          return out.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__98609__delegate = function(keys) {
      return cljs.core.set(keys);
    };
    var G__98609 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        var G__98610__i = 0, G__98610__a = new Array(arguments.length - 0);
        while (G__98610__i < G__98610__a.length) {
          G__98610__a[G__98610__i] = arguments[G__98610__i + 0];
          ++G__98610__i;
        }
        keys = new cljs.core.IndexedSeq(G__98610__a, 0);
      }
      return G__98609__delegate.call(this, keys);
    };
    G__98609.cljs$lang$maxFixedArity = 0;
    G__98609.cljs$lang$applyTo = function(arglist__98611) {
      var keys = cljs.core.seq(arglist__98611);
      return G__98609__delegate(keys);
    };
    G__98609.cljs$core$IFn$_invoke$arity$variadic = G__98609__delegate;
    return G__98609;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        var G__98612 = null;
        if (arguments.length > 0) {
          var G__98613__i = 0, G__98613__a = new Array(arguments.length - 0);
          while (G__98613__i < G__98613__a.length) {
            G__98613__a[G__98613__i] = arguments[G__98613__i + 0];
            ++G__98613__i;
          }
          G__98612 = new cljs.core.IndexedSeq(G__98613__a, 0);
        }
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(G__98612);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      var G__98614__i = 0, G__98614__a = new Array(arguments.length - 0);
      while (G__98614__i < G__98614__a.length) {
        G__98614__a[G__98614__i] = arguments[G__98614__i + 0];
        ++G__98614__i;
      }
      keys = new cljs.core.IndexedSeq(G__98614__a, 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__98615) {
    var keys = cljs.core.seq(arglist__98615);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      var G__98616__i = 0, G__98616__a = new Array(arguments.length - 1);
      while (G__98616__i < G__98616__a.length) {
        G__98616__a[G__98616__i] = arguments[G__98616__i + 1];
        ++G__98616__i;
      }
      keys = new cljs.core.IndexedSeq(G__98616__a, 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__98617) {
    var comparator = cljs.core.first(arglist__98617);
    var keys = cljs.core.rest(arglist__98617);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__98618_SHARP_) {
      var temp__4124__auto__ = cljs.core.find(smap, p1__98618_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val(e);
      } else {
        return p1__98618_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_(coll)) {
      var n = cljs.core.count(coll);
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
    } else {
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__98619_SHARP_) {
        var temp__4124__auto__ = cljs.core.find(smap, p1__98619_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second(e);
        } else {
          return p1__98619_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function() {
  var distinct = null;
  var distinct__0 = function() {
    return function(rf) {
      var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
      return function(seen) {
        return function() {
          var G__98640 = null;
          var G__98640__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__98640__1 = function(result) {
            var G__98630 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__98630) : rf.call(null, G__98630);
          };
          var G__98640__2 = function(result, input) {
            if (cljs.core.contains_QMARK_(function() {
              var G__98631 = seen;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__98631) : cljs.core.deref.call(null, G__98631);
            }(), input)) {
              return result;
            } else {
              seen.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen.cljs$core$IDeref$_deref$arity$1(null), input));
              var G__98632 = result;
              var G__98633 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__98632, G__98633) : rf.call(null, G__98632, G__98633);
            }
          };
          G__98640 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__98640__0.call(this);
              case 1:
                return G__98640__1.call(this, result);
              case 2:
                return G__98640__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__98640.cljs$core$IFn$_invoke$arity$0 = G__98640__0;
          G__98640.cljs$core$IFn$_invoke$arity$1 = G__98640__1;
          G__98640.cljs$core$IFn$_invoke$arity$2 = G__98640__2;
          return G__98640;
        }();
      }(seen);
    };
  };
  var distinct__1 = function(coll) {
    var step = function step(xs, seen) {
      return new cljs.core.LazySeq(null, function() {
        return function(p__98638, seen__$1) {
          while (true) {
            var vec__98639 = p__98638;
            var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98639, 0, null);
            var xs__$1 = vec__98639;
            var temp__4126__auto__ = cljs.core.seq(xs__$1);
            if (temp__4126__auto__) {
              var s = temp__4126__auto__;
              if (cljs.core.contains_QMARK_(seen__$1, f)) {
                var G__98641 = cljs.core.rest(s);
                var G__98642 = seen__$1;
                p__98638 = G__98641;
                seen__$1 = G__98642;
                continue;
              } else {
                return cljs.core.cons(f, step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
              }
            } else {
              return null;
            }
            break;
          }
        }.call(null, xs, seen);
      }, null, null);
    };
    return step(coll, cljs.core.PersistentHashSet.EMPTY);
  };
  distinct = function(coll) {
    switch(arguments.length) {
      case 0:
        return distinct__0.call(this);
      case 1:
        return distinct__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct.cljs$core$IFn$_invoke$arity$0 = distinct__0;
  distinct.cljs$core$IFn$_invoke$arity$1 = distinct__1;
  return distinct;
}();
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__98643 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__98644 = cljs.core.next(s__$1);
      ret = G__98643;
      s__$1 = G__98644;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__98646 = x;
    if (G__98646) {
      var bit__4655__auto__ = G__98646.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4655__auto__ || G__98646.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__98647 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__98648 = cljs.core.next(ks);
      var G__98649 = cljs.core.next(vs);
      map = G__98647;
      ks = G__98648;
      vs = G__98649;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (function() {
      var G__98660 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__98660) : k.call(null, G__98660);
    }() > function() {
      var G__98661 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__98661) : k.call(null, G__98661);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__98662__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__98650_SHARP_, p2__98651_SHARP_) {
        return max_key.cljs$core$IFn$_invoke$arity$3(k, p1__98650_SHARP_, p2__98651_SHARP_);
      }, max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__98662 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__98663__i = 0, G__98663__a = new Array(arguments.length - 3);
        while (G__98663__i < G__98663__a.length) {
          G__98663__a[G__98663__i] = arguments[G__98663__i + 3];
          ++G__98663__i;
        }
        more = new cljs.core.IndexedSeq(G__98663__a, 0);
      }
      return G__98662__delegate.call(this, k, x, y, more);
    };
    G__98662.cljs$lang$maxFixedArity = 3;
    G__98662.cljs$lang$applyTo = function(arglist__98664) {
      var k = cljs.core.first(arglist__98664);
      arglist__98664 = cljs.core.next(arglist__98664);
      var x = cljs.core.first(arglist__98664);
      arglist__98664 = cljs.core.next(arglist__98664);
      var y = cljs.core.first(arglist__98664);
      var more = cljs.core.rest(arglist__98664);
      return G__98662__delegate(k, x, y, more);
    };
    G__98662.cljs$core$IFn$_invoke$arity$variadic = G__98662__delegate;
    return G__98662;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        var G__98665 = null;
        if (arguments.length > 3) {
          var G__98666__i = 0, G__98666__a = new Array(arguments.length - 3);
          while (G__98666__i < G__98666__a.length) {
            G__98666__a[G__98666__i] = arguments[G__98666__i + 3];
            ++G__98666__i;
          }
          G__98665 = new cljs.core.IndexedSeq(G__98666__a, 0);
        }
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__98665);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (function() {
      var G__98677 = x;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__98677) : k.call(null, G__98677);
    }() < function() {
      var G__98678 = y;
      return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__98678) : k.call(null, G__98678);
    }()) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__98679__delegate = function(k, x, y, more) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__98667_SHARP_, p2__98668_SHARP_) {
        return min_key.cljs$core$IFn$_invoke$arity$3(k, p1__98667_SHARP_, p2__98668_SHARP_);
      }, min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
    };
    var G__98679 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        var G__98680__i = 0, G__98680__a = new Array(arguments.length - 3);
        while (G__98680__i < G__98680__a.length) {
          G__98680__a[G__98680__i] = arguments[G__98680__i + 3];
          ++G__98680__i;
        }
        more = new cljs.core.IndexedSeq(G__98680__a, 0);
      }
      return G__98679__delegate.call(this, k, x, y, more);
    };
    G__98679.cljs$lang$maxFixedArity = 3;
    G__98679.cljs$lang$applyTo = function(arglist__98681) {
      var k = cljs.core.first(arglist__98681);
      arglist__98681 = cljs.core.next(arglist__98681);
      var x = cljs.core.first(arglist__98681);
      arglist__98681 = cljs.core.next(arglist__98681);
      var y = cljs.core.first(arglist__98681);
      var more = cljs.core.rest(arglist__98681);
      return G__98679__delegate(k, x, y, more);
    };
    G__98679.cljs$core$IFn$_invoke$arity$variadic = G__98679__delegate;
    return G__98679;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        var G__98682 = null;
        if (arguments.length > 3) {
          var G__98683__i = 0, G__98683__a = new Array(arguments.length - 3);
          while (G__98683__i < G__98683__a.length) {
            G__98683__a[G__98683__i] = arguments[G__98683__i + 3];
            ++G__98683__i;
          }
          G__98682 = new cljs.core.IndexedSeq(G__98683__a, 0);
        }
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, G__98682);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list();
      return function(a) {
        return function() {
          var G__98700 = null;
          var G__98700__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__98700__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__98695 = result;
                var G__98696 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__98695, G__98696) : rf.call(null, G__98695, G__98696);
              }());
            }();
            var G__98697 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__98697) : rf.call(null, G__98697);
          };
          var G__98700__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var G__98698 = result;
              var G__98699 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__98698, G__98699) : rf.call(null, G__98698, G__98699);
            } else {
              return result;
            }
          };
          G__98700 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__98700__0.call(this);
              case 1:
                return G__98700__1.call(this, result);
              case 2:
                return G__98700__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__98700.cljs$core$IFn$_invoke$arity$0 = G__98700__0;
          G__98700.cljs$core$IFn$_invoke$arity$1 = G__98700__1;
          G__98700.cljs$core$IFn$_invoke$arity$2 = G__98700__2;
          return G__98700;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__98713 = null;
        var G__98713__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__98713__1 = function(result) {
          var G__98708 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__98708) : rf.call(null, G__98708);
        };
        var G__98713__2 = function(result, input) {
          if (cljs.core.truth_(function() {
            var G__98709 = input;
            return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__98709) : pred.call(null, G__98709);
          }())) {
            var G__98710 = result;
            var G__98711 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__98710, G__98711) : rf.call(null, G__98710, G__98711);
          } else {
            return cljs.core.reduced(result);
          }
        };
        G__98713 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__98713__0.call(this);
            case 1:
              return G__98713__1.call(this, result);
            case 2:
              return G__98713__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__98713.cljs$core$IFn$_invoke$arity$0 = G__98713__0;
        G__98713.cljs$core$IFn$_invoke$arity$1 = G__98713__1;
        G__98713.cljs$core$IFn$_invoke$arity$2 = G__98713__2;
        return G__98713;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(function() {
          var G__98712 = cljs.core.first(s);
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__98712) : pred.call(null, G__98712);
        }())) {
          return cljs.core.cons(cljs.core.first(s), take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__98718 = function() {
      var G__98720 = cljs.core._entry_key(sc, e);
      var G__98721 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__98720, G__98721) : comp.call(null, G__98720, G__98721);
    }();
    var G__98719 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__98718, G__98719) : test.call(null, G__98718, G__98719);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__98725 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98725, 0, null);
        var s = vec__98725;
        if (cljs.core.truth_(function() {
          var G__98726 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__98726) : include.call(null, G__98726);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__98727 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98727, 0, null);
      var s = vec__98727;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn(sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__98731 = temp__4126__auto__;
        var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98731, 0, null);
        var s = vec__98731;
        if (cljs.core.truth_(function() {
          var G__98732 = e;
          return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__98732) : include.call(null, G__98732);
        }())) {
          return s;
        } else {
          return cljs.core.next(s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__98733 = temp__4126__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98733, 0, null);
      var s = vec__98733;
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__98734 = (self__.end - self__.start) / self__.step;
    return Math.ceil.cljs$core$IFn$_invoke$arity$1 ? Math.ceil.cljs$core$IFn$_invoke$arity$1(G__98734) : Math.ceil.call(null, G__98734);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4402__auto__ = self__.__hash;
  if (!(h__4402__auto__ == null)) {
    return h__4402__auto__;
  } else {
    var h__4402__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4402__auto____$1;
    return h__4402__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__98735 = ret;
        var G__98736 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98735, G__98736) : f.call(null, G__98735, G__98736);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__98737 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__98737) : cljs.core.deref.call(null, G__98737);
      } else {
        var G__98738 = i + self__.step;
        var G__98739 = ret__$1;
        i = G__98738;
        ret = G__98739;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.volatile_BANG_(-1);
      return function(ia) {
        return function() {
          var G__98757 = null;
          var G__98757__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__98757__1 = function(result) {
            var G__98754 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__98754) : rf.call(null, G__98754);
          };
          var G__98757__2 = function(result, input) {
            var i = ia.cljs$core$IVolatile$_vreset_BANG_$arity$2(null, ia.cljs$core$IDeref$_deref$arity$1(null) + 1);
            if (cljs.core.rem(i, n) === 0) {
              var G__98755 = result;
              var G__98756 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__98755, G__98756) : rf.call(null, G__98755, G__98756);
            } else {
              return result;
            }
          };
          G__98757 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__98757__0.call(this);
              case 1:
                return G__98757__1.call(this, result);
              case 2:
                return G__98757__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__98757.cljs$core$IFn$_invoke$arity$0 = G__98757__0;
          G__98757.cljs$core$IFn$_invoke$arity$1 = G__98757__1;
          G__98757.cljs$core$IFn$_invoke$arity$2 = G__98757__2;
          return G__98757;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons(cljs.core.first(s), take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list();
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__98779 = null;
          var G__98779__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__98779__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              return cljs.core.unreduced(function() {
                var G__98770 = result;
                var G__98771 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__98770, G__98771) : rf.call(null, G__98770, G__98771);
              }());
            }();
            var G__98772 = result__$1;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__98772) : rf.call(null, G__98772);
          };
          var G__98779__2 = function(result, input) {
            var pval = function() {
              var G__98773 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__98773) : cljs.core.deref.call(null, G__98773);
            }();
            var val = function() {
              var G__98774 = input;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__98774) : f.call(null, G__98774);
            }();
            cljs.core.vreset_BANG_(pa, val);
            if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec(a.toArray());
              a.clear();
              var ret = function() {
                var G__98775 = result;
                var G__98776 = v;
                return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__98775, G__98776) : rf.call(null, G__98775, G__98776);
              }();
              if (cljs.core.reduced_QMARK_(ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__98779 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__98779__0.call(this);
              case 1:
                return G__98779__1.call(this, result);
              case 2:
                return G__98779__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__98779.cljs$core$IFn$_invoke$arity$0 = G__98779__0;
          G__98779.cljs$core$IFn$_invoke$arity$1 = G__98779__1;
          G__98779.cljs$core$IFn$_invoke$arity$2 = G__98779__2;
          return G__98779;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first(s);
        var fv = function() {
          var G__98777 = fst;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__98777) : f.call(null, G__98777);
        }();
        var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4126__auto__) {
          return function(p1__98758_SHARP_) {
            return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
              var G__98778 = p1__98758_SHARP_;
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__98778) : f.call(null, G__98778);
            }());
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next(s)));
        return cljs.core.cons(run, partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq(coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }());
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq(coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
          var G__98788 = init;
          var G__98789 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98788, G__98789) : f.call(null, G__98788, G__98789);
        }(), cljs.core.rest(s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__98884 = null;
      var G__98884__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }()], null);
      };
      var G__98884__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__98842 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__98842) : f.call(null, G__98842);
        }()], null);
      };
      var G__98884__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__98843 = x;
          var G__98844 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98843, G__98844) : f.call(null, G__98843, G__98844);
        }()], null);
      };
      var G__98884__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__98845 = x;
          var G__98846 = y;
          var G__98847 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__98845, G__98846, G__98847) : f.call(null, G__98845, G__98846, G__98847);
        }()], null);
      };
      var G__98884__4 = function() {
        var G__98885__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
        };
        var G__98885 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__98886__i = 0, G__98886__a = new Array(arguments.length - 3);
            while (G__98886__i < G__98886__a.length) {
              G__98886__a[G__98886__i] = arguments[G__98886__i + 3];
              ++G__98886__i;
            }
            args = new cljs.core.IndexedSeq(G__98886__a, 0);
          }
          return G__98885__delegate.call(this, x, y, z, args);
        };
        G__98885.cljs$lang$maxFixedArity = 3;
        G__98885.cljs$lang$applyTo = function(arglist__98887) {
          var x = cljs.core.first(arglist__98887);
          arglist__98887 = cljs.core.next(arglist__98887);
          var y = cljs.core.first(arglist__98887);
          arglist__98887 = cljs.core.next(arglist__98887);
          var z = cljs.core.first(arglist__98887);
          var args = cljs.core.rest(arglist__98887);
          return G__98885__delegate(x, y, z, args);
        };
        G__98885.cljs$core$IFn$_invoke$arity$variadic = G__98885__delegate;
        return G__98885;
      }();
      G__98884 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__98884__0.call(this);
          case 1:
            return G__98884__1.call(this, x);
          case 2:
            return G__98884__2.call(this, x, y);
          case 3:
            return G__98884__3.call(this, x, y, z);
          default:
            var G__98888 = null;
            if (arguments.length > 3) {
              var G__98889__i = 0, G__98889__a = new Array(arguments.length - 3);
              while (G__98889__i < G__98889__a.length) {
                G__98889__a[G__98889__i] = arguments[G__98889__i + 3];
                ++G__98889__i;
              }
              G__98888 = new cljs.core.IndexedSeq(G__98889__a, 0);
            }
            return G__98884__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__98888);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__98884.cljs$lang$maxFixedArity = 3;
      G__98884.cljs$lang$applyTo = G__98884__4.cljs$lang$applyTo;
      G__98884.cljs$core$IFn$_invoke$arity$0 = G__98884__0;
      G__98884.cljs$core$IFn$_invoke$arity$1 = G__98884__1;
      G__98884.cljs$core$IFn$_invoke$arity$2 = G__98884__2;
      G__98884.cljs$core$IFn$_invoke$arity$3 = G__98884__3;
      G__98884.cljs$core$IFn$_invoke$arity$variadic = G__98884__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__98884;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__98890 = null;
      var G__98890__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }()], null);
      };
      var G__98890__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__98848 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__98848) : f.call(null, G__98848);
        }(), function() {
          var G__98849 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__98849) : g.call(null, G__98849);
        }()], null);
      };
      var G__98890__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__98850 = x;
          var G__98851 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98850, G__98851) : f.call(null, G__98850, G__98851);
        }(), function() {
          var G__98852 = x;
          var G__98853 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__98852, G__98853) : g.call(null, G__98852, G__98853);
        }()], null);
      };
      var G__98890__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__98854 = x;
          var G__98855 = y;
          var G__98856 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__98854, G__98855, G__98856) : f.call(null, G__98854, G__98855, G__98856);
        }(), function() {
          var G__98857 = x;
          var G__98858 = y;
          var G__98859 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__98857, G__98858, G__98859) : g.call(null, G__98857, G__98858, G__98859);
        }()], null);
      };
      var G__98890__4 = function() {
        var G__98891__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
        };
        var G__98891 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__98892__i = 0, G__98892__a = new Array(arguments.length - 3);
            while (G__98892__i < G__98892__a.length) {
              G__98892__a[G__98892__i] = arguments[G__98892__i + 3];
              ++G__98892__i;
            }
            args = new cljs.core.IndexedSeq(G__98892__a, 0);
          }
          return G__98891__delegate.call(this, x, y, z, args);
        };
        G__98891.cljs$lang$maxFixedArity = 3;
        G__98891.cljs$lang$applyTo = function(arglist__98893) {
          var x = cljs.core.first(arglist__98893);
          arglist__98893 = cljs.core.next(arglist__98893);
          var y = cljs.core.first(arglist__98893);
          arglist__98893 = cljs.core.next(arglist__98893);
          var z = cljs.core.first(arglist__98893);
          var args = cljs.core.rest(arglist__98893);
          return G__98891__delegate(x, y, z, args);
        };
        G__98891.cljs$core$IFn$_invoke$arity$variadic = G__98891__delegate;
        return G__98891;
      }();
      G__98890 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__98890__0.call(this);
          case 1:
            return G__98890__1.call(this, x);
          case 2:
            return G__98890__2.call(this, x, y);
          case 3:
            return G__98890__3.call(this, x, y, z);
          default:
            var G__98894 = null;
            if (arguments.length > 3) {
              var G__98895__i = 0, G__98895__a = new Array(arguments.length - 3);
              while (G__98895__i < G__98895__a.length) {
                G__98895__a[G__98895__i] = arguments[G__98895__i + 3];
                ++G__98895__i;
              }
              G__98894 = new cljs.core.IndexedSeq(G__98895__a, 0);
            }
            return G__98890__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__98894);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__98890.cljs$lang$maxFixedArity = 3;
      G__98890.cljs$lang$applyTo = G__98890__4.cljs$lang$applyTo;
      G__98890.cljs$core$IFn$_invoke$arity$0 = G__98890__0;
      G__98890.cljs$core$IFn$_invoke$arity$1 = G__98890__1;
      G__98890.cljs$core$IFn$_invoke$arity$2 = G__98890__2;
      G__98890.cljs$core$IFn$_invoke$arity$3 = G__98890__3;
      G__98890.cljs$core$IFn$_invoke$arity$variadic = G__98890__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__98890;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__98896 = null;
      var G__98896__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
        }(), function() {
          return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
        }(), function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }()], null);
      };
      var G__98896__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__98860 = x;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__98860) : f.call(null, G__98860);
        }(), function() {
          var G__98861 = x;
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__98861) : g.call(null, G__98861);
        }(), function() {
          var G__98862 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__98862) : h.call(null, G__98862);
        }()], null);
      };
      var G__98896__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__98863 = x;
          var G__98864 = y;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__98863, G__98864) : f.call(null, G__98863, G__98864);
        }(), function() {
          var G__98865 = x;
          var G__98866 = y;
          return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__98865, G__98866) : g.call(null, G__98865, G__98866);
        }(), function() {
          var G__98867 = x;
          var G__98868 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__98867, G__98868) : h.call(null, G__98867, G__98868);
        }()], null);
      };
      var G__98896__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
          var G__98869 = x;
          var G__98870 = y;
          var G__98871 = z;
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__98869, G__98870, G__98871) : f.call(null, G__98869, G__98870, G__98871);
        }(), function() {
          var G__98872 = x;
          var G__98873 = y;
          var G__98874 = z;
          return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__98872, G__98873, G__98874) : g.call(null, G__98872, G__98873, G__98874);
        }(), function() {
          var G__98875 = x;
          var G__98876 = y;
          var G__98877 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__98875, G__98876, G__98877) : h.call(null, G__98875, G__98876, G__98877);
        }()], null);
      };
      var G__98896__4 = function() {
        var G__98897__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
        };
        var G__98897 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__98898__i = 0, G__98898__a = new Array(arguments.length - 3);
            while (G__98898__i < G__98898__a.length) {
              G__98898__a[G__98898__i] = arguments[G__98898__i + 3];
              ++G__98898__i;
            }
            args = new cljs.core.IndexedSeq(G__98898__a, 0);
          }
          return G__98897__delegate.call(this, x, y, z, args);
        };
        G__98897.cljs$lang$maxFixedArity = 3;
        G__98897.cljs$lang$applyTo = function(arglist__98899) {
          var x = cljs.core.first(arglist__98899);
          arglist__98899 = cljs.core.next(arglist__98899);
          var y = cljs.core.first(arglist__98899);
          arglist__98899 = cljs.core.next(arglist__98899);
          var z = cljs.core.first(arglist__98899);
          var args = cljs.core.rest(arglist__98899);
          return G__98897__delegate(x, y, z, args);
        };
        G__98897.cljs$core$IFn$_invoke$arity$variadic = G__98897__delegate;
        return G__98897;
      }();
      G__98896 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__98896__0.call(this);
          case 1:
            return G__98896__1.call(this, x);
          case 2:
            return G__98896__2.call(this, x, y);
          case 3:
            return G__98896__3.call(this, x, y, z);
          default:
            var G__98900 = null;
            if (arguments.length > 3) {
              var G__98901__i = 0, G__98901__a = new Array(arguments.length - 3);
              while (G__98901__i < G__98901__a.length) {
                G__98901__a[G__98901__i] = arguments[G__98901__i + 3];
                ++G__98901__i;
              }
              G__98900 = new cljs.core.IndexedSeq(G__98901__a, 0);
            }
            return G__98896__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__98900);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__98896.cljs$lang$maxFixedArity = 3;
      G__98896.cljs$lang$applyTo = G__98896__4.cljs$lang$applyTo;
      G__98896.cljs$core$IFn$_invoke$arity$0 = G__98896__0;
      G__98896.cljs$core$IFn$_invoke$arity$1 = G__98896__1;
      G__98896.cljs$core$IFn$_invoke$arity$2 = G__98896__2;
      G__98896.cljs$core$IFn$_invoke$arity$3 = G__98896__3;
      G__98896.cljs$core$IFn$_invoke$arity$variadic = G__98896__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__98896;
    }();
  };
  var juxt__4 = function() {
    var G__98902__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__98903 = null;
          var G__98903__0 = function() {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__98790_SHARP_, p2__98791_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__98790_SHARP_, function() {
                  return p2__98791_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__98791_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__98791_SHARP_.call(null);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__98903__1 = function(x) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__98792_SHARP_, p2__98793_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__98792_SHARP_, function() {
                  var G__98878 = x;
                  return p2__98793_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__98793_SHARP_.cljs$core$IFn$_invoke$arity$1(G__98878) : p2__98793_SHARP_.call(null, G__98878);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__98903__2 = function(x, y) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__98794_SHARP_, p2__98795_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__98794_SHARP_, function() {
                  var G__98879 = x;
                  var G__98880 = y;
                  return p2__98795_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__98795_SHARP_.cljs$core$IFn$_invoke$arity$2(G__98879, G__98880) : p2__98795_SHARP_.call(null, G__98879, G__98880);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__98903__3 = function(x, y, z) {
            return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
              return function(p1__98796_SHARP_, p2__98797_SHARP_) {
                return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__98796_SHARP_, function() {
                  var G__98881 = x;
                  var G__98882 = y;
                  var G__98883 = z;
                  return p2__98797_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__98797_SHARP_.cljs$core$IFn$_invoke$arity$3(G__98881, G__98882, G__98883) : p2__98797_SHARP_.call(null, G__98881, G__98882, G__98883);
                }());
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__98903__4 = function() {
            var G__98904__delegate = function(x, y, z, args) {
              return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
                return function(p1__98798_SHARP_, p2__98799_SHARP_) {
                  return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__98798_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__98799_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__98904 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                var G__98905__i = 0, G__98905__a = new Array(arguments.length - 3);
                while (G__98905__i < G__98905__a.length) {
                  G__98905__a[G__98905__i] = arguments[G__98905__i + 3];
                  ++G__98905__i;
                }
                args = new cljs.core.IndexedSeq(G__98905__a, 0);
              }
              return G__98904__delegate.call(this, x, y, z, args);
            };
            G__98904.cljs$lang$maxFixedArity = 3;
            G__98904.cljs$lang$applyTo = function(arglist__98906) {
              var x = cljs.core.first(arglist__98906);
              arglist__98906 = cljs.core.next(arglist__98906);
              var y = cljs.core.first(arglist__98906);
              arglist__98906 = cljs.core.next(arglist__98906);
              var z = cljs.core.first(arglist__98906);
              var args = cljs.core.rest(arglist__98906);
              return G__98904__delegate(x, y, z, args);
            };
            G__98904.cljs$core$IFn$_invoke$arity$variadic = G__98904__delegate;
            return G__98904;
          }();
          G__98903 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__98903__0.call(this);
              case 1:
                return G__98903__1.call(this, x);
              case 2:
                return G__98903__2.call(this, x, y);
              case 3:
                return G__98903__3.call(this, x, y, z);
              default:
                var G__98907 = null;
                if (arguments.length > 3) {
                  var G__98908__i = 0, G__98908__a = new Array(arguments.length - 3);
                  while (G__98908__i < G__98908__a.length) {
                    G__98908__a[G__98908__i] = arguments[G__98908__i + 3];
                    ++G__98908__i;
                  }
                  G__98907 = new cljs.core.IndexedSeq(G__98908__a, 0);
                }
                return G__98903__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__98907);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__98903.cljs$lang$maxFixedArity = 3;
          G__98903.cljs$lang$applyTo = G__98903__4.cljs$lang$applyTo;
          G__98903.cljs$core$IFn$_invoke$arity$0 = G__98903__0;
          G__98903.cljs$core$IFn$_invoke$arity$1 = G__98903__1;
          G__98903.cljs$core$IFn$_invoke$arity$2 = G__98903__2;
          G__98903.cljs$core$IFn$_invoke$arity$3 = G__98903__3;
          G__98903.cljs$core$IFn$_invoke$arity$variadic = G__98903__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__98903;
        }();
      }(fs__$1);
    };
    var G__98902 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        var G__98909__i = 0, G__98909__a = new Array(arguments.length - 3);
        while (G__98909__i < G__98909__a.length) {
          G__98909__a[G__98909__i] = arguments[G__98909__i + 3];
          ++G__98909__i;
        }
        fs = new cljs.core.IndexedSeq(G__98909__a, 0);
      }
      return G__98902__delegate.call(this, f, g, h, fs);
    };
    G__98902.cljs$lang$maxFixedArity = 3;
    G__98902.cljs$lang$applyTo = function(arglist__98910) {
      var f = cljs.core.first(arglist__98910);
      arglist__98910 = cljs.core.next(arglist__98910);
      var g = cljs.core.first(arglist__98910);
      arglist__98910 = cljs.core.next(arglist__98910);
      var h = cljs.core.first(arglist__98910);
      var fs = cljs.core.rest(arglist__98910);
      return G__98902__delegate(f, g, h, fs);
    };
    G__98902.cljs$core$IFn$_invoke$arity$variadic = G__98902__delegate;
    return G__98902;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        var G__98911 = null;
        if (arguments.length > 3) {
          var G__98912__i = 0, G__98912__a = new Array(arguments.length - 3);
          while (G__98912__i < G__98912__a.length) {
            G__98912__a[G__98912__i] = arguments[G__98912__i + 3];
            ++G__98912__i;
          }
          G__98911 = new cljs.core.IndexedSeq(G__98912__a, 0);
        }
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, G__98911);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq(coll)) {
        var G__98913 = cljs.core.next(coll);
        coll = G__98913;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq(coll) && n > 0) {
        var G__98914 = n - 1;
        var G__98915 = cljs.core.next(coll);
        n = G__98914;
        coll = G__98915;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__98919 = cljs.core.re_find(/^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98919, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98919, 1, null);
    var pattern = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__98919, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_98927 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__3981__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__3981__auto__)) {
              return or__3981__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__98928_98934 = cljs.core.first(coll);
          var G__98929_98935 = writer;
          var G__98930_98936 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__98928_98934, G__98929_98935, G__98930_98936) : print_one.call(null, G__98928_98934, G__98929_98935, G__98930_98936);
        } else {
        }
        var coll_98937__$1 = cljs.core.next(coll);
        var n_98938 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_98937__$1 && (n_98938 == null || !(n_98938 === 0))) {
            cljs.core._write(writer, sep);
            var G__98931_98939 = cljs.core.first(coll_98937__$1);
            var G__98932_98940 = writer;
            var G__98933_98941 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__98931_98939, G__98932_98940, G__98933_98941) : print_one.call(null, G__98931_98939, G__98932_98940, G__98933_98941);
            var G__98942 = cljs.core.next(coll_98937__$1);
            var G__98943 = n_98938 - 1;
            coll_98937__$1 = G__98942;
            n_98938 = G__98943;
            continue;
          } else {
            if (cljs.core.seq(coll_98937__$1) && n_98938 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__3981__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__3981__auto__)) {
                  return or__3981__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_98927;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__98948 = cljs.core.seq(ss);
    var chunk__98949 = null;
    var count__98950 = 0;
    var i__98951 = 0;
    while (true) {
      if (i__98951 < count__98950) {
        var s = chunk__98949.cljs$core$IIndexed$_nth$arity$2(null, i__98951);
        cljs.core._write(writer, s);
        var G__98952 = seq__98948;
        var G__98953 = chunk__98949;
        var G__98954 = count__98950;
        var G__98955 = i__98951 + 1;
        seq__98948 = G__98952;
        chunk__98949 = G__98953;
        count__98950 = G__98954;
        i__98951 = G__98955;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq(seq__98948);
        if (temp__4126__auto__) {
          var seq__98948__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_(seq__98948__$1)) {
            var c__4768__auto__ = cljs.core.chunk_first(seq__98948__$1);
            var G__98956 = cljs.core.chunk_rest(seq__98948__$1);
            var G__98957 = c__4768__auto__;
            var G__98958 = cljs.core.count(c__4768__auto__);
            var G__98959 = 0;
            seq__98948 = G__98956;
            chunk__98949 = G__98957;
            count__98950 = G__98958;
            i__98951 = G__98959;
            continue;
          } else {
            var s = cljs.core.first(seq__98948__$1);
            cljs.core._write(writer, s);
            var G__98960 = cljs.core.next(seq__98948__$1);
            var G__98961 = null;
            var G__98962 = 0;
            var G__98963 = 0;
            seq__98948 = G__98960;
            chunk__98949 = G__98961;
            count__98950 = G__98962;
            i__98951 = G__98963;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      var G__98964__i = 0, G__98964__a = new Array(arguments.length - 1);
      while (G__98964__i < G__98964__a.length) {
        G__98964__a[G__98964__i] = arguments[G__98964__i + 1];
        ++G__98964__i;
      }
      ss = new cljs.core.IndexedSeq(G__98964__a, 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__98965) {
    var writer = cljs.core.first(arglist__98965);
    var ss = cljs.core.rest(arglist__98965);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj98967 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj98967;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__98970 = '[\\\\"\b\f\n\r\t]';
    var G__98971 = "g";
    return RegExp(G__98970, G__98971);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3969__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3969__auto__)) {
          var and__3969__auto____$1 = function() {
            var G__98985 = obj;
            if (G__98985) {
              var bit__4662__auto__ = G__98985.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4662__auto__ || G__98985.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__98985.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__98985);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__98985);
            }
          }();
          if (and__3969__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__3969__auto____$1;
          }
        } else {
          return and__3969__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__98986_98996 = cljs.core.meta(obj);
        var G__98987_98997 = writer;
        var G__98988_98998 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__98986_98996, G__98987_98997, G__98988_98998) : cljs.core.pr_writer.call(null, G__98986_98996, G__98987_98997, G__98988_98998);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__98989 = obj;
            if (G__98989) {
              var bit__4655__auto__ = G__98989.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4655__auto__ || G__98989.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__98990 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__98991 = cljs.core.pr_writer;
                var G__98992 = writer;
                var G__98993 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__98990, G__98991, G__98992, G__98993) : cljs.core.print_map.call(null, G__98990, G__98991, G__98992, G__98993);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__98994 = obj;
                    return goog.isString(G__98994);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__98999 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__98999;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.regexp_QMARK_(obj)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__98995 = obj;
                            if (G__98995) {
                              var bit__4662__auto__ = G__98995.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4662__auto__ || G__98995.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__98995.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__98995);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__98995);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  var temp__4124__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var alt_impl = temp__4124__auto__;
    var G__99003 = obj;
    var G__99004 = writer;
    var G__99005 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__99003, G__99004, G__99005) : alt_impl.call(null, G__99003, G__99004, G__99005);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__99010 = cljs.core.seq(cljs.core.next(objs));
  var chunk__99011 = null;
  var count__99012 = 0;
  var i__99013 = 0;
  while (true) {
    if (i__99013 < count__99012) {
      var obj = chunk__99011.cljs$core$IIndexed$_nth$arity$2(null, i__99013);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__99014 = seq__99010;
      var G__99015 = chunk__99011;
      var G__99016 = count__99012;
      var G__99017 = i__99013 + 1;
      seq__99010 = G__99014;
      chunk__99011 = G__99015;
      count__99012 = G__99016;
      i__99013 = G__99017;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq(seq__99010);
      if (temp__4126__auto__) {
        var seq__99010__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__99010__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first(seq__99010__$1);
          var G__99018 = cljs.core.chunk_rest(seq__99010__$1);
          var G__99019 = c__4768__auto__;
          var G__99020 = cljs.core.count(c__4768__auto__);
          var G__99021 = 0;
          seq__99010 = G__99018;
          chunk__99011 = G__99019;
          count__99012 = G__99020;
          i__99013 = G__99021;
          continue;
        } else {
          var obj = cljs.core.first(seq__99010__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__99022 = cljs.core.next(seq__99010__$1);
          var G__99023 = null;
          var G__99024 = 0;
          var G__99025 = 0;
          seq__99010 = G__99022;
          chunk__99011 = G__99023;
          count__99012 = G__99024;
          i__99013 = G__99025;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__99026__i = 0, G__99026__a = new Array(arguments.length - 0);
      while (G__99026__i < G__99026__a.length) {
        G__99026__a[G__99026__i] = arguments[G__99026__i + 0];
        ++G__99026__i;
      }
      objs = new cljs.core.IndexedSeq(G__99026__a, 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__99027) {
    var objs = cljs.core.seq(arglist__99027);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__99028__i = 0, G__99028__a = new Array(arguments.length - 0);
      while (G__99028__i < G__99028__a.length) {
        G__99028__a[G__99028__i] = arguments[G__99028__i + 0];
        ++G__99028__i;
      }
      objs = new cljs.core.IndexedSeq(G__99028__a, 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__99029) {
    var objs = cljs.core.seq(arglist__99029);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__99030__i = 0, G__99030__a = new Array(arguments.length - 0);
      while (G__99030__i < G__99030__a.length) {
        G__99030__a[G__99030__i] = arguments[G__99030__i + 0];
        ++G__99030__i;
      }
      objs = new cljs.core.IndexedSeq(G__99030__a, 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__99031) {
    var objs = cljs.core.seq(arglist__99031);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__99032__i = 0, G__99032__a = new Array(arguments.length - 0);
      while (G__99032__i < G__99032__a.length) {
        G__99032__a[G__99032__i] = arguments[G__99032__i + 0];
        ++G__99032__i;
      }
      objs = new cljs.core.IndexedSeq(G__99032__a, 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__99033) {
    var objs = cljs.core.seq(arglist__99033);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__99034__i = 0, G__99034__a = new Array(arguments.length - 0);
      while (G__99034__i < G__99034__a.length) {
        G__99034__a[G__99034__i] = arguments[G__99034__i + 0];
        ++G__99034__i;
      }
      objs = new cljs.core.IndexedSeq(G__99034__a, 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__99035) {
    var objs = cljs.core.seq(arglist__99035);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__99036__i = 0, G__99036__a = new Array(arguments.length - 0);
      while (G__99036__i < G__99036__a.length) {
        G__99036__a[G__99036__i] = arguments[G__99036__i + 0];
        ++G__99036__i;
      }
      objs = new cljs.core.IndexedSeq(G__99036__a, 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__99037) {
    var objs = cljs.core.seq(arglist__99037);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__99038__i = 0, G__99038__a = new Array(arguments.length - 0);
      while (G__99038__i < G__99038__a.length) {
        G__99038__a[G__99038__i] = arguments[G__99038__i + 0];
        ++G__99038__i;
      }
      objs = new cljs.core.IndexedSeq(G__99038__a, 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__99039) {
    var objs = cljs.core.seq(arglist__99039);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline(cljs.core.pr_opts());
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__99040__i = 0, G__99040__a = new Array(arguments.length - 0);
      while (G__99040__i < G__99040__a.length) {
        G__99040__a[G__99040__i] = arguments[G__99040__i + 0];
        ++G__99040__i;
      }
      objs = new cljs.core.IndexedSeq(G__99040__a, 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__99041) {
    var objs = cljs.core.seq(arglist__99041);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__99048_99054 = cljs.core.key(e);
    var G__99049_99055 = w;
    var G__99050_99056 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__99048_99054, G__99049_99055, G__99050_99056) : print_one.call(null, G__99048_99054, G__99049_99055, G__99050_99056);
    cljs.core._write(w, " ");
    var G__99051 = cljs.core.val(e);
    var G__99052 = w;
    var G__99053 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__99051, G__99052, G__99053) : print_one.call(null, G__99051, G__99052, G__99053);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_keywords(x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols(x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      var G__99057__i = 0, G__99057__a = new Array(arguments.length - 2);
      while (G__99057__i < G__99057__a.length) {
        G__99057__a[G__99057__i] = arguments[G__99057__i + 2];
        ++G__99057__i;
      }
      args = new cljs.core.IndexedSeq(G__99057__a, 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__99058) {
    var iref = cljs.core.first(arglist__99058);
    arglist__99058 = cljs.core.next(arglist__99058);
    var f = cljs.core.first(arglist__99058);
    var args = cljs.core.rest(arglist__99058);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.cljs$core$IFn$_invoke$arity$1("G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = function() {
        var G__99061 = 0;
        return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__99061) : cljs.core.atom.call(null, G__99061);
      }();
    } else {
    }
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__99063 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99063) : cljs.core.deref.call(null, G__99063);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__99064_SHARP_, p2__99065_SHARP_) {
    var ret = function() {
      var G__99068 = p1__99064_SHARP_;
      var G__99069 = p2__99065_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__99068, G__99069) : rf.call(null, G__99068, G__99069);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__99072 = null;
      var G__99072__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__99072__1 = function(result) {
        var G__99071 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__99071) : rf.call(null, G__99071);
      };
      var G__99072__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__99072 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__99072__0.call(this);
          case 1:
            return G__99072__1.call(this, result);
          case 2:
            return G__99072__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__99072.cljs$core$IFn$_invoke$arity$0 = G__99072__0;
      G__99072.cljs$core$IFn$_invoke$arity$1 = G__99072__1;
      G__99072.cljs$core$IFn$_invoke$arity$2 = G__99072__2;
      return G__99072;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__99081 = null;
          var G__99081__0 = function() {
            return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
          };
          var G__99081__1 = function(result) {
            var G__99077 = result;
            return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__99077) : rf.call(null, G__99077);
          };
          var G__99081__2 = function(result, input) {
            var prior = function() {
              var G__99078 = pa;
              return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99078) : cljs.core.deref.call(null, G__99078);
            }();
            cljs.core.vreset_BANG_(pa, input);
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
              return result;
            } else {
              var G__99079 = result;
              var G__99080 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__99079, G__99080) : rf.call(null, G__99079, G__99080);
            }
          };
          G__99081 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__99081__0.call(this);
              case 1:
                return G__99081__1.call(this, result);
              case 2:
                return G__99081__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__99081.cljs$core$IFn$_invoke$arity$0 = G__99081__0;
          G__99081.cljs$core$IFn$_invoke$arity$1 = G__99081__1;
          G__99081.cljs$core$IFn$_invoke$arity$2 = G__99081__2;
          return G__99081;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
      return function() {
        return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
      }() < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__4959__auto__ = this;
  return cljs.core.es6_iterator(this__4959__auto__);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__99083_SHARP_, p2__99082_SHARP_) {
    var G__99085 = p2__99082_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__99085) : proc.call(null, G__99085);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj99087 = {};
  return obj99087;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._clj__GT_js[function() {
        var G__99091 = x__4625__auto__;
        return goog.typeOf(G__99091);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._key__GT_js[function() {
        var G__99095 = x__4625__auto__;
        return goog.typeOf(G__99095);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__99098 = k;
    if (G__99098) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__99098.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__99098.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__99098);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__99098);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__99099 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__99099) : cljs.core.clj__GT_js.call(null, G__99099);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__99115 = x;
      if (G__99115) {
        var bit__4662__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3981__auto__ = bit__4662__auto__;
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return G__99115.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__99115.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__99115);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__99115);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj99117 = {};
              return obj99117;
            }();
            var seq__99118_99128 = cljs.core.seq(x);
            var chunk__99119_99129 = null;
            var count__99120_99130 = 0;
            var i__99121_99131 = 0;
            while (true) {
              if (i__99121_99131 < count__99120_99130) {
                var vec__99122_99132 = chunk__99119_99129.cljs$core$IIndexed$_nth$arity$2(null, i__99121_99131);
                var k_99133 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__99122_99132, 0, null);
                var v_99134 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__99122_99132, 1, null);
                m[cljs.core.key__GT_js(k_99133)] = clj__GT_js(v_99134);
                var G__99135 = seq__99118_99128;
                var G__99136 = chunk__99119_99129;
                var G__99137 = count__99120_99130;
                var G__99138 = i__99121_99131 + 1;
                seq__99118_99128 = G__99135;
                chunk__99119_99129 = G__99136;
                count__99120_99130 = G__99137;
                i__99121_99131 = G__99138;
                continue;
              } else {
                var temp__4126__auto___99139 = cljs.core.seq(seq__99118_99128);
                if (temp__4126__auto___99139) {
                  var seq__99118_99140__$1 = temp__4126__auto___99139;
                  if (cljs.core.chunked_seq_QMARK_(seq__99118_99140__$1)) {
                    var c__4768__auto___99141 = cljs.core.chunk_first(seq__99118_99140__$1);
                    var G__99142 = cljs.core.chunk_rest(seq__99118_99140__$1);
                    var G__99143 = c__4768__auto___99141;
                    var G__99144 = cljs.core.count(c__4768__auto___99141);
                    var G__99145 = 0;
                    seq__99118_99128 = G__99142;
                    chunk__99119_99129 = G__99143;
                    count__99120_99130 = G__99144;
                    i__99121_99131 = G__99145;
                    continue;
                  } else {
                    var vec__99123_99146 = cljs.core.first(seq__99118_99140__$1);
                    var k_99147 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__99123_99146, 0, null);
                    var v_99148 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__99123_99146, 1, null);
                    m[cljs.core.key__GT_js(k_99147)] = clj__GT_js(v_99148);
                    var G__99149 = cljs.core.next(seq__99118_99140__$1);
                    var G__99150 = null;
                    var G__99151 = 0;
                    var G__99152 = 0;
                    seq__99118_99128 = G__99149;
                    chunk__99119_99129 = G__99150;
                    count__99120_99130 = G__99151;
                    i__99121_99131 = G__99152;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__99124_99153 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(clj__GT_js, x));
              var chunk__99125_99154 = null;
              var count__99126_99155 = 0;
              var i__99127_99156 = 0;
              while (true) {
                if (i__99127_99156 < count__99126_99155) {
                  var x_99157__$1 = chunk__99125_99154.cljs$core$IIndexed$_nth$arity$2(null, i__99127_99156);
                  arr.push(x_99157__$1);
                  var G__99158 = seq__99124_99153;
                  var G__99159 = chunk__99125_99154;
                  var G__99160 = count__99126_99155;
                  var G__99161 = i__99127_99156 + 1;
                  seq__99124_99153 = G__99158;
                  chunk__99125_99154 = G__99159;
                  count__99126_99155 = G__99160;
                  i__99127_99156 = G__99161;
                  continue;
                } else {
                  var temp__4126__auto___99162 = cljs.core.seq(seq__99124_99153);
                  if (temp__4126__auto___99162) {
                    var seq__99124_99163__$1 = temp__4126__auto___99162;
                    if (cljs.core.chunked_seq_QMARK_(seq__99124_99163__$1)) {
                      var c__4768__auto___99164 = cljs.core.chunk_first(seq__99124_99163__$1);
                      var G__99165 = cljs.core.chunk_rest(seq__99124_99163__$1);
                      var G__99166 = c__4768__auto___99164;
                      var G__99167 = cljs.core.count(c__4768__auto___99164);
                      var G__99168 = 0;
                      seq__99124_99153 = G__99165;
                      chunk__99125_99154 = G__99166;
                      count__99126_99155 = G__99167;
                      i__99127_99156 = G__99168;
                      continue;
                    } else {
                      var x_99169__$1 = cljs.core.first(seq__99124_99163__$1);
                      arr.push(x_99169__$1);
                      var G__99170 = cljs.core.next(seq__99124_99163__$1);
                      var G__99171 = null;
                      var G__99172 = 0;
                      var G__99173 = 0;
                      seq__99124_99153 = G__99170;
                      chunk__99125_99154 = G__99171;
                      count__99126_99155 = G__99172;
                      i__99127_99156 = G__99173;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj99175 = {};
  return obj99175;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = cljs.core._js__GT_clj[function() {
        var G__99179 = x__4625__auto__;
        return goog.typeOf(G__99179);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
  };
  var js__GT_clj__2 = function() {
    var G__99236__delegate = function(x, opts) {
      var map__99209 = opts;
      var map__99209__$1 = cljs.core.seq_QMARK_(map__99209) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__99209) : map__99209;
      var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__99209__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
      var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
      var f = function(map__99209, map__99209__$1, keywordize_keys, keyfn) {
        return function thisfn(x__$1) {
          if (function() {
            var G__99225 = x__$1;
            if (G__99225) {
              var bit__4662__auto__ = null;
              if (cljs.core.truth_(function() {
                var or__3981__auto__ = bit__4662__auto__;
                if (cljs.core.truth_(or__3981__auto__)) {
                  return or__3981__auto__;
                } else {
                  return G__99225.cljs$core$IEncodeClojure$;
                }
              }())) {
                return true;
              } else {
                if (!G__99225.cljs$lang$protocol_mask$partition$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__99225);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__99225);
            }
          }()) {
            return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
          } else {
            if (cljs.core.seq_QMARK_(x__$1)) {
              return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
            } else {
              if (cljs.core.coll_QMARK_(x__$1)) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
              } else {
                if (x__$1 instanceof Array) {
                  return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(thisfn, x__$1));
                } else {
                  if (cljs.core.type(x__$1) === Object) {
                    return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                      var iter__4737__auto__ = function(map__99209, map__99209__$1, keywordize_keys, keyfn) {
                        return function iter__99226(s__99227) {
                          return new cljs.core.LazySeq(null, function(map__99209, map__99209__$1, keywordize_keys, keyfn) {
                            return function() {
                              var s__99227__$1 = s__99227;
                              while (true) {
                                var temp__4126__auto__ = cljs.core.seq(s__99227__$1);
                                if (temp__4126__auto__) {
                                  var s__99227__$2 = temp__4126__auto__;
                                  if (cljs.core.chunked_seq_QMARK_(s__99227__$2)) {
                                    var c__4735__auto__ = cljs.core.chunk_first(s__99227__$2);
                                    var size__4736__auto__ = cljs.core.count(c__4735__auto__);
                                    var b__99229 = cljs.core.chunk_buffer(size__4736__auto__);
                                    if (function() {
                                      var i__99228 = 0;
                                      while (true) {
                                        if (i__99228 < size__4736__auto__) {
                                          var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4735__auto__, i__99228);
                                          cljs.core.chunk_append(b__99229, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                            var G__99234 = k;
                                            return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__99234) : keyfn.call(null, G__99234);
                                          }(), thisfn(x__$1[k])], null));
                                          var G__99237 = i__99228 + 1;
                                          i__99228 = G__99237;
                                          continue;
                                        } else {
                                          return true;
                                        }
                                        break;
                                      }
                                    }()) {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__99229), iter__99226(cljs.core.chunk_rest(s__99227__$2)));
                                    } else {
                                      return cljs.core.chunk_cons(cljs.core.chunk(b__99229), null);
                                    }
                                  } else {
                                    var k = cljs.core.first(s__99227__$2);
                                    return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                      var G__99235 = k;
                                      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__99235) : keyfn.call(null, G__99235);
                                    }(), thisfn(x__$1[k])], null), iter__99226(cljs.core.rest(s__99227__$2)));
                                  }
                                } else {
                                  return null;
                                }
                                break;
                              }
                            };
                          }(map__99209, map__99209__$1, keywordize_keys, keyfn), null, null);
                        };
                      }(map__99209, map__99209__$1, keywordize_keys, keyfn);
                      return iter__4737__auto__(cljs.core.js_keys(x__$1));
                    }());
                  } else {
                    return x__$1;
                  }
                }
              }
            }
          }
        };
      }(map__99209, map__99209__$1, keywordize_keys, keyfn);
      return f(x);
    };
    var G__99236 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        var G__99238__i = 0, G__99238__a = new Array(arguments.length - 1);
        while (G__99238__i < G__99238__a.length) {
          G__99238__a[G__99238__i] = arguments[G__99238__i + 1];
          ++G__99238__i;
        }
        opts = new cljs.core.IndexedSeq(G__99238__a, 0);
      }
      return G__99236__delegate.call(this, x, opts);
    };
    G__99236.cljs$lang$maxFixedArity = 1;
    G__99236.cljs$lang$applyTo = function(arglist__99239) {
      var x = cljs.core.first(arglist__99239);
      var opts = cljs.core.rest(arglist__99239);
      return G__99236__delegate(x, opts);
    };
    G__99236.cljs$core$IFn$_invoke$arity$variadic = G__99236__delegate;
    return G__99236;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        var G__99240 = null;
        if (arguments.length > 1) {
          var G__99241__i = 0, G__99241__a = new Array(arguments.length - 1);
          while (G__99241__i < G__99241__a.length) {
            G__99241__a[G__99241__i] = arguments[G__99241__i + 1];
            ++G__99241__i;
          }
          G__99240 = new cljs.core.IndexedSeq(G__99241__a, 0);
        }
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, G__99240);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = function() {
    var G__99244 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__99244) : cljs.core.atom.call(null, G__99244);
  }();
  return function(mem) {
    return function() {
      var G__99246__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__99245 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99245) : cljs.core.deref.call(null, G__99245);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__99246 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__99247__i = 0, G__99247__a = new Array(arguments.length - 0);
          while (G__99247__i < G__99247__a.length) {
            G__99247__a[G__99247__i] = arguments[G__99247__i + 0];
            ++G__99247__i;
          }
          args = new cljs.core.IndexedSeq(G__99247__a, 0);
        }
        return G__99246__delegate.call(this, args);
      };
      G__99246.cljs$lang$maxFixedArity = 0;
      G__99246.cljs$lang$applyTo = function(arglist__99248) {
        var args = cljs.core.seq(arglist__99248);
        return G__99246__delegate(args);
      };
      G__99246.cljs$core$IFn$_invoke$arity$variadic = G__99246__delegate;
      return G__99246;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }();
      if (cljs.core.fn_QMARK_(ret)) {
        var G__99250 = ret;
        f = G__99250;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__99251__delegate = function(f, args) {
      return trampoline.cljs$core$IFn$_invoke$arity$1(function() {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
      });
    };
    var G__99251 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        var G__99252__i = 0, G__99252__a = new Array(arguments.length - 1);
        while (G__99252__i < G__99252__a.length) {
          G__99252__a[G__99252__i] = arguments[G__99252__i + 1];
          ++G__99252__i;
        }
        args = new cljs.core.IndexedSeq(G__99252__a, 0);
      }
      return G__99251__delegate.call(this, f, args);
    };
    G__99251.cljs$lang$maxFixedArity = 1;
    G__99251.cljs$lang$applyTo = function(arglist__99253) {
      var f = cljs.core.first(arglist__99253);
      var args = cljs.core.rest(arglist__99253);
      return G__99251__delegate(f, args);
    };
    G__99251.cljs$core$IFn$_invoke$arity$variadic = G__99251__delegate;
    return G__99251;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        var G__99254 = null;
        if (arguments.length > 1) {
          var G__99255__i = 0, G__99255__a = new Array(arguments.length - 1);
          while (G__99255__i < G__99255__a.length) {
            G__99255__a[G__99255__i] = arguments[G__99255__i + 1];
            ++G__99255__i;
          }
          G__99254 = new cljs.core.IndexedSeq(G__99255__a, 0);
        }
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, G__99254);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.cljs$core$IFn$_invoke$arity$1(1);
  };
  var rand__1 = function(n) {
    return function() {
      return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
    }() * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  var G__99258 = function() {
    return Math.random.cljs$core$IFn$_invoke$arity$0 ? Math.random.cljs$core$IFn$_invoke$arity$0() : Math.random.call(null);
  }() * n;
  return Math.floor.cljs$core$IFn$_invoke$arity$1 ? Math.floor.cljs$core$IFn$_invoke$arity$1(G__99258) : Math.floor.call(null, G__99258);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__99260 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__99260) : f.call(null, G__99260);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__99262 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__99262) : cljs.core.atom.call(null, G__99262);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      var G__99263__i = 0, G__99263__a = new Array(arguments.length - 1);
      while (G__99263__i < G__99263__a.length) {
        G__99263__a[G__99263__i] = arguments[G__99263__i + 1];
        ++G__99263__i;
      }
      args = new cljs.core.IndexedSeq(G__99263__a, 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__99264) {
    var f = cljs.core.first(arglist__99264);
    var args = cljs.core.rest(arglist__99264);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__99329 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99329) : cljs.core.deref.call(null, G__99329);
    }(), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3981__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
    if (or__3981__auto__) {
      return or__3981__auto__;
    } else {
      var or__3981__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3981__auto____$1) {
        return or__3981__auto____$1;
      } else {
        var and__3969__auto__ = cljs.core.vector_QMARK_(parent);
        if (and__3969__auto__) {
          var and__3969__auto____$1 = cljs.core.vector_QMARK_(child);
          if (and__3969__auto____$1) {
            var and__3969__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
            if (and__3969__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count(parent)) {
                  return ret;
                } else {
                  var G__99354 = isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                    var G__99352 = i;
                    return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__99352) : child.call(null, G__99352);
                  }(), function() {
                    var G__99353 = i;
                    return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__99353) : parent.call(null, G__99353);
                  }());
                  var G__99355 = i + 1;
                  ret = G__99354;
                  i = G__99355;
                  continue;
                }
                break;
              }
            } else {
              return and__3969__auto____$2;
            }
          } else {
            return and__3969__auto____$1;
          }
        } else {
          return and__3969__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.cljs$core$IFn$_invoke$arity$2(function() {
      var G__99359 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99359) : cljs.core.deref.call(null, G__99359);
    }(), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.cljs$core$IFn$_invoke$arity$2(function() {
      var G__99363 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99363) : cljs.core.deref.call(null, G__99363);
    }(), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.cljs$core$IFn$_invoke$arity$2(function() {
      var G__99367 = cljs.core.get_global_hierarchy();
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99367) : cljs.core.deref.call(null, G__99367);
    }(), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace(parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(derive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
              var G__99376 = target;
              return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__99376) : targets.call(null, G__99376);
            }())));
          };
        }(tp, td, ta), m, cljs.core.cons(source, function() {
          var G__99377 = source;
          return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__99377) : sources.call(null, G__99377);
        }()));
      };
    }(tp, td, ta);
    var or__3981__auto__ = cljs.core.contains_QMARK_(function() {
      var G__99381 = tag;
      return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__99381) : tp.call(null, G__99381);
    }(), parent) ? null : function() {
      if (cljs.core.contains_QMARK_(function() {
        var G__99382 = tag;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__99382) : ta.call(null, G__99382);
      }(), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_(function() {
        var G__99383 = parent;
        return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__99383) : ta.call(null, G__99383);
      }(), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
      "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(underive, cljs.core.array_seq([tag, parent], 0));
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(function() {
      var G__99390 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__99390) : parentMap.call(null, G__99390);
    }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
      var G__99391 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__99391) : parentMap.call(null, G__99391);
    }(), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
    var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
      return function(p1__99384_SHARP_) {
        return cljs.core.cons(cljs.core.first(p1__99384_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__99384_SHARP_), cljs.core.second(p1__99384_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
    if (cljs.core.contains_QMARK_(function() {
      var G__99392 = tag;
      return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__99392) : parentMap.call(null, G__99392);
    }(), parent)) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__99385_SHARP_, p2__99386_SHARP_) {
          return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__99385_SHARP_, p2__99386_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__99395 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99395) : cljs.core.deref.call(null, G__99395);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__99396 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99396) : cljs.core.deref.call(null, G__99396);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__99412 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99412) : cljs.core.deref.call(null, G__99412);
  }().call(null, x);
  var or__3981__auto__ = cljs.core.truth_(function() {
    var and__3969__auto__ = xprefs;
    if (cljs.core.truth_(and__3969__auto__)) {
      var G__99414 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__99414) : xprefs.call(null, G__99414);
    } else {
      return and__3969__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    var or__3981__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__99415 = cljs.core.rest(ps);
          ps = G__99415;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3981__auto____$1)) {
      return or__3981__auto____$1;
    } else {
      var or__3981__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__99416 = cljs.core.rest(ps);
            ps = G__99416;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3981__auto____$2)) {
        return or__3981__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3981__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__99430) {
    var vec__99431 = p__99430;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__99431, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__99431, 1, null);
    var e = vec__99431;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__99432 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99432) : cljs.core.deref.call(null, G__99432);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3981__auto__ = be == null;
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__99433 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99433) : cljs.core.deref.call(null, G__99433);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__99434 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99434) : cljs.core.deref.call(null, G__99434);
    }(), function() {
      var G__99435 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99435) : cljs.core.deref.call(null, G__99435);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj99437 = {};
  return obj99437;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._reset[function() {
        var G__99441 = x__4625__auto__;
        return goog.typeOf(G__99441);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._reset["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._add_method[function() {
        var G__99445 = x__4625__auto__;
        return goog.typeOf(G__99445);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._add_method["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._remove_method[function() {
        var G__99449 = x__4625__auto__;
        return goog.typeOf(G__99449);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._remove_method["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._prefer_method[function() {
        var G__99453 = x__4625__auto__;
        return goog.typeOf(G__99453);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._get_method[function() {
        var G__99457 = x__4625__auto__;
        return goog.typeOf(G__99457);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._get_method["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._methods[function() {
        var G__99461 = x__4625__auto__;
        return goog.typeOf(G__99461);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._methods["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3969__auto__ = mf;
    if (and__3969__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4625__auto__ = mf == null ? null : mf;
    return function() {
      var or__3981__auto__ = cljs.core._prefers[function() {
        var G__99465 = x__4625__auto__;
        return goog.typeOf(G__99465);
      }()];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.core._prefers["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__99467 = this$__$1;
  return goog.getUid(G__99467);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__99468 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99468) : cljs.core.deref.call(null, G__99468);
  }(), function() {
    var G__99469 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99469) : cljs.core.deref.call(null, G__99469);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = function() {
    var G__99470 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99470) : cljs.core.deref.call(null, G__99470);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__99471 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99471) : cljs.core.deref.call(null, G__99471);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__99472 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99472) : cljs.core.deref.call(null, G__99472);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__99473 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__99473) : cljs.core.deref.call(null, G__99473);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__100314 = null;
  var G__100314__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__100314__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99474 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__99474) : self__.dispatch_fn.call(null, G__99474);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99475 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__99475) : target_fn.call(null, G__99475);
  };
  var G__100314__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99476 = a;
      var G__99477 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__99476, G__99477) : self__.dispatch_fn.call(null, G__99476, G__99477);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99478 = a;
    var G__99479 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__99478, G__99479) : target_fn.call(null, G__99478, G__99479);
  };
  var G__100314__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99480 = a;
      var G__99481 = b;
      var G__99482 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__99480, G__99481, G__99482) : self__.dispatch_fn.call(null, G__99480, G__99481, G__99482);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99483 = a;
    var G__99484 = b;
    var G__99485 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__99483, G__99484, G__99485) : target_fn.call(null, G__99483, G__99484, G__99485);
  };
  var G__100314__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99486 = a;
      var G__99487 = b;
      var G__99488 = c;
      var G__99489 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__99486, G__99487, G__99488, G__99489) : self__.dispatch_fn.call(null, G__99486, G__99487, G__99488, G__99489);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99490 = a;
    var G__99491 = b;
    var G__99492 = c;
    var G__99493 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__99490, G__99491, G__99492, G__99493) : target_fn.call(null, G__99490, G__99491, G__99492, G__99493);
  };
  var G__100314__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99494 = a;
      var G__99495 = b;
      var G__99496 = c;
      var G__99497 = d;
      var G__99498 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__99494, G__99495, G__99496, G__99497, G__99498) : self__.dispatch_fn.call(null, G__99494, G__99495, G__99496, G__99497, G__99498);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99499 = a;
    var G__99500 = b;
    var G__99501 = c;
    var G__99502 = d;
    var G__99503 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__99499, G__99500, G__99501, G__99502, G__99503) : target_fn.call(null, G__99499, G__99500, G__99501, G__99502, G__99503);
  };
  var G__100314__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99504 = a;
      var G__99505 = b;
      var G__99506 = c;
      var G__99507 = d;
      var G__99508 = e;
      var G__99509 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__99504, G__99505, G__99506, G__99507, G__99508, G__99509) : self__.dispatch_fn.call(null, G__99504, G__99505, G__99506, G__99507, G__99508, G__99509);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99510 = a;
    var G__99511 = b;
    var G__99512 = c;
    var G__99513 = d;
    var G__99514 = e;
    var G__99515 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__99510, G__99511, G__99512, G__99513, G__99514, G__99515) : target_fn.call(null, G__99510, G__99511, G__99512, G__99513, G__99514, G__99515);
  };
  var G__100314__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99516 = a;
      var G__99517 = b;
      var G__99518 = c;
      var G__99519 = d;
      var G__99520 = e;
      var G__99521 = f;
      var G__99522 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__99516, G__99517, G__99518, G__99519, G__99520, G__99521, G__99522) : self__.dispatch_fn.call(null, G__99516, G__99517, G__99518, G__99519, G__99520, G__99521, G__99522);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99523 = a;
    var G__99524 = b;
    var G__99525 = c;
    var G__99526 = d;
    var G__99527 = e;
    var G__99528 = f;
    var G__99529 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__99523, G__99524, G__99525, G__99526, G__99527, G__99528, G__99529) : target_fn.call(null, G__99523, G__99524, G__99525, G__99526, G__99527, G__99528, G__99529);
  };
  var G__100314__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99530 = a;
      var G__99531 = b;
      var G__99532 = c;
      var G__99533 = d;
      var G__99534 = e;
      var G__99535 = f;
      var G__99536 = g;
      var G__99537 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__99530, G__99531, G__99532, G__99533, G__99534, G__99535, G__99536, G__99537) : self__.dispatch_fn.call(null, G__99530, G__99531, G__99532, G__99533, G__99534, G__99535, G__99536, G__99537);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99538 = a;
    var G__99539 = b;
    var G__99540 = c;
    var G__99541 = d;
    var G__99542 = e;
    var G__99543 = f;
    var G__99544 = g;
    var G__99545 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__99538, G__99539, G__99540, G__99541, G__99542, G__99543, G__99544, G__99545) : target_fn.call(null, G__99538, G__99539, G__99540, G__99541, G__99542, G__99543, G__99544, G__99545);
  };
  var G__100314__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99546 = a;
      var G__99547 = b;
      var G__99548 = c;
      var G__99549 = d;
      var G__99550 = e;
      var G__99551 = f;
      var G__99552 = g;
      var G__99553 = h;
      var G__99554 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__99546, G__99547, G__99548, G__99549, G__99550, G__99551, G__99552, G__99553, G__99554) : self__.dispatch_fn.call(null, G__99546, G__99547, G__99548, G__99549, G__99550, G__99551, G__99552, G__99553, G__99554);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99555 = a;
    var G__99556 = b;
    var G__99557 = c;
    var G__99558 = d;
    var G__99559 = e;
    var G__99560 = f;
    var G__99561 = g;
    var G__99562 = h;
    var G__99563 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__99555, G__99556, G__99557, G__99558, G__99559, G__99560, G__99561, G__99562, G__99563) : target_fn.call(null, G__99555, G__99556, G__99557, G__99558, G__99559, G__99560, G__99561, G__99562, G__99563);
  };
  var G__100314__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99564 = a;
      var G__99565 = b;
      var G__99566 = c;
      var G__99567 = d;
      var G__99568 = e;
      var G__99569 = f;
      var G__99570 = g;
      var G__99571 = h;
      var G__99572 = i;
      var G__99573 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__99564, G__99565, G__99566, G__99567, G__99568, G__99569, G__99570, G__99571, G__99572, G__99573) : self__.dispatch_fn.call(null, G__99564, G__99565, G__99566, G__99567, G__99568, G__99569, G__99570, G__99571, G__99572, G__99573);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99574 = a;
    var G__99575 = b;
    var G__99576 = c;
    var G__99577 = d;
    var G__99578 = e;
    var G__99579 = f;
    var G__99580 = g;
    var G__99581 = h;
    var G__99582 = i;
    var G__99583 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__99574, G__99575, G__99576, G__99577, G__99578, G__99579, G__99580, G__99581, G__99582, G__99583) : target_fn.call(null, G__99574, G__99575, G__99576, G__99577, G__99578, G__99579, G__99580, G__99581, G__99582, G__99583);
  };
  var G__100314__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99584 = a;
      var G__99585 = b;
      var G__99586 = c;
      var G__99587 = d;
      var G__99588 = e;
      var G__99589 = f;
      var G__99590 = g;
      var G__99591 = h;
      var G__99592 = i;
      var G__99593 = j;
      var G__99594 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__99584, G__99585, G__99586, G__99587, G__99588, G__99589, G__99590, G__99591, G__99592, G__99593, G__99594) : self__.dispatch_fn.call(null, G__99584, G__99585, G__99586, G__99587, G__99588, G__99589, G__99590, G__99591, G__99592, G__99593, G__99594);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99595 = a;
    var G__99596 = b;
    var G__99597 = c;
    var G__99598 = d;
    var G__99599 = e;
    var G__99600 = f;
    var G__99601 = g;
    var G__99602 = h;
    var G__99603 = i;
    var G__99604 = j;
    var G__99605 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__99595, G__99596, G__99597, G__99598, G__99599, G__99600, G__99601, G__99602, G__99603, G__99604, G__99605) : target_fn.call(null, G__99595, G__99596, G__99597, G__99598, G__99599, G__99600, G__99601, G__99602, G__99603, G__99604, G__99605);
  };
  var G__100314__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99606 = a;
      var G__99607 = b;
      var G__99608 = c;
      var G__99609 = d;
      var G__99610 = e;
      var G__99611 = f;
      var G__99612 = g;
      var G__99613 = h;
      var G__99614 = i;
      var G__99615 = j;
      var G__99616 = k;
      var G__99617 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__99606, G__99607, G__99608, G__99609, G__99610, G__99611, G__99612, G__99613, G__99614, G__99615, G__99616, G__99617) : self__.dispatch_fn.call(null, G__99606, G__99607, G__99608, G__99609, G__99610, G__99611, G__99612, G__99613, G__99614, G__99615, G__99616, G__99617);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99618 = a;
    var G__99619 = b;
    var G__99620 = c;
    var G__99621 = d;
    var G__99622 = e;
    var G__99623 = f;
    var G__99624 = g;
    var G__99625 = h;
    var G__99626 = i;
    var G__99627 = j;
    var G__99628 = k;
    var G__99629 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__99618, G__99619, G__99620, G__99621, G__99622, G__99623, G__99624, G__99625, G__99626, G__99627, G__99628, G__99629) : target_fn.call(null, G__99618, G__99619, G__99620, G__99621, G__99622, G__99623, G__99624, G__99625, G__99626, G__99627, G__99628, G__99629);
  };
  var G__100314__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99630 = a;
      var G__99631 = b;
      var G__99632 = c;
      var G__99633 = d;
      var G__99634 = e;
      var G__99635 = f;
      var G__99636 = g;
      var G__99637 = h;
      var G__99638 = i;
      var G__99639 = j;
      var G__99640 = k;
      var G__99641 = l;
      var G__99642 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__99630, G__99631, G__99632, G__99633, G__99634, G__99635, G__99636, G__99637, G__99638, G__99639, G__99640, G__99641, G__99642) : self__.dispatch_fn.call(null, G__99630, G__99631, G__99632, G__99633, G__99634, G__99635, G__99636, G__99637, G__99638, G__99639, G__99640, G__99641, G__99642);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99643 = a;
    var G__99644 = b;
    var G__99645 = c;
    var G__99646 = d;
    var G__99647 = e;
    var G__99648 = f;
    var G__99649 = g;
    var G__99650 = h;
    var G__99651 = i;
    var G__99652 = j;
    var G__99653 = k;
    var G__99654 = l;
    var G__99655 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__99643, G__99644, G__99645, G__99646, G__99647, G__99648, G__99649, G__99650, G__99651, G__99652, G__99653, G__99654, G__99655) : target_fn.call(null, G__99643, G__99644, G__99645, G__99646, G__99647, G__99648, G__99649, G__99650, G__99651, G__99652, G__99653, G__99654, G__99655);
  };
  var G__100314__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99656 = a;
      var G__99657 = b;
      var G__99658 = c;
      var G__99659 = d;
      var G__99660 = e;
      var G__99661 = f;
      var G__99662 = g;
      var G__99663 = h;
      var G__99664 = i;
      var G__99665 = j;
      var G__99666 = k;
      var G__99667 = l;
      var G__99668 = m;
      var G__99669 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__99656, G__99657, G__99658, G__99659, G__99660, G__99661, G__99662, G__99663, G__99664, G__99665, G__99666, G__99667, G__99668, G__99669) : self__.dispatch_fn.call(null, G__99656, G__99657, G__99658, G__99659, G__99660, G__99661, G__99662, G__99663, G__99664, G__99665, G__99666, G__99667, G__99668, G__99669);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99670 = a;
    var G__99671 = b;
    var G__99672 = c;
    var G__99673 = d;
    var G__99674 = e;
    var G__99675 = f;
    var G__99676 = g;
    var G__99677 = h;
    var G__99678 = i;
    var G__99679 = j;
    var G__99680 = k;
    var G__99681 = l;
    var G__99682 = m;
    var G__99683 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__99670, G__99671, G__99672, G__99673, G__99674, G__99675, G__99676, G__99677, G__99678, G__99679, G__99680, G__99681, G__99682, G__99683) : target_fn.call(null, G__99670, G__99671, G__99672, G__99673, G__99674, G__99675, G__99676, G__99677, G__99678, G__99679, G__99680, G__99681, G__99682, G__99683);
  };
  var G__100314__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99684 = a;
      var G__99685 = b;
      var G__99686 = c;
      var G__99687 = d;
      var G__99688 = e;
      var G__99689 = f;
      var G__99690 = g;
      var G__99691 = h;
      var G__99692 = i;
      var G__99693 = j;
      var G__99694 = k;
      var G__99695 = l;
      var G__99696 = m;
      var G__99697 = n;
      var G__99698 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__99684, G__99685, G__99686, G__99687, G__99688, G__99689, G__99690, G__99691, G__99692, G__99693, G__99694, G__99695, G__99696, G__99697, G__99698) : self__.dispatch_fn.call(null, G__99684, G__99685, G__99686, G__99687, G__99688, G__99689, G__99690, G__99691, G__99692, G__99693, G__99694, G__99695, G__99696, G__99697, G__99698);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99699 = a;
    var G__99700 = b;
    var G__99701 = c;
    var G__99702 = d;
    var G__99703 = e;
    var G__99704 = f;
    var G__99705 = g;
    var G__99706 = h;
    var G__99707 = i;
    var G__99708 = j;
    var G__99709 = k;
    var G__99710 = l;
    var G__99711 = m;
    var G__99712 = n;
    var G__99713 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__99699, G__99700, G__99701, G__99702, G__99703, G__99704, G__99705, G__99706, G__99707, G__99708, G__99709, G__99710, G__99711, G__99712, G__99713) : target_fn.call(null, G__99699, G__99700, G__99701, G__99702, G__99703, G__99704, G__99705, G__99706, G__99707, G__99708, G__99709, G__99710, G__99711, G__99712, G__99713);
  };
  var G__100314__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99714 = a;
      var G__99715 = b;
      var G__99716 = c;
      var G__99717 = d;
      var G__99718 = e;
      var G__99719 = f;
      var G__99720 = g;
      var G__99721 = h;
      var G__99722 = i;
      var G__99723 = j;
      var G__99724 = k;
      var G__99725 = l;
      var G__99726 = m;
      var G__99727 = n;
      var G__99728 = o;
      var G__99729 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__99714, G__99715, G__99716, G__99717, G__99718, G__99719, G__99720, G__99721, G__99722, G__99723, G__99724, G__99725, G__99726, G__99727, G__99728, G__99729) : self__.dispatch_fn.call(null, G__99714, G__99715, G__99716, G__99717, G__99718, G__99719, G__99720, G__99721, G__99722, G__99723, G__99724, G__99725, G__99726, G__99727, G__99728, G__99729);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99730 = a;
    var G__99731 = b;
    var G__99732 = c;
    var G__99733 = d;
    var G__99734 = e;
    var G__99735 = f;
    var G__99736 = g;
    var G__99737 = h;
    var G__99738 = i;
    var G__99739 = j;
    var G__99740 = k;
    var G__99741 = l;
    var G__99742 = m;
    var G__99743 = n;
    var G__99744 = o;
    var G__99745 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__99730, G__99731, G__99732, G__99733, G__99734, G__99735, G__99736, G__99737, G__99738, G__99739, G__99740, G__99741, G__99742, G__99743, G__99744, G__99745) : target_fn.call(null, G__99730, G__99731, G__99732, G__99733, G__99734, G__99735, G__99736, G__99737, G__99738, G__99739, G__99740, G__99741, G__99742, G__99743, G__99744, G__99745);
  };
  var G__100314__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99746 = a;
      var G__99747 = b;
      var G__99748 = c;
      var G__99749 = d;
      var G__99750 = e;
      var G__99751 = f;
      var G__99752 = g;
      var G__99753 = h;
      var G__99754 = i;
      var G__99755 = j;
      var G__99756 = k;
      var G__99757 = l;
      var G__99758 = m;
      var G__99759 = n;
      var G__99760 = o;
      var G__99761 = p;
      var G__99762 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__99746, G__99747, G__99748, G__99749, G__99750, G__99751, G__99752, G__99753, G__99754, G__99755, G__99756, G__99757, G__99758, G__99759, G__99760, G__99761, G__99762) : self__.dispatch_fn.call(null, G__99746, G__99747, G__99748, G__99749, G__99750, G__99751, G__99752, G__99753, G__99754, G__99755, G__99756, G__99757, G__99758, G__99759, G__99760, G__99761, G__99762);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99763 = a;
    var G__99764 = b;
    var G__99765 = c;
    var G__99766 = d;
    var G__99767 = e;
    var G__99768 = f;
    var G__99769 = g;
    var G__99770 = h;
    var G__99771 = i;
    var G__99772 = j;
    var G__99773 = k;
    var G__99774 = l;
    var G__99775 = m;
    var G__99776 = n;
    var G__99777 = o;
    var G__99778 = p;
    var G__99779 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__99763, G__99764, G__99765, G__99766, G__99767, G__99768, G__99769, G__99770, G__99771, G__99772, G__99773, G__99774, G__99775, G__99776, G__99777, G__99778, G__99779) : target_fn.call(null, G__99763, G__99764, G__99765, G__99766, G__99767, G__99768, G__99769, G__99770, G__99771, G__99772, G__99773, G__99774, G__99775, G__99776, G__99777, G__99778, G__99779);
  };
  var G__100314__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99780 = a;
      var G__99781 = b;
      var G__99782 = c;
      var G__99783 = d;
      var G__99784 = e;
      var G__99785 = f;
      var G__99786 = g;
      var G__99787 = h;
      var G__99788 = i;
      var G__99789 = j;
      var G__99790 = k;
      var G__99791 = l;
      var G__99792 = m;
      var G__99793 = n;
      var G__99794 = o;
      var G__99795 = p;
      var G__99796 = q;
      var G__99797 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__99780, G__99781, G__99782, G__99783, G__99784, G__99785, G__99786, G__99787, G__99788, G__99789, G__99790, G__99791, G__99792, G__99793, G__99794, G__99795, G__99796, G__99797) : self__.dispatch_fn.call(null, G__99780, G__99781, G__99782, G__99783, G__99784, G__99785, G__99786, G__99787, G__99788, G__99789, G__99790, G__99791, G__99792, G__99793, G__99794, G__99795, G__99796, G__99797);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99798 = a;
    var G__99799 = b;
    var G__99800 = c;
    var G__99801 = d;
    var G__99802 = e;
    var G__99803 = f;
    var G__99804 = g;
    var G__99805 = h;
    var G__99806 = i;
    var G__99807 = j;
    var G__99808 = k;
    var G__99809 = l;
    var G__99810 = m;
    var G__99811 = n;
    var G__99812 = o;
    var G__99813 = p;
    var G__99814 = q;
    var G__99815 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__99798, G__99799, G__99800, G__99801, G__99802, G__99803, G__99804, G__99805, G__99806, G__99807, G__99808, G__99809, G__99810, G__99811, G__99812, G__99813, G__99814, G__99815) : target_fn.call(null, G__99798, G__99799, G__99800, G__99801, G__99802, G__99803, G__99804, G__99805, G__99806, G__99807, G__99808, G__99809, G__99810, G__99811, G__99812, G__99813, G__99814, G__99815);
  };
  var G__100314__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99816 = a;
      var G__99817 = b;
      var G__99818 = c;
      var G__99819 = d;
      var G__99820 = e;
      var G__99821 = f;
      var G__99822 = g;
      var G__99823 = h;
      var G__99824 = i;
      var G__99825 = j;
      var G__99826 = k;
      var G__99827 = l;
      var G__99828 = m;
      var G__99829 = n;
      var G__99830 = o;
      var G__99831 = p;
      var G__99832 = q;
      var G__99833 = r;
      var G__99834 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__99816, G__99817, G__99818, G__99819, G__99820, G__99821, G__99822, G__99823, G__99824, G__99825, G__99826, G__99827, G__99828, G__99829, G__99830, G__99831, G__99832, G__99833, G__99834) : self__.dispatch_fn.call(null, G__99816, G__99817, G__99818, G__99819, G__99820, G__99821, G__99822, G__99823, G__99824, G__99825, G__99826, G__99827, G__99828, G__99829, G__99830, G__99831, G__99832, 
      G__99833, G__99834);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99835 = a;
    var G__99836 = b;
    var G__99837 = c;
    var G__99838 = d;
    var G__99839 = e;
    var G__99840 = f;
    var G__99841 = g;
    var G__99842 = h;
    var G__99843 = i;
    var G__99844 = j;
    var G__99845 = k;
    var G__99846 = l;
    var G__99847 = m;
    var G__99848 = n;
    var G__99849 = o;
    var G__99850 = p;
    var G__99851 = q;
    var G__99852 = r;
    var G__99853 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__99835, G__99836, G__99837, G__99838, G__99839, G__99840, G__99841, G__99842, G__99843, G__99844, G__99845, G__99846, G__99847, G__99848, G__99849, G__99850, G__99851, G__99852, G__99853) : target_fn.call(null, G__99835, G__99836, G__99837, G__99838, G__99839, G__99840, G__99841, G__99842, G__99843, G__99844, G__99845, G__99846, G__99847, G__99848, G__99849, G__99850, G__99851, G__99852, G__99853);
  };
  var G__100314__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__99854 = a;
      var G__99855 = b;
      var G__99856 = c;
      var G__99857 = d;
      var G__99858 = e;
      var G__99859 = f;
      var G__99860 = g;
      var G__99861 = h;
      var G__99862 = i;
      var G__99863 = j;
      var G__99864 = k;
      var G__99865 = l;
      var G__99866 = m;
      var G__99867 = n;
      var G__99868 = o;
      var G__99869 = p;
      var G__99870 = q;
      var G__99871 = r;
      var G__99872 = s;
      var G__99873 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__99854, G__99855, G__99856, G__99857, G__99858, G__99859, G__99860, G__99861, G__99862, G__99863, G__99864, G__99865, G__99866, G__99867, G__99868, G__99869, G__99870, G__99871, G__99872, G__99873) : self__.dispatch_fn.call(null, G__99854, G__99855, G__99856, G__99857, G__99858, G__99859, G__99860, G__99861, G__99862, G__99863, G__99864, G__99865, G__99866, G__99867, G__99868, G__99869, 
      G__99870, G__99871, G__99872, G__99873);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__99874 = a;
    var G__99875 = b;
    var G__99876 = c;
    var G__99877 = d;
    var G__99878 = e;
    var G__99879 = f;
    var G__99880 = g;
    var G__99881 = h;
    var G__99882 = i;
    var G__99883 = j;
    var G__99884 = k;
    var G__99885 = l;
    var G__99886 = m;
    var G__99887 = n;
    var G__99888 = o;
    var G__99889 = p;
    var G__99890 = q;
    var G__99891 = r;
    var G__99892 = s;
    var G__99893 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__99874, G__99875, G__99876, G__99877, G__99878, G__99879, G__99880, G__99881, G__99882, G__99883, G__99884, G__99885, G__99886, G__99887, G__99888, G__99889, G__99890, G__99891, G__99892, G__99893) : target_fn.call(null, G__99874, G__99875, G__99876, G__99877, G__99878, G__99879, G__99880, G__99881, G__99882, G__99883, G__99884, G__99885, G__99886, G__99887, G__99888, G__99889, G__99890, G__99891, G__99892, 
    G__99893);
  };
  var G__100314__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__100314 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__100314__1.call(this, self__);
      case 2:
        return G__100314__2.call(this, self__, a);
      case 3:
        return G__100314__3.call(this, self__, a, b);
      case 4:
        return G__100314__4.call(this, self__, a, b, c);
      case 5:
        return G__100314__5.call(this, self__, a, b, c, d);
      case 6:
        return G__100314__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__100314__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__100314__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__100314__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__100314__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__100314__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__100314__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__100314__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__100314__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__100314__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__100314__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__100314__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__100314__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__100314__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__100314__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__100314__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__100314__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__100314.cljs$core$IFn$_invoke$arity$1 = G__100314__1;
  G__100314.cljs$core$IFn$_invoke$arity$2 = G__100314__2;
  G__100314.cljs$core$IFn$_invoke$arity$3 = G__100314__3;
  G__100314.cljs$core$IFn$_invoke$arity$4 = G__100314__4;
  G__100314.cljs$core$IFn$_invoke$arity$5 = G__100314__5;
  G__100314.cljs$core$IFn$_invoke$arity$6 = G__100314__6;
  G__100314.cljs$core$IFn$_invoke$arity$7 = G__100314__7;
  G__100314.cljs$core$IFn$_invoke$arity$8 = G__100314__8;
  G__100314.cljs$core$IFn$_invoke$arity$9 = G__100314__9;
  G__100314.cljs$core$IFn$_invoke$arity$10 = G__100314__10;
  G__100314.cljs$core$IFn$_invoke$arity$11 = G__100314__11;
  G__100314.cljs$core$IFn$_invoke$arity$12 = G__100314__12;
  G__100314.cljs$core$IFn$_invoke$arity$13 = G__100314__13;
  G__100314.cljs$core$IFn$_invoke$arity$14 = G__100314__14;
  G__100314.cljs$core$IFn$_invoke$arity$15 = G__100314__15;
  G__100314.cljs$core$IFn$_invoke$arity$16 = G__100314__16;
  G__100314.cljs$core$IFn$_invoke$arity$17 = G__100314__17;
  G__100314.cljs$core$IFn$_invoke$arity$18 = G__100314__18;
  G__100314.cljs$core$IFn$_invoke$arity$19 = G__100314__19;
  G__100314.cljs$core$IFn$_invoke$arity$20 = G__100314__20;
  G__100314.cljs$core$IFn$_invoke$arity$21 = G__100314__21;
  G__100314.cljs$core$IFn$_invoke$arity$22 = G__100314__22;
  return G__100314;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args99466) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args99466)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__99894 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__99894) : self__.dispatch_fn.call(null, G__99894);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__99895 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__99895) : target_fn.call(null, G__99895);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__99896 = a;
    var G__99897 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__99896, G__99897) : self__.dispatch_fn.call(null, G__99896, G__99897);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__99898 = a;
  var G__99899 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__99898, G__99899) : target_fn.call(null, G__99898, G__99899);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__99900 = a;
    var G__99901 = b;
    var G__99902 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__99900, G__99901, G__99902) : self__.dispatch_fn.call(null, G__99900, G__99901, G__99902);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__99903 = a;
  var G__99904 = b;
  var G__99905 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__99903, G__99904, G__99905) : target_fn.call(null, G__99903, G__99904, G__99905);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__99906 = a;
    var G__99907 = b;
    var G__99908 = c;
    var G__99909 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__99906, G__99907, G__99908, G__99909) : self__.dispatch_fn.call(null, G__99906, G__99907, G__99908, G__99909);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__99910 = a;
  var G__99911 = b;
  var G__99912 = c;
  var G__99913 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__99910, G__99911, G__99912, G__99913) : target_fn.call(null, G__99910, G__99911, G__99912, G__99913);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__99914 = a;
    var G__99915 = b;
    var G__99916 = c;
    var G__99917 = d;
    var G__99918 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__99914, G__99915, G__99916, G__99917, G__99918) : self__.dispatch_fn.call(null, G__99914, G__99915, G__99916, G__99917, G__99918);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__99919 = a;
  var G__99920 = b;
  var G__99921 = c;
  var G__99922 = d;
  var G__99923 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__99919, G__99920, G__99921, G__99922, G__99923) : target_fn.call(null, G__99919, G__99920, G__99921, G__99922, G__99923);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__99924 = a;
    var G__99925 = b;
    var G__99926 = c;
    var G__99927 = d;
    var G__99928 = e;
    var G__99929 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__99924, G__99925, G__99926, G__99927, G__99928, G__99929) : self__.dispatch_fn.call(null, G__99924, G__99925, G__99926, G__99927, G__99928, G__99929);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__99930 = a;
  var G__99931 = b;
  var G__99932 = c;
  var G__99933 = d;
  var G__99934 = e;
  var G__99935 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__99930, G__99931, G__99932, G__99933, G__99934, G__99935) : target_fn.call(null, G__99930, G__99931, G__99932, G__99933, G__99934, G__99935);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__99936 = a;
    var G__99937 = b;
    var G__99938 = c;
    var G__99939 = d;
    var G__99940 = e;
    var G__99941 = f;
    var G__99942 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__99936, G__99937, G__99938, G__99939, G__99940, G__99941, G__99942) : self__.dispatch_fn.call(null, G__99936, G__99937, G__99938, G__99939, G__99940, G__99941, G__99942);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__99943 = a;
  var G__99944 = b;
  var G__99945 = c;
  var G__99946 = d;
  var G__99947 = e;
  var G__99948 = f;
  var G__99949 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__99943, G__99944, G__99945, G__99946, G__99947, G__99948, G__99949) : target_fn.call(null, G__99943, G__99944, G__99945, G__99946, G__99947, G__99948, G__99949);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__99950 = a;
    var G__99951 = b;
    var G__99952 = c;
    var G__99953 = d;
    var G__99954 = e;
    var G__99955 = f;
    var G__99956 = g;
    var G__99957 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__99950, G__99951, G__99952, G__99953, G__99954, G__99955, G__99956, G__99957) : self__.dispatch_fn.call(null, G__99950, G__99951, G__99952, G__99953, G__99954, G__99955, G__99956, G__99957);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__99958 = a;
  var G__99959 = b;
  var G__99960 = c;
  var G__99961 = d;
  var G__99962 = e;
  var G__99963 = f;
  var G__99964 = g;
  var G__99965 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__99958, G__99959, G__99960, G__99961, G__99962, G__99963, G__99964, G__99965) : target_fn.call(null, G__99958, G__99959, G__99960, G__99961, G__99962, G__99963, G__99964, G__99965);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__99966 = a;
    var G__99967 = b;
    var G__99968 = c;
    var G__99969 = d;
    var G__99970 = e;
    var G__99971 = f;
    var G__99972 = g;
    var G__99973 = h;
    var G__99974 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__99966, G__99967, G__99968, G__99969, G__99970, G__99971, G__99972, G__99973, G__99974) : self__.dispatch_fn.call(null, G__99966, G__99967, G__99968, G__99969, G__99970, G__99971, G__99972, G__99973, G__99974);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__99975 = a;
  var G__99976 = b;
  var G__99977 = c;
  var G__99978 = d;
  var G__99979 = e;
  var G__99980 = f;
  var G__99981 = g;
  var G__99982 = h;
  var G__99983 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__99975, G__99976, G__99977, G__99978, G__99979, G__99980, G__99981, G__99982, G__99983) : target_fn.call(null, G__99975, G__99976, G__99977, G__99978, G__99979, G__99980, G__99981, G__99982, G__99983);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__99984 = a;
    var G__99985 = b;
    var G__99986 = c;
    var G__99987 = d;
    var G__99988 = e;
    var G__99989 = f;
    var G__99990 = g;
    var G__99991 = h;
    var G__99992 = i;
    var G__99993 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__99984, G__99985, G__99986, G__99987, G__99988, G__99989, G__99990, G__99991, G__99992, G__99993) : self__.dispatch_fn.call(null, G__99984, G__99985, G__99986, G__99987, G__99988, G__99989, G__99990, G__99991, G__99992, G__99993);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__99994 = a;
  var G__99995 = b;
  var G__99996 = c;
  var G__99997 = d;
  var G__99998 = e;
  var G__99999 = f;
  var G__100000 = g;
  var G__100001 = h;
  var G__100002 = i;
  var G__100003 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__99994, G__99995, G__99996, G__99997, G__99998, G__99999, G__100000, G__100001, G__100002, G__100003) : target_fn.call(null, G__99994, G__99995, G__99996, G__99997, G__99998, G__99999, G__100000, G__100001, G__100002, G__100003);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__100004 = a;
    var G__100005 = b;
    var G__100006 = c;
    var G__100007 = d;
    var G__100008 = e;
    var G__100009 = f;
    var G__100010 = g;
    var G__100011 = h;
    var G__100012 = i;
    var G__100013 = j;
    var G__100014 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__100004, G__100005, G__100006, G__100007, G__100008, G__100009, G__100010, G__100011, G__100012, G__100013, G__100014) : self__.dispatch_fn.call(null, G__100004, G__100005, G__100006, G__100007, G__100008, G__100009, G__100010, G__100011, G__100012, G__100013, G__100014);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__100015 = a;
  var G__100016 = b;
  var G__100017 = c;
  var G__100018 = d;
  var G__100019 = e;
  var G__100020 = f;
  var G__100021 = g;
  var G__100022 = h;
  var G__100023 = i;
  var G__100024 = j;
  var G__100025 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__100015, G__100016, G__100017, G__100018, G__100019, G__100020, G__100021, G__100022, G__100023, G__100024, G__100025) : target_fn.call(null, G__100015, G__100016, G__100017, G__100018, G__100019, G__100020, G__100021, G__100022, G__100023, G__100024, G__100025);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__100026 = a;
    var G__100027 = b;
    var G__100028 = c;
    var G__100029 = d;
    var G__100030 = e;
    var G__100031 = f;
    var G__100032 = g;
    var G__100033 = h;
    var G__100034 = i;
    var G__100035 = j;
    var G__100036 = k;
    var G__100037 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__100026, G__100027, G__100028, G__100029, G__100030, G__100031, G__100032, G__100033, G__100034, G__100035, G__100036, G__100037) : self__.dispatch_fn.call(null, G__100026, G__100027, G__100028, G__100029, G__100030, G__100031, G__100032, G__100033, G__100034, G__100035, G__100036, G__100037);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__100038 = a;
  var G__100039 = b;
  var G__100040 = c;
  var G__100041 = d;
  var G__100042 = e;
  var G__100043 = f;
  var G__100044 = g;
  var G__100045 = h;
  var G__100046 = i;
  var G__100047 = j;
  var G__100048 = k;
  var G__100049 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__100038, G__100039, G__100040, G__100041, G__100042, G__100043, G__100044, G__100045, G__100046, G__100047, G__100048, G__100049) : target_fn.call(null, G__100038, G__100039, G__100040, G__100041, G__100042, G__100043, G__100044, G__100045, G__100046, G__100047, G__100048, G__100049);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__100050 = a;
    var G__100051 = b;
    var G__100052 = c;
    var G__100053 = d;
    var G__100054 = e;
    var G__100055 = f;
    var G__100056 = g;
    var G__100057 = h;
    var G__100058 = i;
    var G__100059 = j;
    var G__100060 = k;
    var G__100061 = l;
    var G__100062 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__100050, G__100051, G__100052, G__100053, G__100054, G__100055, G__100056, G__100057, G__100058, G__100059, G__100060, G__100061, G__100062) : self__.dispatch_fn.call(null, G__100050, G__100051, G__100052, G__100053, G__100054, G__100055, G__100056, G__100057, G__100058, G__100059, G__100060, G__100061, G__100062);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__100063 = a;
  var G__100064 = b;
  var G__100065 = c;
  var G__100066 = d;
  var G__100067 = e;
  var G__100068 = f;
  var G__100069 = g;
  var G__100070 = h;
  var G__100071 = i;
  var G__100072 = j;
  var G__100073 = k;
  var G__100074 = l;
  var G__100075 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__100063, G__100064, G__100065, G__100066, G__100067, G__100068, G__100069, G__100070, G__100071, G__100072, G__100073, G__100074, G__100075) : target_fn.call(null, G__100063, G__100064, G__100065, G__100066, G__100067, G__100068, G__100069, G__100070, G__100071, G__100072, G__100073, G__100074, G__100075);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__100076 = a;
    var G__100077 = b;
    var G__100078 = c;
    var G__100079 = d;
    var G__100080 = e;
    var G__100081 = f;
    var G__100082 = g;
    var G__100083 = h;
    var G__100084 = i;
    var G__100085 = j;
    var G__100086 = k;
    var G__100087 = l;
    var G__100088 = m;
    var G__100089 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__100076, G__100077, G__100078, G__100079, G__100080, G__100081, G__100082, G__100083, G__100084, G__100085, G__100086, G__100087, G__100088, G__100089) : self__.dispatch_fn.call(null, G__100076, G__100077, G__100078, G__100079, G__100080, G__100081, G__100082, G__100083, G__100084, G__100085, G__100086, G__100087, G__100088, G__100089);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__100090 = a;
  var G__100091 = b;
  var G__100092 = c;
  var G__100093 = d;
  var G__100094 = e;
  var G__100095 = f;
  var G__100096 = g;
  var G__100097 = h;
  var G__100098 = i;
  var G__100099 = j;
  var G__100100 = k;
  var G__100101 = l;
  var G__100102 = m;
  var G__100103 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__100090, G__100091, G__100092, G__100093, G__100094, G__100095, G__100096, G__100097, G__100098, G__100099, G__100100, G__100101, G__100102, G__100103) : target_fn.call(null, G__100090, G__100091, G__100092, G__100093, G__100094, G__100095, G__100096, G__100097, G__100098, G__100099, G__100100, G__100101, G__100102, G__100103);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__100104 = a;
    var G__100105 = b;
    var G__100106 = c;
    var G__100107 = d;
    var G__100108 = e;
    var G__100109 = f;
    var G__100110 = g;
    var G__100111 = h;
    var G__100112 = i;
    var G__100113 = j;
    var G__100114 = k;
    var G__100115 = l;
    var G__100116 = m;
    var G__100117 = n;
    var G__100118 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__100104, G__100105, G__100106, G__100107, G__100108, G__100109, G__100110, G__100111, G__100112, G__100113, G__100114, G__100115, G__100116, G__100117, G__100118) : self__.dispatch_fn.call(null, G__100104, G__100105, G__100106, G__100107, G__100108, G__100109, G__100110, G__100111, G__100112, G__100113, G__100114, G__100115, G__100116, G__100117, G__100118);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__100119 = a;
  var G__100120 = b;
  var G__100121 = c;
  var G__100122 = d;
  var G__100123 = e;
  var G__100124 = f;
  var G__100125 = g;
  var G__100126 = h;
  var G__100127 = i;
  var G__100128 = j;
  var G__100129 = k;
  var G__100130 = l;
  var G__100131 = m;
  var G__100132 = n;
  var G__100133 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__100119, G__100120, G__100121, G__100122, G__100123, G__100124, G__100125, G__100126, G__100127, G__100128, G__100129, G__100130, G__100131, G__100132, G__100133) : target_fn.call(null, G__100119, G__100120, G__100121, G__100122, G__100123, G__100124, G__100125, G__100126, G__100127, G__100128, G__100129, G__100130, G__100131, G__100132, G__100133);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__100134 = a;
    var G__100135 = b;
    var G__100136 = c;
    var G__100137 = d;
    var G__100138 = e;
    var G__100139 = f;
    var G__100140 = g;
    var G__100141 = h;
    var G__100142 = i;
    var G__100143 = j;
    var G__100144 = k;
    var G__100145 = l;
    var G__100146 = m;
    var G__100147 = n;
    var G__100148 = o;
    var G__100149 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__100134, G__100135, G__100136, G__100137, G__100138, G__100139, G__100140, G__100141, G__100142, G__100143, G__100144, G__100145, G__100146, G__100147, G__100148, G__100149) : self__.dispatch_fn.call(null, G__100134, G__100135, G__100136, G__100137, G__100138, G__100139, G__100140, G__100141, G__100142, G__100143, G__100144, G__100145, G__100146, G__100147, G__100148, G__100149);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__100150 = a;
  var G__100151 = b;
  var G__100152 = c;
  var G__100153 = d;
  var G__100154 = e;
  var G__100155 = f;
  var G__100156 = g;
  var G__100157 = h;
  var G__100158 = i;
  var G__100159 = j;
  var G__100160 = k;
  var G__100161 = l;
  var G__100162 = m;
  var G__100163 = n;
  var G__100164 = o;
  var G__100165 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__100150, G__100151, G__100152, G__100153, G__100154, G__100155, G__100156, G__100157, G__100158, G__100159, G__100160, G__100161, G__100162, G__100163, G__100164, G__100165) : target_fn.call(null, G__100150, G__100151, G__100152, G__100153, G__100154, G__100155, G__100156, G__100157, G__100158, G__100159, G__100160, G__100161, G__100162, G__100163, G__100164, G__100165);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__100166 = a;
    var G__100167 = b;
    var G__100168 = c;
    var G__100169 = d;
    var G__100170 = e;
    var G__100171 = f;
    var G__100172 = g;
    var G__100173 = h;
    var G__100174 = i;
    var G__100175 = j;
    var G__100176 = k;
    var G__100177 = l;
    var G__100178 = m;
    var G__100179 = n;
    var G__100180 = o;
    var G__100181 = p;
    var G__100182 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__100166, G__100167, G__100168, G__100169, G__100170, G__100171, G__100172, G__100173, G__100174, G__100175, G__100176, G__100177, G__100178, G__100179, G__100180, G__100181, G__100182) : self__.dispatch_fn.call(null, G__100166, G__100167, G__100168, G__100169, G__100170, G__100171, G__100172, G__100173, G__100174, G__100175, G__100176, G__100177, G__100178, G__100179, G__100180, G__100181, 
    G__100182);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__100183 = a;
  var G__100184 = b;
  var G__100185 = c;
  var G__100186 = d;
  var G__100187 = e;
  var G__100188 = f;
  var G__100189 = g;
  var G__100190 = h;
  var G__100191 = i;
  var G__100192 = j;
  var G__100193 = k;
  var G__100194 = l;
  var G__100195 = m;
  var G__100196 = n;
  var G__100197 = o;
  var G__100198 = p;
  var G__100199 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__100183, G__100184, G__100185, G__100186, G__100187, G__100188, G__100189, G__100190, G__100191, G__100192, G__100193, G__100194, G__100195, G__100196, G__100197, G__100198, G__100199) : target_fn.call(null, G__100183, G__100184, G__100185, G__100186, G__100187, G__100188, G__100189, G__100190, G__100191, G__100192, G__100193, G__100194, G__100195, G__100196, G__100197, G__100198, G__100199);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__100200 = a;
    var G__100201 = b;
    var G__100202 = c;
    var G__100203 = d;
    var G__100204 = e;
    var G__100205 = f;
    var G__100206 = g;
    var G__100207 = h;
    var G__100208 = i;
    var G__100209 = j;
    var G__100210 = k;
    var G__100211 = l;
    var G__100212 = m;
    var G__100213 = n;
    var G__100214 = o;
    var G__100215 = p;
    var G__100216 = q;
    var G__100217 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__100200, G__100201, G__100202, G__100203, G__100204, G__100205, G__100206, G__100207, G__100208, G__100209, G__100210, G__100211, G__100212, G__100213, G__100214, G__100215, G__100216, G__100217) : self__.dispatch_fn.call(null, G__100200, G__100201, G__100202, G__100203, G__100204, G__100205, G__100206, G__100207, G__100208, G__100209, G__100210, G__100211, G__100212, G__100213, G__100214, 
    G__100215, G__100216, G__100217);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__100218 = a;
  var G__100219 = b;
  var G__100220 = c;
  var G__100221 = d;
  var G__100222 = e;
  var G__100223 = f;
  var G__100224 = g;
  var G__100225 = h;
  var G__100226 = i;
  var G__100227 = j;
  var G__100228 = k;
  var G__100229 = l;
  var G__100230 = m;
  var G__100231 = n;
  var G__100232 = o;
  var G__100233 = p;
  var G__100234 = q;
  var G__100235 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__100218, G__100219, G__100220, G__100221, G__100222, G__100223, G__100224, G__100225, G__100226, G__100227, G__100228, G__100229, G__100230, G__100231, G__100232, G__100233, G__100234, G__100235) : target_fn.call(null, G__100218, G__100219, G__100220, G__100221, G__100222, G__100223, G__100224, G__100225, G__100226, G__100227, G__100228, G__100229, G__100230, G__100231, G__100232, G__100233, G__100234, 
  G__100235);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__100236 = a;
    var G__100237 = b;
    var G__100238 = c;
    var G__100239 = d;
    var G__100240 = e;
    var G__100241 = f;
    var G__100242 = g;
    var G__100243 = h;
    var G__100244 = i;
    var G__100245 = j;
    var G__100246 = k;
    var G__100247 = l;
    var G__100248 = m;
    var G__100249 = n;
    var G__100250 = o;
    var G__100251 = p;
    var G__100252 = q;
    var G__100253 = r;
    var G__100254 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__100236, G__100237, G__100238, G__100239, G__100240, G__100241, G__100242, G__100243, G__100244, G__100245, G__100246, G__100247, G__100248, G__100249, G__100250, G__100251, G__100252, G__100253, G__100254) : self__.dispatch_fn.call(null, G__100236, G__100237, G__100238, G__100239, G__100240, G__100241, G__100242, G__100243, G__100244, G__100245, G__100246, G__100247, G__100248, G__100249, 
    G__100250, G__100251, G__100252, G__100253, G__100254);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__100255 = a;
  var G__100256 = b;
  var G__100257 = c;
  var G__100258 = d;
  var G__100259 = e;
  var G__100260 = f;
  var G__100261 = g;
  var G__100262 = h;
  var G__100263 = i;
  var G__100264 = j;
  var G__100265 = k;
  var G__100266 = l;
  var G__100267 = m;
  var G__100268 = n;
  var G__100269 = o;
  var G__100270 = p;
  var G__100271 = q;
  var G__100272 = r;
  var G__100273 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__100255, G__100256, G__100257, G__100258, G__100259, G__100260, G__100261, G__100262, G__100263, G__100264, G__100265, G__100266, G__100267, G__100268, G__100269, G__100270, G__100271, G__100272, G__100273) : target_fn.call(null, G__100255, G__100256, G__100257, G__100258, G__100259, G__100260, G__100261, G__100262, G__100263, G__100264, G__100265, G__100266, G__100267, G__100268, G__100269, G__100270, 
  G__100271, G__100272, G__100273);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__100274 = a;
    var G__100275 = b;
    var G__100276 = c;
    var G__100277 = d;
    var G__100278 = e;
    var G__100279 = f;
    var G__100280 = g;
    var G__100281 = h;
    var G__100282 = i;
    var G__100283 = j;
    var G__100284 = k;
    var G__100285 = l;
    var G__100286 = m;
    var G__100287 = n;
    var G__100288 = o;
    var G__100289 = p;
    var G__100290 = q;
    var G__100291 = r;
    var G__100292 = s;
    var G__100293 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__100274, G__100275, G__100276, G__100277, G__100278, G__100279, G__100280, G__100281, G__100282, G__100283, G__100284, G__100285, G__100286, G__100287, G__100288, G__100289, G__100290, G__100291, G__100292, G__100293) : self__.dispatch_fn.call(null, G__100274, G__100275, G__100276, G__100277, G__100278, G__100279, G__100280, G__100281, G__100282, G__100283, G__100284, G__100285, G__100286, 
    G__100287, G__100288, G__100289, G__100290, G__100291, G__100292, G__100293);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__100294 = a;
  var G__100295 = b;
  var G__100296 = c;
  var G__100297 = d;
  var G__100298 = e;
  var G__100299 = f;
  var G__100300 = g;
  var G__100301 = h;
  var G__100302 = i;
  var G__100303 = j;
  var G__100304 = k;
  var G__100305 = l;
  var G__100306 = m;
  var G__100307 = n;
  var G__100308 = o;
  var G__100309 = p;
  var G__100310 = q;
  var G__100311 = r;
  var G__100312 = s;
  var G__100313 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__100294, G__100295, G__100296, G__100297, G__100298, G__100299, G__100300, G__100301, G__100302, G__100303, G__100304, G__100305, G__100306, G__100307, G__100308, G__100309, G__100310, G__100311, G__100312, G__100313) : target_fn.call(null, G__100294, G__100295, G__100296, G__100297, G__100298, G__100299, G__100300, G__100301, G__100302, G__100303, G__100304, G__100305, G__100306, G__100307, G__100308, 
  G__100309, G__100310, G__100311, G__100312, G__100313);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__100315 = cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([this$__$1], 0));
  return goog.string.hashCode(G__100315);
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write(writer__4569__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.pr_writer_ex_info = function pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, data) {
    return ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
  };
  var ex_info__3 = function(msg, data, cause) {
    cljs.core.ExceptionInfo.prototype = function() {
      var G__100320 = msg;
      return Error(G__100320);
    }();
    cljs.core.ExceptionInfo.prototype.name = "ExceptionInfo";
    cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
    cljs.core.ExceptionInfo.prototype.toString = cljs.core.pr_str_STAR_;
    cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
    cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
      var obj__$1 = this;
      return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
    };
    return new cljs.core.ExceptionInfo(msg, data, cause);
  };
  ex_info = function(msg, data, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, data);
      case 3:
        return ex_info__3.call(this, msg, data, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__100325 = x;
      var G__100326 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__100325, G__100326) : pred.call(null, G__100325, G__100326);
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(function() {
        var G__100327 = y;
        var G__100328 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__100327, G__100328) : pred.call(null, G__100327, G__100328);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.dom.forms");
goog.require("goog.structs.Map");
goog.dom.forms.getFormDataMap = function(form) {
  var map = new goog.structs.Map;
  goog.dom.forms.getFormDataHelper_(form, map, goog.dom.forms.addFormDataToMap_);
  return map;
};
goog.dom.forms.getFormDataString = function(form) {
  var sb = [];
  goog.dom.forms.getFormDataHelper_(form, sb, goog.dom.forms.addFormDataToStringBuffer_);
  return sb.join("\x26");
};
goog.dom.forms.getFormDataHelper_ = function(form, result, fnAppend) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (el.form != form || el.disabled || el.tagName.toLowerCase() == "fieldset") {
      continue;
    }
    var name = el.name;
    switch(el.type.toLowerCase()) {
      case "file":
      ;
      case "submit":
      ;
      case "reset":
      ;
      case "button":
        break;
      case "select-multiple":
        var values = goog.dom.forms.getValue(el);
        if (values != null) {
          for (var value, j = 0;value = values[j];j++) {
            fnAppend(result, name, value);
          }
        }
        break;
      default:
        var value = goog.dom.forms.getValue(el);
        if (value != null) {
          fnAppend(result, name, value);
        }
      ;
    }
  }
  var inputs = form.getElementsByTagName("input");
  for (var input, i = 0;input = inputs[i];i++) {
    if (input.form == form && input.type.toLowerCase() == "image") {
      name = input.name;
      fnAppend(result, name, input.value);
      fnAppend(result, name + ".x", "0");
      fnAppend(result, name + ".y", "0");
    }
  }
};
goog.dom.forms.addFormDataToMap_ = function(map, name, value) {
  var array = map.get(name);
  if (!array) {
    array = [];
    map.set(name, array);
  }
  array.push(value);
};
goog.dom.forms.addFormDataToStringBuffer_ = function(sb, name, value) {
  sb.push(encodeURIComponent(name) + "\x3d" + encodeURIComponent(value));
};
goog.dom.forms.hasFileInput = function(form) {
  var els = form.elements;
  for (var el, i = 0;el = els[i];i++) {
    if (!el.disabled && el.type && el.type.toLowerCase() == "file") {
      return true;
    }
  }
  return false;
};
goog.dom.forms.setDisabled = function(el, disabled) {
  if (el.tagName == "FORM") {
    var els = el.elements;
    for (var i = 0;el = els[i];i++) {
      goog.dom.forms.setDisabled(el, disabled);
    }
  } else {
    if (disabled == true) {
      el.blur();
    }
    el.disabled = disabled;
  }
};
goog.dom.forms.focusAndSelect = function(el) {
  el.focus();
  if (el.select) {
    el.select();
  }
};
goog.dom.forms.hasValue = function(el) {
  var value = goog.dom.forms.getValue(el);
  return!!value;
};
goog.dom.forms.hasValueByName = function(form, name) {
  var value = goog.dom.forms.getValueByName(form, name);
  return!!value;
};
goog.dom.forms.getValue = function(el) {
  var type = el.type;
  if (!goog.isDef(type)) {
    return null;
  }
  switch(type.toLowerCase()) {
    case "checkbox":
    ;
    case "radio":
      return goog.dom.forms.getInputChecked_(el);
    case "select-one":
      return goog.dom.forms.getSelectSingle_(el);
    case "select-multiple":
      return goog.dom.forms.getSelectMultiple_(el);
    default:
      return goog.isDef(el.value) ? el.value : null;
  }
};
goog.dom.$F = goog.dom.forms.getValue;
goog.dom.forms.getValueByName = function(form, name) {
  var els = form.elements[name];
  if (els) {
    if (els.type) {
      return goog.dom.forms.getValue(els);
    } else {
      for (var i = 0;i < els.length;i++) {
        var val = goog.dom.forms.getValue(els[i]);
        if (val) {
          return val;
        }
      }
    }
  }
  return null;
};
goog.dom.forms.getInputChecked_ = function(el) {
  return el.checked ? el.value : null;
};
goog.dom.forms.getSelectSingle_ = function(el) {
  var selectedIndex = el.selectedIndex;
  return selectedIndex >= 0 ? el.options[selectedIndex].value : null;
};
goog.dom.forms.getSelectMultiple_ = function(el) {
  var values = [];
  for (var option, i = 0;option = el.options[i];i++) {
    if (option.selected) {
      values.push(option.value);
    }
  }
  return values.length ? values : null;
};
goog.dom.forms.setValue = function(el, opt_value) {
  var type = el.type;
  if (goog.isDef(type)) {
    switch(type.toLowerCase()) {
      case "checkbox":
      ;
      case "radio":
        goog.dom.forms.setInputChecked_(el, (opt_value));
        break;
      case "select-one":
        goog.dom.forms.setSelectSingle_(el, (opt_value));
        break;
      case "select-multiple":
        goog.dom.forms.setSelectMultiple_(el, (opt_value));
        break;
      default:
        el.value = goog.isDefAndNotNull(opt_value) ? opt_value : "";
    }
  }
};
goog.dom.forms.setInputChecked_ = function(el, opt_value) {
  el.checked = opt_value ? "checked" : null;
};
goog.dom.forms.setSelectSingle_ = function(el, opt_value) {
  el.selectedIndex = -1;
  if (goog.isString(opt_value)) {
    for (var option, i = 0;option = el.options[i];i++) {
      if (option.value == opt_value) {
        option.selected = true;
        break;
      }
    }
  }
};
goog.dom.forms.setSelectMultiple_ = function(el, opt_value) {
  if (goog.isString(opt_value)) {
    opt_value = [opt_value];
  }
  for (var option, i = 0;option = el.options[i];i++) {
    option.selected = false;
    if (opt_value) {
      for (var value, j = 0;value = opt_value[j];j++) {
        if (option.value == value) {
          option.selected = true;
        }
      }
    }
  }
};
goog.provide("goog.dom.classes");
goog.require("goog.array");
goog.dom.classes.set = function(element, className) {
  element.className = className;
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  goog.dom.classes.set(element, classes.join(" "));
  return classes.length == expectedCount;
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element);
  var args = goog.array.slice(arguments, 1);
  var newClasses = goog.dom.classes.getDifference_(classes, args);
  goog.dom.classes.set(element, newClasses.join(" "));
  return newClasses.length == classes.length - args.length;
};
goog.dom.classes.add_ = function(classes, args) {
  for (var i = 0;i < args.length;i++) {
    if (!goog.array.contains(classes, args[i])) {
      classes.push(args[i]);
    }
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item);
  });
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  var classes = goog.dom.classes.get(element);
  var removed = false;
  for (var i = 0;i < classes.length;i++) {
    if (classes[i] == fromClass) {
      goog.array.splice(classes, i--, 1);
      removed = true;
    }
  }
  if (removed) {
    classes.push(toClass);
    goog.dom.classes.set(element, classes.join(" "));
  }
  return removed;
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  if (goog.isString(classesToRemove)) {
    goog.array.remove(classes, classesToRemove);
  } else {
    if (goog.isArray(classesToRemove)) {
      classes = goog.dom.classes.getDifference_(classes, classesToRemove);
    }
  }
  if (goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd)) {
    classes.push(classesToAdd);
  } else {
    if (goog.isArray(classesToAdd)) {
      goog.dom.classes.add_(classes, classesToAdd);
    }
  }
  goog.dom.classes.set(element, classes.join(" "));
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className);
};
goog.dom.classes.enable = function(element, className, enabled) {
  if (enabled) {
    goog.dom.classes.add(element, className);
  } else {
    goog.dom.classes.remove(element, className);
  }
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add;
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("domina.support");
goog.require("cljs.core");
goog.require("goog.events");
goog.require("goog.dom");
var div_101034 = document.createElement("div");
var test_html_101035 = "   \x3clink/\x3e\x3ctable\x3e\x3c/table\x3e\x3ca href\x3d'/a' style\x3d'top:1px;float:left;opacity:.55;'\x3ea\x3c/a\x3e\x3cinput type\x3d'checkbox'/\x3e";
div_101034.innerHTML = test_html_101035;
domina.support.leading_whitespace_QMARK_ = cljs.core._EQ_.call(null, div_101034.firstChild.nodeType, 3);
domina.support.extraneous_tbody_QMARK_ = cljs.core._EQ_.call(null, div_101034.getElementsByTagName("tbody").length, 0);
domina.support.unscoped_html_elements_QMARK_ = cljs.core._EQ_.call(null, div_101034.getElementsByTagName("link").length, 0);
goog.provide("goog.dom.vendor");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.vendor.getVendorJsPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "Webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "Moz";
    } else {
      if (goog.userAgent.IE) {
        return "ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "O";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getVendorPrefix = function() {
  if (goog.userAgent.WEBKIT) {
    return "-webkit";
  } else {
    if (goog.userAgent.GECKO) {
      return "-moz";
    } else {
      if (goog.userAgent.IE) {
        return "-ms";
      } else {
        if (goog.userAgent.OPERA) {
          return "-o";
        }
      }
    }
  }
  return null;
};
goog.dom.vendor.getPrefixedPropertyName = function(propertyName, opt_object) {
  if (opt_object && propertyName in opt_object) {
    return propertyName;
  }
  var prefix = goog.dom.vendor.getVendorJsPrefix();
  if (prefix) {
    prefix = prefix.toLowerCase();
    var prefixedPropertyName = prefix + goog.string.toTitleCase(propertyName);
    return!goog.isDef(opt_object) || prefixedPropertyName in opt_object ? prefixedPropertyName : null;
  }
  return null;
};
goog.dom.vendor.getPrefixedEventType = function(eventType) {
  var prefix = goog.dom.vendor.getVendorJsPrefix() || "";
  return(prefix + eventType).toLowerCase();
};
goog.provide("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.math.Box = function(top, right, bottom, left) {
  this.top = top;
  this.right = right;
  this.bottom = bottom;
  this.left = left;
};
goog.math.Box.boundingBox = function(var_args) {
  var box = new goog.math.Box(arguments[0].y, arguments[0].x, arguments[0].y, arguments[0].x);
  for (var i = 1;i < arguments.length;i++) {
    var coord = arguments[i];
    box.top = Math.min(box.top, coord.y);
    box.right = Math.max(box.right, coord.x);
    box.bottom = Math.max(box.bottom, coord.y);
    box.left = Math.min(box.left, coord.x);
  }
  return box;
};
goog.math.Box.prototype.getWidth = function() {
  return this.right - this.left;
};
goog.math.Box.prototype.getHeight = function() {
  return this.bottom - this.top;
};
goog.math.Box.prototype.clone = function() {
  return new goog.math.Box(this.top, this.right, this.bottom, this.left);
};
if (goog.DEBUG) {
  goog.math.Box.prototype.toString = function() {
    return "(" + this.top + "t, " + this.right + "r, " + this.bottom + "b, " + this.left + "l)";
  };
}
goog.math.Box.prototype.contains = function(other) {
  return goog.math.Box.contains(this, other);
};
goog.math.Box.prototype.expand = function(top, opt_right, opt_bottom, opt_left) {
  if (goog.isObject(top)) {
    this.top -= top.top;
    this.right += top.right;
    this.bottom += top.bottom;
    this.left -= top.left;
  } else {
    this.top -= top;
    this.right += opt_right;
    this.bottom += opt_bottom;
    this.left -= opt_left;
  }
  return this;
};
goog.math.Box.prototype.expandToInclude = function(box) {
  this.left = Math.min(this.left, box.left);
  this.top = Math.min(this.top, box.top);
  this.right = Math.max(this.right, box.right);
  this.bottom = Math.max(this.bottom, box.bottom);
};
goog.math.Box.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.top == b.top && a.right == b.right && a.bottom == b.bottom && a.left == b.left;
};
goog.math.Box.contains = function(box, other) {
  if (!box || !other) {
    return false;
  }
  if (other instanceof goog.math.Box) {
    return other.left >= box.left && other.right <= box.right && other.top >= box.top && other.bottom <= box.bottom;
  }
  return other.x >= box.left && other.x <= box.right && other.y >= box.top && other.y <= box.bottom;
};
goog.math.Box.relativePositionX = function(box, coord) {
  if (coord.x < box.left) {
    return coord.x - box.left;
  } else {
    if (coord.x > box.right) {
      return coord.x - box.right;
    }
  }
  return 0;
};
goog.math.Box.relativePositionY = function(box, coord) {
  if (coord.y < box.top) {
    return coord.y - box.top;
  } else {
    if (coord.y > box.bottom) {
      return coord.y - box.bottom;
    }
  }
  return 0;
};
goog.math.Box.distance = function(box, coord) {
  var x = goog.math.Box.relativePositionX(box, coord);
  var y = goog.math.Box.relativePositionY(box, coord);
  return Math.sqrt(x * x + y * y);
};
goog.math.Box.intersects = function(a, b) {
  return a.left <= b.right && b.left <= a.right && a.top <= b.bottom && b.top <= a.bottom;
};
goog.math.Box.intersectsWithPadding = function(a, b, padding) {
  return a.left <= b.right + padding && b.left <= a.right + padding && a.top <= b.bottom + padding && b.top <= a.bottom + padding;
};
goog.math.Box.prototype.ceil = function() {
  this.top = Math.ceil(this.top);
  this.right = Math.ceil(this.right);
  this.bottom = Math.ceil(this.bottom);
  this.left = Math.ceil(this.left);
  return this;
};
goog.math.Box.prototype.floor = function() {
  this.top = Math.floor(this.top);
  this.right = Math.floor(this.right);
  this.bottom = Math.floor(this.bottom);
  this.left = Math.floor(this.left);
  return this;
};
goog.math.Box.prototype.round = function() {
  this.top = Math.round(this.top);
  this.right = Math.round(this.right);
  this.bottom = Math.round(this.bottom);
  this.left = Math.round(this.left);
  return this;
};
goog.math.Box.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.right += tx.x;
    this.top += tx.y;
    this.bottom += tx.y;
  } else {
    this.left += tx;
    this.right += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
      this.bottom += opt_ty;
    }
  }
  return this;
};
goog.math.Box.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.right *= sx;
  this.top *= sy;
  this.bottom *= sy;
  return this;
};
goog.provide("goog.math.Rect");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.math.Rect = function(x, y, w, h) {
  this.left = x;
  this.top = y;
  this.width = w;
  this.height = h;
};
goog.math.Rect.prototype.clone = function() {
  return new goog.math.Rect(this.left, this.top, this.width, this.height);
};
goog.math.Rect.prototype.toBox = function() {
  var right = this.left + this.width;
  var bottom = this.top + this.height;
  return new goog.math.Box(this.top, right, bottom, this.left);
};
goog.math.Rect.createFromBox = function(box) {
  return new goog.math.Rect(box.left, box.top, box.right - box.left, box.bottom - box.top);
};
if (goog.DEBUG) {
  goog.math.Rect.prototype.toString = function() {
    return "(" + this.left + ", " + this.top + " - " + this.width + "w x " + this.height + "h)";
  };
}
goog.math.Rect.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.left == b.left && a.width == b.width && a.top == b.top && a.height == b.height;
};
goog.math.Rect.prototype.intersection = function(rect) {
  var x0 = Math.max(this.left, rect.left);
  var x1 = Math.min(this.left + this.width, rect.left + rect.width);
  if (x0 <= x1) {
    var y0 = Math.max(this.top, rect.top);
    var y1 = Math.min(this.top + this.height, rect.top + rect.height);
    if (y0 <= y1) {
      this.left = x0;
      this.top = y0;
      this.width = x1 - x0;
      this.height = y1 - y0;
      return true;
    }
  }
  return false;
};
goog.math.Rect.intersection = function(a, b) {
  var x0 = Math.max(a.left, b.left);
  var x1 = Math.min(a.left + a.width, b.left + b.width);
  if (x0 <= x1) {
    var y0 = Math.max(a.top, b.top);
    var y1 = Math.min(a.top + a.height, b.top + b.height);
    if (y0 <= y1) {
      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);
    }
  }
  return null;
};
goog.math.Rect.intersects = function(a, b) {
  return a.left <= b.left + b.width && b.left <= a.left + a.width && a.top <= b.top + b.height && b.top <= a.top + a.height;
};
goog.math.Rect.prototype.intersects = function(rect) {
  return goog.math.Rect.intersects(this, rect);
};
goog.math.Rect.difference = function(a, b) {
  var intersection = goog.math.Rect.intersection(a, b);
  if (!intersection || !intersection.height || !intersection.width) {
    return[a.clone()];
  }
  var result = [];
  var top = a.top;
  var height = a.height;
  var ar = a.left + a.width;
  var ab = a.top + a.height;
  var br = b.left + b.width;
  var bb = b.top + b.height;
  if (b.top > a.top) {
    result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));
    top = b.top;
    height -= b.top - a.top;
  }
  if (bb < ab) {
    result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));
    height = bb - top;
  }
  if (b.left > a.left) {
    result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));
  }
  if (br < ar) {
    result.push(new goog.math.Rect(br, top, ar - br, height));
  }
  return result;
};
goog.math.Rect.prototype.difference = function(rect) {
  return goog.math.Rect.difference(this, rect);
};
goog.math.Rect.prototype.boundingRect = function(rect) {
  var right = Math.max(this.left + this.width, rect.left + rect.width);
  var bottom = Math.max(this.top + this.height, rect.top + rect.height);
  this.left = Math.min(this.left, rect.left);
  this.top = Math.min(this.top, rect.top);
  this.width = right - this.left;
  this.height = bottom - this.top;
};
goog.math.Rect.boundingRect = function(a, b) {
  if (!a || !b) {
    return null;
  }
  var clone = a.clone();
  clone.boundingRect(b);
  return clone;
};
goog.math.Rect.prototype.contains = function(another) {
  if (another instanceof goog.math.Rect) {
    return this.left <= another.left && this.left + this.width >= another.left + another.width && this.top <= another.top && this.top + this.height >= another.top + another.height;
  } else {
    return another.x >= this.left && another.x <= this.left + this.width && another.y >= this.top && another.y <= this.top + this.height;
  }
};
goog.math.Rect.prototype.squaredDistance = function(point) {
  var dx = point.x < this.left ? this.left - point.x : Math.max(point.x - (this.left + this.width), 0);
  var dy = point.y < this.top ? this.top - point.y : Math.max(point.y - (this.top + this.height), 0);
  return dx * dx + dy * dy;
};
goog.math.Rect.prototype.distance = function(point) {
  return Math.sqrt(this.squaredDistance(point));
};
goog.math.Rect.prototype.getSize = function() {
  return new goog.math.Size(this.width, this.height);
};
goog.math.Rect.prototype.getTopLeft = function() {
  return new goog.math.Coordinate(this.left, this.top);
};
goog.math.Rect.prototype.getCenter = function() {
  return new goog.math.Coordinate(this.left + this.width / 2, this.top + this.height / 2);
};
goog.math.Rect.prototype.getBottomRight = function() {
  return new goog.math.Coordinate(this.left + this.width, this.top + this.height);
};
goog.math.Rect.prototype.ceil = function() {
  this.left = Math.ceil(this.left);
  this.top = Math.ceil(this.top);
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Rect.prototype.floor = function() {
  this.left = Math.floor(this.left);
  this.top = Math.floor(this.top);
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Rect.prototype.round = function() {
  this.left = Math.round(this.left);
  this.top = Math.round(this.top);
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Rect.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.left += tx.x;
    this.top += tx.y;
  } else {
    this.left += tx;
    if (goog.isNumber(opt_ty)) {
      this.top += opt_ty;
    }
  }
  return this;
};
goog.math.Rect.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.left *= sx;
  this.width *= sx;
  this.top *= sy;
  this.height *= sy;
  return this;
};
goog.provide("goog.style");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.vendor");
goog.require("goog.math.Box");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Rect");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS", false);
goog.style.setStyle = function(element, style, opt_value) {
  if (goog.isString(style)) {
    goog.style.setStyle_(element, opt_value, style);
  } else {
    goog.object.forEach(style, goog.partial(goog.style.setStyle_, element));
  }
};
goog.style.setStyle_ = function(element, value, style) {
  var propertyName = goog.style.getVendorJsStyleName_(element, style);
  if (propertyName) {
    element.style[propertyName] = value;
  }
};
goog.style.getVendorJsStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
    if (element.style[prefixedStyle] !== undefined) {
      return prefixedStyle;
    }
  }
  return camelStyle;
};
goog.style.getVendorStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if (element.style[camelStyle] === undefined) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(camelStyle);
    if (element.style[prefixedStyle] !== undefined) {
      return goog.dom.vendor.getVendorPrefix() + "-" + style;
    }
  }
  return style;
};
goog.style.getStyle = function(element, property) {
  var styleValue = element.style[goog.string.toCamelCase(property)];
  if (typeof styleValue !== "undefined") {
    return styleValue;
  }
  return element.style[goog.style.getVendorJsStyleName_(element, property)] || "";
};
goog.style.getComputedStyle = function(element, property) {
  var doc = goog.dom.getOwnerDocument(element);
  if (doc.defaultView && doc.defaultView.getComputedStyle) {
    var styles = doc.defaultView.getComputedStyle(element, null);
    if (styles) {
      return styles[property] || styles.getPropertyValue(property) || "";
    }
  }
  return "";
};
goog.style.getCascadedStyle = function(element, style) {
  return element.currentStyle ? element.currentStyle[style] : null;
};
goog.style.getStyle_ = function(element, style) {
  return goog.style.getComputedStyle(element, style) || goog.style.getCascadedStyle(element, style) || element.style && element.style[style];
};
goog.style.getComputedBoxSizing = function(element) {
  return goog.style.getStyle_(element, "boxSizing") || goog.style.getStyle_(element, "MozBoxSizing") || goog.style.getStyle_(element, "WebkitBoxSizing") || null;
};
goog.style.getComputedPosition = function(element) {
  return goog.style.getStyle_(element, "position");
};
goog.style.getBackgroundColor = function(element) {
  return goog.style.getStyle_(element, "backgroundColor");
};
goog.style.getComputedOverflowX = function(element) {
  return goog.style.getStyle_(element, "overflowX");
};
goog.style.getComputedOverflowY = function(element) {
  return goog.style.getStyle_(element, "overflowY");
};
goog.style.getComputedZIndex = function(element) {
  return goog.style.getStyle_(element, "zIndex");
};
goog.style.getComputedTextAlign = function(element) {
  return goog.style.getStyle_(element, "textAlign");
};
goog.style.getComputedCursor = function(element) {
  return goog.style.getStyle_(element, "cursor");
};
goog.style.getComputedTransform = function(element) {
  var property = goog.style.getVendorStyleName_(element, "transform");
  return goog.style.getStyle_(element, property) || goog.style.getStyle_(element, "transform");
};
goog.style.setPosition = function(el, arg1, opt_arg2) {
  var x, y;
  var buggyGeckoSubPixelPos = goog.userAgent.GECKO && (goog.userAgent.MAC || goog.userAgent.X11) && goog.userAgent.isVersionOrHigher("1.9");
  if (arg1 instanceof goog.math.Coordinate) {
    x = arg1.x;
    y = arg1.y;
  } else {
    x = arg1;
    y = opt_arg2;
  }
  el.style.left = goog.style.getPixelStyleValue_((x), buggyGeckoSubPixelPos);
  el.style.top = goog.style.getPixelStyleValue_((y), buggyGeckoSubPixelPos);
};
goog.style.getPosition = function(element) {
  return new goog.math.Coordinate(element.offsetLeft, element.offsetTop);
};
goog.style.getClientViewportElement = function(opt_node) {
  var doc;
  if (opt_node) {
    doc = goog.dom.getOwnerDocument(opt_node);
  } else {
    doc = goog.dom.getDocument();
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) && !goog.dom.getDomHelper(doc).isCss1CompatMode()) {
    return doc.body;
  }
  return doc.documentElement;
};
goog.style.getViewportPageOffset = function(doc) {
  var body = doc.body;
  var documentElement = doc.documentElement;
  var scrollLeft = body.scrollLeft || documentElement.scrollLeft;
  var scrollTop = body.scrollTop || documentElement.scrollTop;
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.getBoundingClientRect_ = function(el) {
  var rect;
  try {
    rect = el.getBoundingClientRect();
  } catch (e) {
    return{"left":0, "top":0, "right":0, "bottom":0};
  }
  if (goog.userAgent.IE && el.ownerDocument.body) {
    var doc = el.ownerDocument;
    rect.left -= doc.documentElement.clientLeft + doc.body.clientLeft;
    rect.top -= doc.documentElement.clientTop + doc.body.clientTop;
  }
  return(rect);
};
goog.style.getOffsetParent = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8)) {
    return element.offsetParent;
  }
  var doc = goog.dom.getOwnerDocument(element);
  var positionStyle = goog.style.getStyle_(element, "position");
  var skipStatic = positionStyle == "fixed" || positionStyle == "absolute";
  for (var parent = element.parentNode;parent && parent != doc;parent = parent.parentNode) {
    positionStyle = goog.style.getStyle_((parent), "position");
    skipStatic = skipStatic && positionStyle == "static" && parent != doc.documentElement && parent != doc.body;
    if (!skipStatic && (parent.scrollWidth > parent.clientWidth || parent.scrollHeight > parent.clientHeight || positionStyle == "fixed" || positionStyle == "absolute" || positionStyle == "relative")) {
      return(parent);
    }
  }
  return null;
};
goog.style.getVisibleRectForElement = function(element) {
  var visibleRect = new goog.math.Box(0, Infinity, Infinity, 0);
  var dom = goog.dom.getDomHelper(element);
  var body = dom.getDocument().body;
  var documentElement = dom.getDocument().documentElement;
  var scrollEl = dom.getDocumentScrollElement();
  for (var el = element;el = goog.style.getOffsetParent(el);) {
    if ((!goog.userAgent.IE || el.clientWidth != 0) && (!goog.userAgent.WEBKIT || el.clientHeight != 0 || el != body) && (el != body && el != documentElement && goog.style.getStyle_(el, "overflow") != "visible")) {
      var pos = goog.style.getPageOffset(el);
      var client = goog.style.getClientLeftTop(el);
      pos.x += client.x;
      pos.y += client.y;
      visibleRect.top = Math.max(visibleRect.top, pos.y);
      visibleRect.right = Math.min(visibleRect.right, pos.x + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.y + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.x);
    }
  }
  var scrollX = scrollEl.scrollLeft, scrollY = scrollEl.scrollTop;
  visibleRect.left = Math.max(visibleRect.left, scrollX);
  visibleRect.top = Math.max(visibleRect.top, scrollY);
  var winSize = dom.getViewportSize();
  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
};
goog.style.getContainerOffsetToScrollInto = function(element, container, opt_center) {
  var elementPos = goog.style.getPageOffset(element);
  var containerPos = goog.style.getPageOffset(container);
  var containerBorder = goog.style.getBorderBox(container);
  var relX = elementPos.x - containerPos.x - containerBorder.left;
  var relY = elementPos.y - containerPos.y - containerBorder.top;
  var spaceX = container.clientWidth - element.offsetWidth;
  var spaceY = container.clientHeight - element.offsetHeight;
  var scrollLeft = container.scrollLeft;
  var scrollTop = container.scrollTop;
  if (opt_center) {
    scrollLeft += relX - spaceX / 2;
    scrollTop += relY - spaceY / 2;
  } else {
    scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0));
    scrollTop += Math.min(relY, Math.max(relY - spaceY, 0));
  }
  return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.scrollIntoContainerView = function(element, container, opt_center) {
  var offset = goog.style.getContainerOffsetToScrollInto(element, container, opt_center);
  container.scrollLeft = offset.x;
  container.scrollTop = offset.y;
};
goog.style.getClientLeftTop = function(el) {
  if (goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("1.9")) {
    var left = parseFloat(goog.style.getComputedStyle(el, "borderLeftWidth"));
    if (goog.style.isRightToLeft(el)) {
      var scrollbarWidth = el.offsetWidth - el.clientWidth - left - parseFloat(goog.style.getComputedStyle(el, "borderRightWidth"));
      left += scrollbarWidth;
    }
    return new goog.math.Coordinate(left, parseFloat(goog.style.getComputedStyle(el, "borderTopWidth")));
  }
  return new goog.math.Coordinate(el.clientLeft, el.clientTop);
};
goog.style.getPageOffset = function(el) {
  var box, doc = goog.dom.getOwnerDocument(el);
  var positionStyle = goog.style.getStyle_(el, "position");
  goog.asserts.assertObject(el, "Parameter is required");
  var BUGGY_GECKO_BOX_OBJECT = !goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS && goog.userAgent.GECKO && doc.getBoxObjectFor && !el.getBoundingClientRect && positionStyle == "absolute" && (box = doc.getBoxObjectFor(el)) && (box.screenX < 0 || box.screenY < 0);
  var pos = new goog.math.Coordinate(0, 0);
  var viewportElement = goog.style.getClientViewportElement(doc);
  if (el == viewportElement) {
    return pos;
  }
  if (goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS || el.getBoundingClientRect) {
    box = goog.style.getBoundingClientRect_(el);
    var scrollCoord = goog.dom.getDomHelper(doc).getDocumentScroll();
    pos.x = box.left + scrollCoord.x;
    pos.y = box.top + scrollCoord.y;
  } else {
    if (doc.getBoxObjectFor && !BUGGY_GECKO_BOX_OBJECT) {
      box = doc.getBoxObjectFor(el);
      var vpBox = doc.getBoxObjectFor(viewportElement);
      pos.x = box.screenX - vpBox.screenX;
      pos.y = box.screenY - vpBox.screenY;
    } else {
      var parent = el;
      do {
        pos.x += parent.offsetLeft;
        pos.y += parent.offsetTop;
        if (parent != el) {
          pos.x += parent.clientLeft || 0;
          pos.y += parent.clientTop || 0;
        }
        if (goog.userAgent.WEBKIT && goog.style.getComputedPosition(parent) == "fixed") {
          pos.x += doc.body.scrollLeft;
          pos.y += doc.body.scrollTop;
          break;
        }
        parent = parent.offsetParent;
      } while (parent && parent != el);
      if (goog.userAgent.OPERA || goog.userAgent.WEBKIT && positionStyle == "absolute") {
        pos.y -= doc.body.offsetTop;
      }
      for (parent = el;(parent = goog.style.getOffsetParent(parent)) && parent != doc.body && parent != viewportElement;) {
        pos.x -= parent.scrollLeft;
        if (!goog.userAgent.OPERA || parent.tagName != "TR") {
          pos.y -= parent.scrollTop;
        }
      }
    }
  }
  return pos;
};
goog.style.getPageOffsetLeft = function(el) {
  return goog.style.getPageOffset(el).x;
};
goog.style.getPageOffsetTop = function(el) {
  return goog.style.getPageOffset(el).y;
};
goog.style.getFramedPageOffset = function(el, relativeWin) {
  var position = new goog.math.Coordinate(0, 0);
  var currentWin = goog.dom.getWindow(goog.dom.getOwnerDocument(el));
  var currentEl = el;
  do {
    var offset = currentWin == relativeWin ? goog.style.getPageOffset(currentEl) : goog.style.getClientPositionForElement_(goog.asserts.assert(currentEl));
    position.x += offset.x;
    position.y += offset.y;
  } while (currentWin && currentWin != relativeWin && (currentEl = currentWin.frameElement) && (currentWin = currentWin.parent));
  return position;
};
goog.style.translateRectForAnotherFrame = function(rect, origBase, newBase) {
  if (origBase.getDocument() != newBase.getDocument()) {
    var body = origBase.getDocument().body;
    var pos = goog.style.getFramedPageOffset(body, newBase.getWindow());
    pos = goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));
    if (goog.userAgent.IE && !origBase.isCss1CompatMode()) {
      pos = goog.math.Coordinate.difference(pos, origBase.getDocumentScroll());
    }
    rect.left += pos.x;
    rect.top += pos.y;
  }
};
goog.style.getRelativePosition = function(a, b) {
  var ap = goog.style.getClientPosition(a);
  var bp = goog.style.getClientPosition(b);
  return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y);
};
goog.style.getClientPositionForElement_ = function(el) {
  var pos;
  if (goog.style.GET_BOUNDING_CLIENT_RECT_ALWAYS_EXISTS || el.getBoundingClientRect) {
    var box = goog.style.getBoundingClientRect_(el);
    pos = new goog.math.Coordinate(box.left, box.top);
  } else {
    var scrollCoord = goog.dom.getDomHelper(el).getDocumentScroll();
    var pageCoord = goog.style.getPageOffset(el);
    pos = new goog.math.Coordinate(pageCoord.x - scrollCoord.x, pageCoord.y - scrollCoord.y);
  }
  if (goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher(12)) {
    return goog.math.Coordinate.sum(pos, goog.style.getCssTranslation(el));
  } else {
    return pos;
  }
};
goog.style.getClientPosition = function(el) {
  goog.asserts.assert(el);
  if (el.nodeType == goog.dom.NodeType.ELEMENT) {
    return goog.style.getClientPositionForElement_((el));
  } else {
    var isAbstractedEvent = goog.isFunction(el.getBrowserEvent);
    var be = (el);
    var targetEvent = el;
    if (el.targetTouches) {
      targetEvent = el.targetTouches[0];
    } else {
      if (isAbstractedEvent && be.getBrowserEvent().targetTouches) {
        targetEvent = be.getBrowserEvent().targetTouches[0];
      }
    }
    return new goog.math.Coordinate(targetEvent.clientX, targetEvent.clientY);
  }
};
goog.style.setPageOffset = function(el, x, opt_y) {
  var cur = goog.style.getPageOffset(el);
  if (x instanceof goog.math.Coordinate) {
    opt_y = x.y;
    x = x.x;
  }
  var dx = x - cur.x;
  var dy = opt_y - cur.y;
  goog.style.setPosition(el, el.offsetLeft + dx, el.offsetTop + dy);
};
goog.style.setSize = function(element, w, opt_h) {
  var h;
  if (w instanceof goog.math.Size) {
    h = w.height;
    w = w.width;
  } else {
    if (opt_h == undefined) {
      throw Error("missing height argument");
    }
    h = opt_h;
  }
  goog.style.setWidth(element, (w));
  goog.style.setHeight(element, (h));
};
goog.style.getPixelStyleValue_ = function(value, round) {
  if (typeof value == "number") {
    value = (round ? Math.round(value) : value) + "px";
  }
  return value;
};
goog.style.setHeight = function(element, height) {
  element.style.height = goog.style.getPixelStyleValue_(height, true);
};
goog.style.setWidth = function(element, width) {
  element.style.width = goog.style.getPixelStyleValue_(width, true);
};
goog.style.getSize = function(element) {
  return goog.style.evaluateWithTemporaryDisplay_(goog.style.getSizeWithDisplay_, (element));
};
goog.style.evaluateWithTemporaryDisplay_ = function(fn, element) {
  if (goog.style.getStyle_(element, "display") != "none") {
    return fn(element);
  }
  var style = element.style;
  var originalDisplay = style.display;
  var originalVisibility = style.visibility;
  var originalPosition = style.position;
  style.visibility = "hidden";
  style.position = "absolute";
  style.display = "inline";
  var retVal = fn(element);
  style.display = originalDisplay;
  style.position = originalPosition;
  style.visibility = originalVisibility;
  return retVal;
};
goog.style.getSizeWithDisplay_ = function(element) {
  var offsetWidth = element.offsetWidth;
  var offsetHeight = element.offsetHeight;
  var webkitOffsetsZero = goog.userAgent.WEBKIT && !offsetWidth && !offsetHeight;
  if ((!goog.isDef(offsetWidth) || webkitOffsetsZero) && element.getBoundingClientRect) {
    var clientRect = goog.style.getBoundingClientRect_(element);
    return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
  }
  return new goog.math.Size(offsetWidth, offsetHeight);
};
goog.style.getTransformedSize = function(element) {
  if (!element.getBoundingClientRect) {
    return null;
  }
  var clientRect = goog.style.evaluateWithTemporaryDisplay_(goog.style.getBoundingClientRect_, element);
  return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
};
goog.style.getBounds = function(element) {
  var o = goog.style.getPageOffset(element);
  var s = goog.style.getSize(element);
  return new goog.math.Rect(o.x, o.y, s.width, s.height);
};
goog.style.toCamelCase = function(selector) {
  return goog.string.toCamelCase(String(selector));
};
goog.style.toSelectorCase = function(selector) {
  return goog.string.toSelectorCase(selector);
};
goog.style.getOpacity = function(el) {
  var style = el.style;
  var result = "";
  if ("opacity" in style) {
    result = style.opacity;
  } else {
    if ("MozOpacity" in style) {
      result = style.MozOpacity;
    } else {
      if ("filter" in style) {
        var match = style.filter.match(/alpha\(opacity=([\d.]+)\)/);
        if (match) {
          result = String(match[1] / 100);
        }
      }
    }
  }
  return result == "" ? result : Number(result);
};
goog.style.setOpacity = function(el, alpha) {
  var style = el.style;
  if ("opacity" in style) {
    style.opacity = alpha;
  } else {
    if ("MozOpacity" in style) {
      style.MozOpacity = alpha;
    } else {
      if ("filter" in style) {
        if (alpha === "") {
          style.filter = "";
        } else {
          style.filter = "alpha(opacity\x3d" + alpha * 100 + ")";
        }
      }
    }
  }
};
goog.style.setTransparentBackgroundImage = function(el, src) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(" + 'src\x3d"' + src + '", sizingMethod\x3d"crop")';
  } else {
    style.backgroundImage = "url(" + src + ")";
    style.backgroundPosition = "top left";
    style.backgroundRepeat = "no-repeat";
  }
};
goog.style.clearTransparentBackgroundImage = function(el) {
  var style = el.style;
  if ("filter" in style) {
    style.filter = "";
  } else {
    style.backgroundImage = "none";
  }
};
goog.style.showElement = function(el, display) {
  goog.style.setElementShown(el, display);
};
goog.style.setElementShown = function(el, isShown) {
  el.style.display = isShown ? "" : "none";
};
goog.style.isElementShown = function(el) {
  return el.style.display != "none";
};
goog.style.installStyles = function(stylesString, opt_node) {
  var dh = goog.dom.getDomHelper(opt_node);
  var styleSheet = null;
  var doc = dh.getDocument();
  if (goog.userAgent.IE && doc.createStyleSheet) {
    styleSheet = doc.createStyleSheet();
    goog.style.setStyles(styleSheet, stylesString);
  } else {
    var head = dh.getElementsByTagNameAndClass("head")[0];
    if (!head) {
      var body = dh.getElementsByTagNameAndClass("body")[0];
      head = dh.createDom("head");
      body.parentNode.insertBefore(head, body);
    }
    styleSheet = dh.createDom("style");
    goog.style.setStyles(styleSheet, stylesString);
    dh.appendChild(head, styleSheet);
  }
  return styleSheet;
};
goog.style.uninstallStyles = function(styleSheet) {
  var node = styleSheet.ownerNode || styleSheet.owningElement || (styleSheet);
  goog.dom.removeNode(node);
};
goog.style.setStyles = function(element, stylesString) {
  if (goog.userAgent.IE && goog.isDef(element.cssText)) {
    element.cssText = stylesString;
  } else {
    element.innerHTML = stylesString;
  }
};
goog.style.setPreWrap = function(el) {
  var style = el.style;
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.whiteSpace = "pre";
    style.wordWrap = "break-word";
  } else {
    if (goog.userAgent.GECKO) {
      style.whiteSpace = "-moz-pre-wrap";
    } else {
      style.whiteSpace = "pre-wrap";
    }
  }
};
goog.style.setInlineBlock = function(el) {
  var style = el.style;
  style.position = "relative";
  if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("8")) {
    style.zoom = "1";
    style.display = "inline";
  } else {
    if (goog.userAgent.GECKO) {
      style.display = goog.userAgent.isVersionOrHigher("1.9a") ? "inline-block" : "-moz-inline-box";
    } else {
      style.display = "inline-block";
    }
  }
};
goog.style.isRightToLeft = function(el) {
  return "rtl" == goog.style.getStyle_(el, "direction");
};
goog.style.unselectableStyle_ = goog.userAgent.GECKO ? "MozUserSelect" : goog.userAgent.WEBKIT ? "WebkitUserSelect" : null;
goog.style.isUnselectable = function(el) {
  if (goog.style.unselectableStyle_) {
    return el.style[goog.style.unselectableStyle_].toLowerCase() == "none";
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      return el.getAttribute("unselectable") == "on";
    }
  }
  return false;
};
goog.style.setUnselectable = function(el, unselectable, opt_noRecurse) {
  var descendants = !opt_noRecurse ? el.getElementsByTagName("*") : null;
  var name = goog.style.unselectableStyle_;
  if (name) {
    var value = unselectable ? "none" : "";
    el.style[name] = value;
    if (descendants) {
      for (var i = 0, descendant;descendant = descendants[i];i++) {
        descendant.style[name] = value;
      }
    }
  } else {
    if (goog.userAgent.IE || goog.userAgent.OPERA) {
      var value = unselectable ? "on" : "";
      el.setAttribute("unselectable", value);
      if (descendants) {
        for (var i = 0, descendant;descendant = descendants[i];i++) {
          descendant.setAttribute("unselectable", value);
        }
      }
    }
  }
};
goog.style.getBorderBoxSize = function(element) {
  return new goog.math.Size(element.offsetWidth, element.offsetHeight);
};
goog.style.setBorderBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right;
      style.pixelHeight = size.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom;
    } else {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "border-box");
  }
};
goog.style.getContentBoxSize = function(element) {
  var doc = goog.dom.getOwnerDocument(element);
  var ieCurrentStyle = goog.userAgent.IE && element.currentStyle;
  if (ieCurrentStyle && goog.dom.getDomHelper(doc).isCss1CompatMode() && ieCurrentStyle.width != "auto" && ieCurrentStyle.height != "auto" && !ieCurrentStyle.boxSizing) {
    var width = goog.style.getIePixelValue_(element, ieCurrentStyle.width, "width", "pixelWidth");
    var height = goog.style.getIePixelValue_(element, ieCurrentStyle.height, "height", "pixelHeight");
    return new goog.math.Size(width, height);
  } else {
    var borderBoxSize = goog.style.getBorderBoxSize(element);
    var paddingBox = goog.style.getPaddingBox(element);
    var borderBox = goog.style.getBorderBox(element);
    return new goog.math.Size(borderBoxSize.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right, borderBoxSize.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom);
  }
};
goog.style.setContentBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element);
  var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if (goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher("8"))) {
    var style = element.style;
    if (isCss1CompatMode) {
      style.pixelWidth = size.width;
      style.pixelHeight = size.height;
    } else {
      var paddingBox = goog.style.getPaddingBox(element);
      var borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width + borderBox.left + paddingBox.left + paddingBox.right + borderBox.right;
      style.pixelHeight = size.height + borderBox.top + paddingBox.top + paddingBox.bottom + borderBox.bottom;
    }
  } else {
    goog.style.setBoxSizingSize_(element, size, "content-box");
  }
};
goog.style.setBoxSizingSize_ = function(element, size, boxSizing) {
  var style = element.style;
  if (goog.userAgent.GECKO) {
    style.MozBoxSizing = boxSizing;
  } else {
    if (goog.userAgent.WEBKIT) {
      style.WebkitBoxSizing = boxSizing;
    } else {
      style.boxSizing = boxSizing;
    }
  }
  style.width = Math.max(size.width, 0) + "px";
  style.height = Math.max(size.height, 0) + "px";
};
goog.style.getIePixelValue_ = function(element, value, name, pixelName) {
  if (/^\d+px?$/.test(value)) {
    return parseInt(value, 10);
  } else {
    var oldStyleValue = element.style[name];
    var oldRuntimeValue = element.runtimeStyle[name];
    element.runtimeStyle[name] = element.currentStyle[name];
    element.style[name] = value;
    var pixelValue = element.style[pixelName];
    element.style[name] = oldStyleValue;
    element.runtimeStyle[name] = oldRuntimeValue;
    return pixelValue;
  }
};
goog.style.getIePixelDistance_ = function(element, propName) {
  var value = goog.style.getCascadedStyle(element, propName);
  return value ? goog.style.getIePixelValue_(element, value, "left", "pixelLeft") : 0;
};
goog.style.getBox_ = function(element, stylePrefix) {
  if (goog.userAgent.IE) {
    var left = goog.style.getIePixelDistance_(element, stylePrefix + "Left");
    var right = goog.style.getIePixelDistance_(element, stylePrefix + "Right");
    var top = goog.style.getIePixelDistance_(element, stylePrefix + "Top");
    var bottom = goog.style.getIePixelDistance_(element, stylePrefix + "Bottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, stylePrefix + "Left"));
    var right = (goog.style.getComputedStyle(element, stylePrefix + "Right"));
    var top = (goog.style.getComputedStyle(element, stylePrefix + "Top"));
    var bottom = (goog.style.getComputedStyle(element, stylePrefix + "Bottom"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getPaddingBox = function(element) {
  return goog.style.getBox_(element, "padding");
};
goog.style.getMarginBox = function(element) {
  return goog.style.getBox_(element, "margin");
};
goog.style.ieBorderWidthKeywords_ = {"thin":2, "medium":4, "thick":6};
goog.style.getIePixelBorder_ = function(element, prop) {
  if (goog.style.getCascadedStyle(element, prop + "Style") == "none") {
    return 0;
  }
  var width = goog.style.getCascadedStyle(element, prop + "Width");
  if (width in goog.style.ieBorderWidthKeywords_) {
    return goog.style.ieBorderWidthKeywords_[width];
  }
  return goog.style.getIePixelValue_(element, width, "left", "pixelLeft");
};
goog.style.getBorderBox = function(element) {
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    var left = goog.style.getIePixelBorder_(element, "borderLeft");
    var right = goog.style.getIePixelBorder_(element, "borderRight");
    var top = goog.style.getIePixelBorder_(element, "borderTop");
    var bottom = goog.style.getIePixelBorder_(element, "borderBottom");
    return new goog.math.Box(top, right, bottom, left);
  } else {
    var left = (goog.style.getComputedStyle(element, "borderLeftWidth"));
    var right = (goog.style.getComputedStyle(element, "borderRightWidth"));
    var top = (goog.style.getComputedStyle(element, "borderTopWidth"));
    var bottom = (goog.style.getComputedStyle(element, "borderBottomWidth"));
    return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
  }
};
goog.style.getFontFamily = function(el) {
  var doc = goog.dom.getOwnerDocument(el);
  var font = "";
  if (doc.body.createTextRange && goog.dom.contains(doc, el)) {
    var range = doc.body.createTextRange();
    range.moveToElementText(el);
    try {
      font = range.queryCommandValue("FontName");
    } catch (e) {
      font = "";
    }
  }
  if (!font) {
    font = goog.style.getStyle_(el, "fontFamily");
  }
  var fontsArray = font.split(",");
  if (fontsArray.length > 1) {
    font = fontsArray[0];
  }
  return goog.string.stripQuotes(font, "\"'");
};
goog.style.lengthUnitRegex_ = /[^\d]+$/;
goog.style.getLengthUnits = function(value) {
  var units = value.match(goog.style.lengthUnitRegex_);
  return units && units[0] || null;
};
goog.style.ABSOLUTE_CSS_LENGTH_UNITS_ = {"cm":1, "in":1, "mm":1, "pc":1, "pt":1};
goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ = {"em":1, "ex":1};
goog.style.getFontSize = function(el) {
  var fontSize = goog.style.getStyle_(el, "fontSize");
  var sizeUnits = goog.style.getLengthUnits(fontSize);
  if (fontSize && "px" == sizeUnits) {
    return parseInt(fontSize, 10);
  }
  if (goog.userAgent.IE) {
    if (sizeUnits in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {
      return goog.style.getIePixelValue_(el, fontSize, "left", "pixelLeft");
    } else {
      if (el.parentNode && el.parentNode.nodeType == goog.dom.NodeType.ELEMENT && sizeUnits in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_) {
        var parentElement = (el.parentNode);
        var parentSize = goog.style.getStyle_(parentElement, "fontSize");
        return goog.style.getIePixelValue_(parentElement, fontSize == parentSize ? "1em" : fontSize, "left", "pixelLeft");
      }
    }
  }
  var sizeElement = goog.dom.createDom("span", {"style":"visibility:hidden;position:absolute;" + "line-height:0;padding:0;margin:0;border:0;height:1em;"});
  goog.dom.appendChild(el, sizeElement);
  fontSize = sizeElement.offsetHeight;
  goog.dom.removeNode(sizeElement);
  return fontSize;
};
goog.style.parseStyleAttribute = function(value) {
  var result = {};
  goog.array.forEach(value.split(/\s*;\s*/), function(pair) {
    var keyValue = pair.split(/\s*:\s*/);
    if (keyValue.length == 2) {
      result[goog.string.toCamelCase(keyValue[0].toLowerCase())] = keyValue[1];
    }
  });
  return result;
};
goog.style.toStyleAttribute = function(obj) {
  var buffer = [];
  goog.object.forEach(obj, function(value, key) {
    buffer.push(goog.string.toSelectorCase(key), ":", value, ";");
  });
  return buffer.join("");
};
goog.style.setFloat = function(el, value) {
  el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] = value;
};
goog.style.getFloat = function(el) {
  return el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] || "";
};
goog.style.getScrollbarWidth = function(opt_className) {
  var outerDiv = goog.dom.createElement("div");
  if (opt_className) {
    outerDiv.className = opt_className;
  }
  outerDiv.style.cssText = "overflow:auto;" + "position:absolute;top:0;width:100px;height:100px";
  var innerDiv = goog.dom.createElement("div");
  goog.style.setSize(innerDiv, "200px", "200px");
  outerDiv.appendChild(innerDiv);
  goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);
  var width = outerDiv.offsetWidth - outerDiv.clientWidth;
  goog.dom.removeNode(outerDiv);
  return width;
};
goog.style.MATRIX_TRANSLATION_REGEX_ = new RegExp("matrix\\([0-9\\.\\-]+, [0-9\\.\\-]+, " + "[0-9\\.\\-]+, [0-9\\.\\-]+, " + "([0-9\\.\\-]+)p?x?, ([0-9\\.\\-]+)p?x?\\)");
goog.style.getCssTranslation = function(element) {
  var transform = goog.style.getComputedTransform(element);
  if (!transform) {
    return new goog.math.Coordinate(0, 0);
  }
  var matches = transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);
  if (!matches) {
    return new goog.math.Coordinate(0, 0);
  }
  return new goog.math.Coordinate(parseFloat(matches[1]), parseFloat(matches[2]));
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var G__101537 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var G__101538 = cljs.core.next.call(null, coll__$1);
        sb = G__101537;
        coll__$1 = G__101538;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  var join__2 = function(separator, coll) {
    var sb = new goog.string.StringBuffer;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
        var coll__$2 = cljs.core.next.call(null, coll__$1);
        if (coll__$2 == null) {
        } else {
          sb.append(separator);
        }
        var G__101539 = sb;
        var G__101540 = coll__$2;
        sb = G__101539;
        coll__$1 = G__101540;
        continue;
      } else {
        return sb.toString();
      }
      break;
    }
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__101541 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__101541;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__101545 = cljs.core._EQ_;
    var expr__101546 = limit;
    if (cljs.core.truth_(pred__101545.call(null, 1, expr__101546))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__101545.call(null, 2, expr__101546))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__101548 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__101549 = limit__$1 - 1;
            var G__101550 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__101548;
            limit__$1 = G__101549;
            parts = G__101550;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__101551 = index - 1;
        index = G__101551;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___101552 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___101552)) {
        var replacement_101553 = temp__4124__auto___101552;
        buffer.append([cljs.core.str(replacement_101553)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__101554 = index + 1;
      index = G__101554;
      continue;
    }
    break;
  }
};
goog.provide("goog.dom.xml");
goog.require("goog.dom");
goog.require("goog.dom.NodeType");
goog.dom.xml.MAX_XML_SIZE_KB = 2 * 1024;
goog.dom.xml.MAX_ELEMENT_DEPTH = 256;
goog.dom.xml.createDocument = function(opt_rootTagName, opt_namespaceUri) {
  if (opt_namespaceUri && !opt_rootTagName) {
    throw Error("Can't create document with namespace and no root tag");
  }
  if (document.implementation && document.implementation.createDocument) {
    return document.implementation.createDocument(opt_namespaceUri || "", opt_rootTagName || "", null);
  } else {
    if (typeof ActiveXObject != "undefined") {
      var doc = goog.dom.xml.createMsXmlDocument_();
      if (doc) {
        if (opt_rootTagName) {
          doc.appendChild(doc.createNode(goog.dom.NodeType.ELEMENT, opt_rootTagName, opt_namespaceUri || ""));
        }
        return doc;
      }
    }
  }
  throw Error("Your browser does not support creating new documents");
};
goog.dom.xml.loadXml = function(xml) {
  if (typeof DOMParser != "undefined") {
    return(new DOMParser).parseFromString(xml, "application/xml");
  } else {
    if (typeof ActiveXObject != "undefined") {
      var doc = goog.dom.xml.createMsXmlDocument_();
      doc.loadXML(xml);
      return doc;
    }
  }
  throw Error("Your browser does not support loading xml documents");
};
goog.dom.xml.serialize = function(xml) {
  if (typeof XMLSerializer != "undefined") {
    return(new XMLSerializer).serializeToString(xml);
  }
  var text = xml.xml;
  if (text) {
    return text;
  }
  throw Error("Your browser does not support serializing XML documents");
};
goog.dom.xml.selectSingleNode = function(node, path) {
  if (typeof node.selectSingleNode != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectSingleNode(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var result = doc.evaluate(path, node, resolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
      return result.singleNodeValue;
    }
  }
  return null;
};
goog.dom.xml.selectNodes = function(node, path) {
  if (typeof node.selectNodes != "undefined") {
    var doc = goog.dom.getOwnerDocument(node);
    if (typeof doc.setProperty != "undefined") {
      doc.setProperty("SelectionLanguage", "XPath");
    }
    return node.selectNodes(path);
  } else {
    if (document.implementation.hasFeature("XPath", "3.0")) {
      var doc = goog.dom.getOwnerDocument(node);
      var resolver = doc.createNSResolver(doc.documentElement);
      var nodes = doc.evaluate(path, node, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
      var results = [];
      var count = nodes.snapshotLength;
      for (var i = 0;i < count;i++) {
        results.push(nodes.snapshotItem(i));
      }
      return results;
    } else {
      return[];
    }
  }
};
goog.dom.xml.setAttributes = function(element, attributes) {
  for (var key in attributes) {
    if (attributes.hasOwnProperty(key)) {
      element.setAttribute(key, attributes[key]);
    }
  }
};
goog.dom.xml.createMsXmlDocument_ = function() {
  var doc = new ActiveXObject("MSXML2.DOMDocument");
  if (doc) {
    doc.resolveExternals = false;
    doc.validateOnParse = false;
    try {
      doc.setProperty("ProhibitDTD", true);
      doc.setProperty("MaxXMLSize", goog.dom.xml.MAX_XML_SIZE_KB);
      doc.setProperty("MaxElementDepth", goog.dom.xml.MAX_ELEMENT_DEPTH);
    } catch (e) {
    }
  }
  return doc;
};
goog.provide("domina");
goog.require("cljs.core");
goog.require("goog.dom.forms");
goog.require("goog.dom");
goog.require("goog.dom.classes");
goog.require("goog.dom.xml");
goog.require("goog.string");
goog.require("cljs.core");
goog.require("domina.support");
goog.require("goog.events");
goog.require("goog.style");
goog.require("clojure.string");
domina.re_html = /<|&#?\w+;/;
domina.re_leading_whitespace = /^\s+/;
domina.re_xhtml_tag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/i;
domina.re_tag_name = /<([\w:]+)/;
domina.re_no_inner_html = /<(?:script|style)/i;
domina.re_tbody = /<tbody/i;
var opt_wrapper_100577 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cselect multiple\x3d'multiple'\x3e", "\x3c/select\x3e"], null);
var table_section_wrapper_100578 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3ctable\x3e", "\x3c/table\x3e"], null);
var cell_wrapper_100579 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [3, "\x3ctable\x3e\x3ctbody\x3e\x3ctr\x3e", "\x3c/tr\x3e\x3c/tbody\x3e\x3c/table\x3e"], null);
domina.wrap_map = cljs.core.PersistentHashMap.fromArrays(["td", "optgroup", "tfoot", "tr", "area", new cljs.core.Keyword(null, "default", "default", -1987822328), "option", "legend", "thead", "col", "caption", "th", "colgroup", "tbody"], [cell_wrapper_100579, opt_wrapper_100577, table_section_wrapper_100578, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e", "\x3c/tbody\x3e\x3c/table\x3e"], null), new cljs.core.PersistentVector(null, 
3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cmap\x3e", "\x3c/map\x3e"], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [0, "", ""], null), opt_wrapper_100577, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [1, "\x3cfieldset\x3e", "\x3c/fieldset\x3e"], null), table_section_wrapper_100578, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [2, "\x3ctable\x3e\x3ctbody\x3e\x3c/tbody\x3e\x3ccolgroup\x3e", 
"\x3c/colgroup\x3e\x3c/table\x3e"], null), table_section_wrapper_100578, cell_wrapper_100579, table_section_wrapper_100578, table_section_wrapper_100578]);
domina.remove_extraneous_tbody_BANG_ = function remove_extraneous_tbody_BANG_(div, html, tag_name, start_wrap) {
  var no_tbody_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_tbody, html));
  var tbody = cljs.core._EQ_.call(null, tag_name, "table") && no_tbody_QMARK_ ? function() {
    var and__3969__auto__ = div.firstChild;
    if (cljs.core.truth_(and__3969__auto__)) {
      return div.firstChild.childNodes;
    } else {
      return and__3969__auto__;
    }
  }() : cljs.core._EQ_.call(null, start_wrap, "\x3ctable\x3e") && no_tbody_QMARK_ ? div.childNodes : cljs.core.PersistentVector.EMPTY;
  var seq__100584 = cljs.core.seq.call(null, tbody);
  var chunk__100585 = null;
  var count__100586 = 0;
  var i__100587 = 0;
  while (true) {
    if (i__100587 < count__100586) {
      var child = cljs.core._nth.call(null, chunk__100585, i__100587);
      if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
        child.parentNode.removeChild(child);
      } else {
      }
      var G__100588 = seq__100584;
      var G__100589 = chunk__100585;
      var G__100590 = count__100586;
      var G__100591 = i__100587 + 1;
      seq__100584 = G__100588;
      chunk__100585 = G__100589;
      count__100586 = G__100590;
      i__100587 = G__100591;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__100584);
      if (temp__4126__auto__) {
        var seq__100584__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__100584__$1)) {
          var c__4768__auto__ = cljs.core.chunk_first.call(null, seq__100584__$1);
          var G__100592 = cljs.core.chunk_rest.call(null, seq__100584__$1);
          var G__100593 = c__4768__auto__;
          var G__100594 = cljs.core.count.call(null, c__4768__auto__);
          var G__100595 = 0;
          seq__100584 = G__100592;
          chunk__100585 = G__100593;
          count__100586 = G__100594;
          i__100587 = G__100595;
          continue;
        } else {
          var child = cljs.core.first.call(null, seq__100584__$1);
          if (cljs.core._EQ_.call(null, child.nodeName, "tbody") && cljs.core._EQ_.call(null, child.childNodes.length, 0)) {
            child.parentNode.removeChild(child);
          } else {
          }
          var G__100596 = cljs.core.next.call(null, seq__100584__$1);
          var G__100597 = null;
          var G__100598 = 0;
          var G__100599 = 0;
          seq__100584 = G__100596;
          chunk__100585 = G__100597;
          count__100586 = G__100598;
          i__100587 = G__100599;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
domina.restore_leading_whitespace_BANG_ = function restore_leading_whitespace_BANG_(div, html) {
  return div.insertBefore(document.createTextNode(cljs.core.first.call(null, cljs.core.re_find.call(null, domina.re_leading_whitespace, html))), div.firstChild);
};
domina.html_to_dom = function html_to_dom(html) {
  var html__$1 = clojure.string.replace.call(null, html, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
  var tag_name = [cljs.core.str(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html__$1)))].join("").toLowerCase();
  var vec__100601 = cljs.core.get.call(null, domina.wrap_map, tag_name, (new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(domina.wrap_map));
  var depth = cljs.core.nth.call(null, vec__100601, 0, null);
  var start_wrap = cljs.core.nth.call(null, vec__100601, 1, null);
  var end_wrap = cljs.core.nth.call(null, vec__100601, 2, null);
  var div = function() {
    var wrapper = function() {
      var div = document.createElement("div");
      div.innerHTML = [cljs.core.str(start_wrap), cljs.core.str(html__$1), cljs.core.str(end_wrap)].join("");
      return div;
    }();
    var level = depth;
    while (true) {
      if (level > 0) {
        var G__100602 = wrapper.lastChild;
        var G__100603 = level - 1;
        wrapper = G__100602;
        level = G__100603;
        continue;
      } else {
        return wrapper;
      }
      break;
    }
  }();
  if (cljs.core.truth_(domina.support.extraneous_tbody_QMARK_)) {
    domina.remove_extraneous_tbody_BANG_.call(null, div, html__$1, tag_name, start_wrap);
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = cljs.core.not.call(null, domina.support.leading_whitespace_QMARK_);
    if (and__3969__auto__) {
      return cljs.core.re_find.call(null, domina.re_leading_whitespace, html__$1);
    } else {
      return and__3969__auto__;
    }
  }())) {
    domina.restore_leading_whitespace_BANG_.call(null, div, html__$1);
  } else {
  }
  return div.childNodes;
};
domina.string_to_dom = function string_to_dom(s) {
  if (cljs.core.truth_(cljs.core.re_find.call(null, domina.re_html, s))) {
    return domina.html_to_dom.call(null, s);
  } else {
    return document.createTextNode(s);
  }
};
domina.DomContent = function() {
  var obj100605 = {};
  return obj100605;
}();
domina.nodes = function nodes(content) {
  if (function() {
    var and__3969__auto__ = content;
    if (and__3969__auto__) {
      return content.domina$DomContent$nodes$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return content.domina$DomContent$nodes$arity$1(content);
  } else {
    var x__4625__auto__ = content == null ? null : content;
    return function() {
      var or__3981__auto__ = domina.nodes[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = domina.nodes["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "DomContent.nodes", content);
        }
      }
    }().call(null, content);
  }
};
domina.single_node = function single_node(nodeseq) {
  if (function() {
    var and__3969__auto__ = nodeseq;
    if (and__3969__auto__) {
      return nodeseq.domina$DomContent$single_node$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return nodeseq.domina$DomContent$single_node$arity$1(nodeseq);
  } else {
    var x__4625__auto__ = nodeseq == null ? null : nodeseq;
    return function() {
      var or__3981__auto__ = domina.single_node[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = domina.single_node["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "DomContent.single-node", nodeseq);
        }
      }
    }().call(null, nodeseq);
  }
};
domina._STAR_debug_STAR_ = true;
domina.log_debug = function() {
  var log_debug__delegate = function(mesg) {
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = domina._STAR_debug_STAR_;
      if (cljs.core.truth_(and__3969__auto__)) {
        return!cljs.core._EQ_.call(null, window.console, undefined);
      } else {
        return and__3969__auto__;
      }
    }())) {
      return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
    } else {
      return null;
    }
  };
  var log_debug = function(var_args) {
    var mesg = null;
    if (arguments.length > 0) {
      var G__100606__i = 0, G__100606__a = new Array(arguments.length - 0);
      while (G__100606__i < G__100606__a.length) {
        G__100606__a[G__100606__i] = arguments[G__100606__i + 0];
        ++G__100606__i;
      }
      mesg = new cljs.core.IndexedSeq(G__100606__a, 0);
    }
    return log_debug__delegate.call(this, mesg);
  };
  log_debug.cljs$lang$maxFixedArity = 0;
  log_debug.cljs$lang$applyTo = function(arglist__100607) {
    var mesg = cljs.core.seq(arglist__100607);
    return log_debug__delegate(mesg);
  };
  log_debug.cljs$core$IFn$_invoke$arity$variadic = log_debug__delegate;
  return log_debug;
}();
domina.log = function() {
  var log__delegate = function(mesg) {
    if (cljs.core.truth_(window.console)) {
      return console.log(cljs.core.apply.call(null, cljs.core.str, mesg));
    } else {
      return null;
    }
  };
  var log = function(var_args) {
    var mesg = null;
    if (arguments.length > 0) {
      var G__100608__i = 0, G__100608__a = new Array(arguments.length - 0);
      while (G__100608__i < G__100608__a.length) {
        G__100608__a[G__100608__i] = arguments[G__100608__i + 0];
        ++G__100608__i;
      }
      mesg = new cljs.core.IndexedSeq(G__100608__a, 0);
    }
    return log__delegate.call(this, mesg);
  };
  log.cljs$lang$maxFixedArity = 0;
  log.cljs$lang$applyTo = function(arglist__100609) {
    var mesg = cljs.core.seq(arglist__100609);
    return log__delegate(mesg);
  };
  log.cljs$core$IFn$_invoke$arity$variadic = log__delegate;
  return log;
}();
domina.by_id = function by_id(id) {
  return goog.dom.getElement(cljs.core.name.call(null, id));
};
domina.by_class = function by_class(class_name) {
  return domina.normalize_seq.call(null, goog.dom.getElementsByClass(cljs.core.name.call(null, class_name)));
};
domina.children = function children(content) {
  return cljs.core.doall.call(null, cljs.core.mapcat.call(null, goog.dom.getChildren, domina.nodes.call(null, content)));
};
domina.common_ancestor = function() {
  var common_ancestor__delegate = function(contents) {
    return cljs.core.apply.call(null, goog.dom.findCommonAncestor, cljs.core.map.call(null, domina.single_node, contents));
  };
  var common_ancestor = function(var_args) {
    var contents = null;
    if (arguments.length > 0) {
      var G__100610__i = 0, G__100610__a = new Array(arguments.length - 0);
      while (G__100610__i < G__100610__a.length) {
        G__100610__a[G__100610__i] = arguments[G__100610__i + 0];
        ++G__100610__i;
      }
      contents = new cljs.core.IndexedSeq(G__100610__a, 0);
    }
    return common_ancestor__delegate.call(this, contents);
  };
  common_ancestor.cljs$lang$maxFixedArity = 0;
  common_ancestor.cljs$lang$applyTo = function(arglist__100611) {
    var contents = cljs.core.seq(arglist__100611);
    return common_ancestor__delegate(contents);
  };
  common_ancestor.cljs$core$IFn$_invoke$arity$variadic = common_ancestor__delegate;
  return common_ancestor;
}();
domina.ancestor_QMARK_ = function ancestor_QMARK_(ancestor_content, descendant_content) {
  return cljs.core._EQ_.call(null, domina.common_ancestor.call(null, ancestor_content, descendant_content), domina.single_node.call(null, ancestor_content));
};
domina.clone = function clone(content) {
  return cljs.core.map.call(null, function(p1__100612_SHARP_) {
    return p1__100612_SHARP_.cloneNode(true);
  }, domina.nodes.call(null, content));
};
domina.append_BANG_ = function append_BANG_(parent_content, child_content) {
  domina.apply_with_cloning.call(null, goog.dom.appendChild, parent_content, child_content);
  return parent_content;
};
domina.insert_BANG_ = function insert_BANG_(parent_content, child_content, idx) {
  domina.apply_with_cloning.call(null, function(p1__100613_SHARP_, p2__100614_SHARP_) {
    return goog.dom.insertChildAt(p1__100613_SHARP_, p2__100614_SHARP_, idx);
  }, parent_content, child_content);
  return parent_content;
};
domina.prepend_BANG_ = function prepend_BANG_(parent_content, child_content) {
  domina.insert_BANG_.call(null, parent_content, child_content, 0);
  return parent_content;
};
domina.insert_before_BANG_ = function insert_before_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__100616_SHARP_, p2__100615_SHARP_) {
    return goog.dom.insertSiblingBefore(p2__100615_SHARP_, p1__100616_SHARP_);
  }, content, new_content);
  return content;
};
domina.insert_after_BANG_ = function insert_after_BANG_(content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__100618_SHARP_, p2__100617_SHARP_) {
    return goog.dom.insertSiblingAfter(p2__100617_SHARP_, p1__100618_SHARP_);
  }, content, new_content);
  return content;
};
domina.swap_content_BANG_ = function swap_content_BANG_(old_content, new_content) {
  domina.apply_with_cloning.call(null, function(p1__100620_SHARP_, p2__100619_SHARP_) {
    return goog.dom.replaceNode(p2__100619_SHARP_, p1__100620_SHARP_);
  }, old_content, new_content);
  return old_content;
};
domina.detach_BANG_ = function detach_BANG_(content) {
  return cljs.core.doall.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_BANG_ = function destroy_BANG_(content) {
  return cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeNode, domina.nodes.call(null, content)));
};
domina.destroy_children_BANG_ = function destroy_children_BANG_(content) {
  cljs.core.dorun.call(null, cljs.core.map.call(null, goog.dom.removeChildren, domina.nodes.call(null, content)));
  return content;
};
domina.style = function style(content, name) {
  var s = goog.style.getStyle(domina.single_node.call(null, content), cljs.core.name.call(null, name));
  if (cljs.core.truth_(clojure.string.blank_QMARK_.call(null, s))) {
    return null;
  } else {
    return s;
  }
};
domina.attr = function attr(content, name) {
  return domina.single_node.call(null, content).getAttribute(cljs.core.name.call(null, name));
};
domina.set_style_BANG_ = function() {
  var set_style_BANG___delegate = function(content, name, value) {
    var seq__100625_100629 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__100626_100630 = null;
    var count__100627_100631 = 0;
    var i__100628_100632 = 0;
    while (true) {
      if (i__100628_100632 < count__100627_100631) {
        var n_100633 = cljs.core._nth.call(null, chunk__100626_100630, i__100628_100632);
        goog.style.setStyle(n_100633, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
        var G__100634 = seq__100625_100629;
        var G__100635 = chunk__100626_100630;
        var G__100636 = count__100627_100631;
        var G__100637 = i__100628_100632 + 1;
        seq__100625_100629 = G__100634;
        chunk__100626_100630 = G__100635;
        count__100627_100631 = G__100636;
        i__100628_100632 = G__100637;
        continue;
      } else {
        var temp__4126__auto___100638 = cljs.core.seq.call(null, seq__100625_100629);
        if (temp__4126__auto___100638) {
          var seq__100625_100639__$1 = temp__4126__auto___100638;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__100625_100639__$1)) {
            var c__4768__auto___100640 = cljs.core.chunk_first.call(null, seq__100625_100639__$1);
            var G__100641 = cljs.core.chunk_rest.call(null, seq__100625_100639__$1);
            var G__100642 = c__4768__auto___100640;
            var G__100643 = cljs.core.count.call(null, c__4768__auto___100640);
            var G__100644 = 0;
            seq__100625_100629 = G__100641;
            chunk__100626_100630 = G__100642;
            count__100627_100631 = G__100643;
            i__100628_100632 = G__100644;
            continue;
          } else {
            var n_100645 = cljs.core.first.call(null, seq__100625_100639__$1);
            goog.style.setStyle(n_100645, cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
            var G__100646 = cljs.core.next.call(null, seq__100625_100639__$1);
            var G__100647 = null;
            var G__100648 = 0;
            var G__100649 = 0;
            seq__100625_100629 = G__100646;
            chunk__100626_100630 = G__100647;
            count__100627_100631 = G__100648;
            i__100628_100632 = G__100649;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return content;
  };
  var set_style_BANG_ = function(content, name, var_args) {
    var value = null;
    if (arguments.length > 2) {
      var G__100650__i = 0, G__100650__a = new Array(arguments.length - 2);
      while (G__100650__i < G__100650__a.length) {
        G__100650__a[G__100650__i] = arguments[G__100650__i + 2];
        ++G__100650__i;
      }
      value = new cljs.core.IndexedSeq(G__100650__a, 0);
    }
    return set_style_BANG___delegate.call(this, content, name, value);
  };
  set_style_BANG_.cljs$lang$maxFixedArity = 2;
  set_style_BANG_.cljs$lang$applyTo = function(arglist__100651) {
    var content = cljs.core.first(arglist__100651);
    arglist__100651 = cljs.core.next(arglist__100651);
    var name = cljs.core.first(arglist__100651);
    var value = cljs.core.rest(arglist__100651);
    return set_style_BANG___delegate(content, name, value);
  };
  set_style_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_style_BANG___delegate;
  return set_style_BANG_;
}();
domina.set_attr_BANG_ = function() {
  var set_attr_BANG___delegate = function(content, name, value) {
    var seq__100656_100660 = cljs.core.seq.call(null, domina.nodes.call(null, content));
    var chunk__100657_100661 = null;
    var count__100658_100662 = 0;
    var i__100659_100663 = 0;
    while (true) {
      if (i__100659_100663 < count__100658_100662) {
        var n_100664 = cljs.core._nth.call(null, chunk__100657_100661, i__100659_100663);
        n_100664.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
        var G__100665 = seq__100656_100660;
        var G__100666 = chunk__100657_100661;
        var G__100667 = count__100658_100662;
        var G__100668 = i__100659_100663 + 1;
        seq__100656_100660 = G__100665;
        chunk__100657_100661 = G__100666;
        count__100658_100662 = G__100667;
        i__100659_100663 = G__100668;
        continue;
      } else {
        var temp__4126__auto___100669 = cljs.core.seq.call(null, seq__100656_100660);
        if (temp__4126__auto___100669) {
          var seq__100656_100670__$1 = temp__4126__auto___100669;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__100656_100670__$1)) {
            var c__4768__auto___100671 = cljs.core.chunk_first.call(null, seq__100656_100670__$1);
            var G__100672 = cljs.core.chunk_rest.call(null, seq__100656_100670__$1);
            var G__100673 = c__4768__auto___100671;
            var G__100674 = cljs.core.count.call(null, c__4768__auto___100671);
            var G__100675 = 0;
            seq__100656_100660 = G__100672;
            chunk__100657_100661 = G__100673;
            count__100658_100662 = G__100674;
            i__100659_100663 = G__100675;
            continue;
          } else {
            var n_100676 = cljs.core.first.call(null, seq__100656_100670__$1);
            n_100676.setAttribute(cljs.core.name.call(null, name), cljs.core.apply.call(null, cljs.core.str, value));
            var G__100677 = cljs.core.next.call(null, seq__100656_100670__$1);
            var G__100678 = null;
            var G__100679 = 0;
            var G__100680 = 0;
            seq__100656_100660 = G__100677;
            chunk__100657_100661 = G__100678;
            count__100658_100662 = G__100679;
            i__100659_100663 = G__100680;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return content;
  };
  var set_attr_BANG_ = function(content, name, var_args) {
    var value = null;
    if (arguments.length > 2) {
      var G__100681__i = 0, G__100681__a = new Array(arguments.length - 2);
      while (G__100681__i < G__100681__a.length) {
        G__100681__a[G__100681__i] = arguments[G__100681__i + 2];
        ++G__100681__i;
      }
      value = new cljs.core.IndexedSeq(G__100681__a, 0);
    }
    return set_attr_BANG___delegate.call(this, content, name, value);
  };
  set_attr_BANG_.cljs$lang$maxFixedArity = 2;
  set_attr_BANG_.cljs$lang$applyTo = function(arglist__100682) {
    var content = cljs.core.first(arglist__100682);
    arglist__100682 = cljs.core.next(arglist__100682);
    var name = cljs.core.first(arglist__100682);
    var value = cljs.core.rest(arglist__100682);
    return set_attr_BANG___delegate(content, name, value);
  };
  set_attr_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_attr_BANG___delegate;
  return set_attr_BANG_;
}();
domina.remove_attr_BANG_ = function remove_attr_BANG_(content, name) {
  var seq__100687_100691 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__100688_100692 = null;
  var count__100689_100693 = 0;
  var i__100690_100694 = 0;
  while (true) {
    if (i__100690_100694 < count__100689_100693) {
      var n_100695 = cljs.core._nth.call(null, chunk__100688_100692, i__100690_100694);
      n_100695.removeAttribute(cljs.core.name.call(null, name));
      var G__100696 = seq__100687_100691;
      var G__100697 = chunk__100688_100692;
      var G__100698 = count__100689_100693;
      var G__100699 = i__100690_100694 + 1;
      seq__100687_100691 = G__100696;
      chunk__100688_100692 = G__100697;
      count__100689_100693 = G__100698;
      i__100690_100694 = G__100699;
      continue;
    } else {
      var temp__4126__auto___100700 = cljs.core.seq.call(null, seq__100687_100691);
      if (temp__4126__auto___100700) {
        var seq__100687_100701__$1 = temp__4126__auto___100700;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__100687_100701__$1)) {
          var c__4768__auto___100702 = cljs.core.chunk_first.call(null, seq__100687_100701__$1);
          var G__100703 = cljs.core.chunk_rest.call(null, seq__100687_100701__$1);
          var G__100704 = c__4768__auto___100702;
          var G__100705 = cljs.core.count.call(null, c__4768__auto___100702);
          var G__100706 = 0;
          seq__100687_100691 = G__100703;
          chunk__100688_100692 = G__100704;
          count__100689_100693 = G__100705;
          i__100690_100694 = G__100706;
          continue;
        } else {
          var n_100707 = cljs.core.first.call(null, seq__100687_100701__$1);
          n_100707.removeAttribute(cljs.core.name.call(null, name));
          var G__100708 = cljs.core.next.call(null, seq__100687_100701__$1);
          var G__100709 = null;
          var G__100710 = 0;
          var G__100711 = 0;
          seq__100687_100691 = G__100708;
          chunk__100688_100692 = G__100709;
          count__100689_100693 = G__100710;
          i__100690_100694 = G__100711;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.parse_style_attributes = function parse_style_attributes(style) {
  return cljs.core.reduce.call(null, function(acc, pair) {
    var vec__100713 = pair.split(/\s*:\s*/);
    var k = cljs.core.nth.call(null, vec__100713, 0, null);
    var v = cljs.core.nth.call(null, vec__100713, 1, null);
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = k;
      if (cljs.core.truth_(and__3969__auto__)) {
        return v;
      } else {
        return and__3969__auto__;
      }
    }())) {
      return cljs.core.assoc.call(null, acc, cljs.core.keyword.call(null, k.toLowerCase()), v);
    } else {
      return acc;
    }
  }, cljs.core.PersistentArrayMap.EMPTY, style.split(/\s*;\s*/));
};
domina.styles = function styles(content) {
  var style = domina.attr.call(null, content, "style");
  if (typeof style === "string") {
    return domina.parse_style_attributes.call(null, style);
  } else {
    if (style == null) {
      return cljs.core.PersistentArrayMap.EMPTY;
    } else {
      if (cljs.core.truth_(style.cssText)) {
        return domina.parse_style_attributes.call(null, style.cssText);
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }
  }
};
domina.attrs = function attrs(content) {
  var node = domina.single_node.call(null, content);
  var attrs__$1 = node.attributes;
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.map.call(null, function(node, attrs__$1) {
    return function(p1__100714_SHARP_) {
      var attr = attrs__$1.item(p1__100714_SHARP_);
      var value = attr.nodeValue;
      if (cljs.core.not_EQ_.call(null, null, value) && cljs.core.not_EQ_.call(null, "", value)) {
        return new cljs.core.PersistentArrayMap.fromArray([cljs.core.keyword.call(null, attr.nodeName.toLowerCase()), attr.nodeValue], true, false);
      } else {
        return null;
      }
    };
  }(node, attrs__$1), cljs.core.range.call(null, attrs__$1.length))));
};
domina.set_styles_BANG_ = function set_styles_BANG_(content, styles) {
  var seq__100721_100727 = cljs.core.seq.call(null, styles);
  var chunk__100722_100728 = null;
  var count__100723_100729 = 0;
  var i__100724_100730 = 0;
  while (true) {
    if (i__100724_100730 < count__100723_100729) {
      var vec__100725_100731 = cljs.core._nth.call(null, chunk__100722_100728, i__100724_100730);
      var name_100732 = cljs.core.nth.call(null, vec__100725_100731, 0, null);
      var value_100733 = cljs.core.nth.call(null, vec__100725_100731, 1, null);
      domina.set_style_BANG_.call(null, content, name_100732, value_100733);
      var G__100734 = seq__100721_100727;
      var G__100735 = chunk__100722_100728;
      var G__100736 = count__100723_100729;
      var G__100737 = i__100724_100730 + 1;
      seq__100721_100727 = G__100734;
      chunk__100722_100728 = G__100735;
      count__100723_100729 = G__100736;
      i__100724_100730 = G__100737;
      continue;
    } else {
      var temp__4126__auto___100738 = cljs.core.seq.call(null, seq__100721_100727);
      if (temp__4126__auto___100738) {
        var seq__100721_100739__$1 = temp__4126__auto___100738;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__100721_100739__$1)) {
          var c__4768__auto___100740 = cljs.core.chunk_first.call(null, seq__100721_100739__$1);
          var G__100741 = cljs.core.chunk_rest.call(null, seq__100721_100739__$1);
          var G__100742 = c__4768__auto___100740;
          var G__100743 = cljs.core.count.call(null, c__4768__auto___100740);
          var G__100744 = 0;
          seq__100721_100727 = G__100741;
          chunk__100722_100728 = G__100742;
          count__100723_100729 = G__100743;
          i__100724_100730 = G__100744;
          continue;
        } else {
          var vec__100726_100745 = cljs.core.first.call(null, seq__100721_100739__$1);
          var name_100746 = cljs.core.nth.call(null, vec__100726_100745, 0, null);
          var value_100747 = cljs.core.nth.call(null, vec__100726_100745, 1, null);
          domina.set_style_BANG_.call(null, content, name_100746, value_100747);
          var G__100748 = cljs.core.next.call(null, seq__100721_100739__$1);
          var G__100749 = null;
          var G__100750 = 0;
          var G__100751 = 0;
          seq__100721_100727 = G__100748;
          chunk__100722_100728 = G__100749;
          count__100723_100729 = G__100750;
          i__100724_100730 = G__100751;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.set_attrs_BANG_ = function set_attrs_BANG_(content, attrs) {
  var seq__100758_100764 = cljs.core.seq.call(null, attrs);
  var chunk__100759_100765 = null;
  var count__100760_100766 = 0;
  var i__100761_100767 = 0;
  while (true) {
    if (i__100761_100767 < count__100760_100766) {
      var vec__100762_100768 = cljs.core._nth.call(null, chunk__100759_100765, i__100761_100767);
      var name_100769 = cljs.core.nth.call(null, vec__100762_100768, 0, null);
      var value_100770 = cljs.core.nth.call(null, vec__100762_100768, 1, null);
      domina.set_attr_BANG_.call(null, content, name_100769, value_100770);
      var G__100771 = seq__100758_100764;
      var G__100772 = chunk__100759_100765;
      var G__100773 = count__100760_100766;
      var G__100774 = i__100761_100767 + 1;
      seq__100758_100764 = G__100771;
      chunk__100759_100765 = G__100772;
      count__100760_100766 = G__100773;
      i__100761_100767 = G__100774;
      continue;
    } else {
      var temp__4126__auto___100775 = cljs.core.seq.call(null, seq__100758_100764);
      if (temp__4126__auto___100775) {
        var seq__100758_100776__$1 = temp__4126__auto___100775;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__100758_100776__$1)) {
          var c__4768__auto___100777 = cljs.core.chunk_first.call(null, seq__100758_100776__$1);
          var G__100778 = cljs.core.chunk_rest.call(null, seq__100758_100776__$1);
          var G__100779 = c__4768__auto___100777;
          var G__100780 = cljs.core.count.call(null, c__4768__auto___100777);
          var G__100781 = 0;
          seq__100758_100764 = G__100778;
          chunk__100759_100765 = G__100779;
          count__100760_100766 = G__100780;
          i__100761_100767 = G__100781;
          continue;
        } else {
          var vec__100763_100782 = cljs.core.first.call(null, seq__100758_100776__$1);
          var name_100783 = cljs.core.nth.call(null, vec__100763_100782, 0, null);
          var value_100784 = cljs.core.nth.call(null, vec__100763_100782, 1, null);
          domina.set_attr_BANG_.call(null, content, name_100783, value_100784);
          var G__100785 = cljs.core.next.call(null, seq__100758_100776__$1);
          var G__100786 = null;
          var G__100787 = 0;
          var G__100788 = 0;
          seq__100758_100764 = G__100785;
          chunk__100759_100765 = G__100786;
          count__100760_100766 = G__100787;
          i__100761_100767 = G__100788;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.has_class_QMARK_ = function has_class_QMARK_(content, class$) {
  return goog.dom.classes.has(domina.single_node.call(null, content), class$);
};
domina.add_class_BANG_ = function add_class_BANG_(content, class$) {
  var seq__100793_100797 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__100794_100798 = null;
  var count__100795_100799 = 0;
  var i__100796_100800 = 0;
  while (true) {
    if (i__100796_100800 < count__100795_100799) {
      var node_100801 = cljs.core._nth.call(null, chunk__100794_100798, i__100796_100800);
      goog.dom.classes.add(node_100801, class$);
      var G__100802 = seq__100793_100797;
      var G__100803 = chunk__100794_100798;
      var G__100804 = count__100795_100799;
      var G__100805 = i__100796_100800 + 1;
      seq__100793_100797 = G__100802;
      chunk__100794_100798 = G__100803;
      count__100795_100799 = G__100804;
      i__100796_100800 = G__100805;
      continue;
    } else {
      var temp__4126__auto___100806 = cljs.core.seq.call(null, seq__100793_100797);
      if (temp__4126__auto___100806) {
        var seq__100793_100807__$1 = temp__4126__auto___100806;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__100793_100807__$1)) {
          var c__4768__auto___100808 = cljs.core.chunk_first.call(null, seq__100793_100807__$1);
          var G__100809 = cljs.core.chunk_rest.call(null, seq__100793_100807__$1);
          var G__100810 = c__4768__auto___100808;
          var G__100811 = cljs.core.count.call(null, c__4768__auto___100808);
          var G__100812 = 0;
          seq__100793_100797 = G__100809;
          chunk__100794_100798 = G__100810;
          count__100795_100799 = G__100811;
          i__100796_100800 = G__100812;
          continue;
        } else {
          var node_100813 = cljs.core.first.call(null, seq__100793_100807__$1);
          goog.dom.classes.add(node_100813, class$);
          var G__100814 = cljs.core.next.call(null, seq__100793_100807__$1);
          var G__100815 = null;
          var G__100816 = 0;
          var G__100817 = 0;
          seq__100793_100797 = G__100814;
          chunk__100794_100798 = G__100815;
          count__100795_100799 = G__100816;
          i__100796_100800 = G__100817;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.remove_class_BANG_ = function remove_class_BANG_(content, class$) {
  var seq__100822_100826 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__100823_100827 = null;
  var count__100824_100828 = 0;
  var i__100825_100829 = 0;
  while (true) {
    if (i__100825_100829 < count__100824_100828) {
      var node_100830 = cljs.core._nth.call(null, chunk__100823_100827, i__100825_100829);
      goog.dom.classes.remove(node_100830, class$);
      var G__100831 = seq__100822_100826;
      var G__100832 = chunk__100823_100827;
      var G__100833 = count__100824_100828;
      var G__100834 = i__100825_100829 + 1;
      seq__100822_100826 = G__100831;
      chunk__100823_100827 = G__100832;
      count__100824_100828 = G__100833;
      i__100825_100829 = G__100834;
      continue;
    } else {
      var temp__4126__auto___100835 = cljs.core.seq.call(null, seq__100822_100826);
      if (temp__4126__auto___100835) {
        var seq__100822_100836__$1 = temp__4126__auto___100835;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__100822_100836__$1)) {
          var c__4768__auto___100837 = cljs.core.chunk_first.call(null, seq__100822_100836__$1);
          var G__100838 = cljs.core.chunk_rest.call(null, seq__100822_100836__$1);
          var G__100839 = c__4768__auto___100837;
          var G__100840 = cljs.core.count.call(null, c__4768__auto___100837);
          var G__100841 = 0;
          seq__100822_100826 = G__100838;
          chunk__100823_100827 = G__100839;
          count__100824_100828 = G__100840;
          i__100825_100829 = G__100841;
          continue;
        } else {
          var node_100842 = cljs.core.first.call(null, seq__100822_100836__$1);
          goog.dom.classes.remove(node_100842, class$);
          var G__100843 = cljs.core.next.call(null, seq__100822_100836__$1);
          var G__100844 = null;
          var G__100845 = 0;
          var G__100846 = 0;
          seq__100822_100826 = G__100843;
          chunk__100823_100827 = G__100844;
          count__100824_100828 = G__100845;
          i__100825_100829 = G__100846;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.toggle_class_BANG_ = function toggle_class_BANG_(content, class$) {
  var seq__100851_100855 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__100852_100856 = null;
  var count__100853_100857 = 0;
  var i__100854_100858 = 0;
  while (true) {
    if (i__100854_100858 < count__100853_100857) {
      var node_100859 = cljs.core._nth.call(null, chunk__100852_100856, i__100854_100858);
      goog.dom.classes.toggle(node_100859, class$);
      var G__100860 = seq__100851_100855;
      var G__100861 = chunk__100852_100856;
      var G__100862 = count__100853_100857;
      var G__100863 = i__100854_100858 + 1;
      seq__100851_100855 = G__100860;
      chunk__100852_100856 = G__100861;
      count__100853_100857 = G__100862;
      i__100854_100858 = G__100863;
      continue;
    } else {
      var temp__4126__auto___100864 = cljs.core.seq.call(null, seq__100851_100855);
      if (temp__4126__auto___100864) {
        var seq__100851_100865__$1 = temp__4126__auto___100864;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__100851_100865__$1)) {
          var c__4768__auto___100866 = cljs.core.chunk_first.call(null, seq__100851_100865__$1);
          var G__100867 = cljs.core.chunk_rest.call(null, seq__100851_100865__$1);
          var G__100868 = c__4768__auto___100866;
          var G__100869 = cljs.core.count.call(null, c__4768__auto___100866);
          var G__100870 = 0;
          seq__100851_100855 = G__100867;
          chunk__100852_100856 = G__100868;
          count__100853_100857 = G__100869;
          i__100854_100858 = G__100870;
          continue;
        } else {
          var node_100871 = cljs.core.first.call(null, seq__100851_100865__$1);
          goog.dom.classes.toggle(node_100871, class$);
          var G__100872 = cljs.core.next.call(null, seq__100851_100865__$1);
          var G__100873 = null;
          var G__100874 = 0;
          var G__100875 = 0;
          seq__100851_100855 = G__100872;
          chunk__100852_100856 = G__100873;
          count__100853_100857 = G__100874;
          i__100854_100858 = G__100875;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.classes = function classes(content) {
  return cljs.core.seq.call(null, goog.dom.classes.get(domina.single_node.call(null, content)));
};
domina.set_classes_BANG_ = function set_classes_BANG_(content, classes) {
  var classes_100884__$1 = cljs.core.coll_QMARK_.call(null, classes) ? clojure.string.join.call(null, " ", classes) : classes;
  var seq__100880_100885 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__100881_100886 = null;
  var count__100882_100887 = 0;
  var i__100883_100888 = 0;
  while (true) {
    if (i__100883_100888 < count__100882_100887) {
      var node_100889 = cljs.core._nth.call(null, chunk__100881_100886, i__100883_100888);
      goog.dom.classes.set(node_100889, classes_100884__$1);
      var G__100890 = seq__100880_100885;
      var G__100891 = chunk__100881_100886;
      var G__100892 = count__100882_100887;
      var G__100893 = i__100883_100888 + 1;
      seq__100880_100885 = G__100890;
      chunk__100881_100886 = G__100891;
      count__100882_100887 = G__100892;
      i__100883_100888 = G__100893;
      continue;
    } else {
      var temp__4126__auto___100894 = cljs.core.seq.call(null, seq__100880_100885);
      if (temp__4126__auto___100894) {
        var seq__100880_100895__$1 = temp__4126__auto___100894;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__100880_100895__$1)) {
          var c__4768__auto___100896 = cljs.core.chunk_first.call(null, seq__100880_100895__$1);
          var G__100897 = cljs.core.chunk_rest.call(null, seq__100880_100895__$1);
          var G__100898 = c__4768__auto___100896;
          var G__100899 = cljs.core.count.call(null, c__4768__auto___100896);
          var G__100900 = 0;
          seq__100880_100885 = G__100897;
          chunk__100881_100886 = G__100898;
          count__100882_100887 = G__100899;
          i__100883_100888 = G__100900;
          continue;
        } else {
          var node_100901 = cljs.core.first.call(null, seq__100880_100895__$1);
          goog.dom.classes.set(node_100901, classes_100884__$1);
          var G__100902 = cljs.core.next.call(null, seq__100880_100895__$1);
          var G__100903 = null;
          var G__100904 = 0;
          var G__100905 = 0;
          seq__100880_100885 = G__100902;
          chunk__100881_100886 = G__100903;
          count__100882_100887 = G__100904;
          i__100883_100888 = G__100905;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.text = function text(content) {
  return goog.string.trim(goog.dom.getTextContent(domina.single_node.call(null, content)));
};
domina.set_text_BANG_ = function set_text_BANG_(content, value) {
  var seq__100910_100914 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__100911_100915 = null;
  var count__100912_100916 = 0;
  var i__100913_100917 = 0;
  while (true) {
    if (i__100913_100917 < count__100912_100916) {
      var node_100918 = cljs.core._nth.call(null, chunk__100911_100915, i__100913_100917);
      goog.dom.setTextContent(node_100918, value);
      var G__100919 = seq__100910_100914;
      var G__100920 = chunk__100911_100915;
      var G__100921 = count__100912_100916;
      var G__100922 = i__100913_100917 + 1;
      seq__100910_100914 = G__100919;
      chunk__100911_100915 = G__100920;
      count__100912_100916 = G__100921;
      i__100913_100917 = G__100922;
      continue;
    } else {
      var temp__4126__auto___100923 = cljs.core.seq.call(null, seq__100910_100914);
      if (temp__4126__auto___100923) {
        var seq__100910_100924__$1 = temp__4126__auto___100923;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__100910_100924__$1)) {
          var c__4768__auto___100925 = cljs.core.chunk_first.call(null, seq__100910_100924__$1);
          var G__100926 = cljs.core.chunk_rest.call(null, seq__100910_100924__$1);
          var G__100927 = c__4768__auto___100925;
          var G__100928 = cljs.core.count.call(null, c__4768__auto___100925);
          var G__100929 = 0;
          seq__100910_100914 = G__100926;
          chunk__100911_100915 = G__100927;
          count__100912_100916 = G__100928;
          i__100913_100917 = G__100929;
          continue;
        } else {
          var node_100930 = cljs.core.first.call(null, seq__100910_100924__$1);
          goog.dom.setTextContent(node_100930, value);
          var G__100931 = cljs.core.next.call(null, seq__100910_100924__$1);
          var G__100932 = null;
          var G__100933 = 0;
          var G__100934 = 0;
          seq__100910_100914 = G__100931;
          chunk__100911_100915 = G__100932;
          count__100912_100916 = G__100933;
          i__100913_100917 = G__100934;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.value = function value(content) {
  return goog.dom.forms.getValue(domina.single_node.call(null, content));
};
domina.set_value_BANG_ = function set_value_BANG_(content, value) {
  var seq__100939_100943 = cljs.core.seq.call(null, domina.nodes.call(null, content));
  var chunk__100940_100944 = null;
  var count__100941_100945 = 0;
  var i__100942_100946 = 0;
  while (true) {
    if (i__100942_100946 < count__100941_100945) {
      var node_100947 = cljs.core._nth.call(null, chunk__100940_100944, i__100942_100946);
      goog.dom.forms.setValue(node_100947, value);
      var G__100948 = seq__100939_100943;
      var G__100949 = chunk__100940_100944;
      var G__100950 = count__100941_100945;
      var G__100951 = i__100942_100946 + 1;
      seq__100939_100943 = G__100948;
      chunk__100940_100944 = G__100949;
      count__100941_100945 = G__100950;
      i__100942_100946 = G__100951;
      continue;
    } else {
      var temp__4126__auto___100952 = cljs.core.seq.call(null, seq__100939_100943);
      if (temp__4126__auto___100952) {
        var seq__100939_100953__$1 = temp__4126__auto___100952;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__100939_100953__$1)) {
          var c__4768__auto___100954 = cljs.core.chunk_first.call(null, seq__100939_100953__$1);
          var G__100955 = cljs.core.chunk_rest.call(null, seq__100939_100953__$1);
          var G__100956 = c__4768__auto___100954;
          var G__100957 = cljs.core.count.call(null, c__4768__auto___100954);
          var G__100958 = 0;
          seq__100939_100943 = G__100955;
          chunk__100940_100944 = G__100956;
          count__100941_100945 = G__100957;
          i__100942_100946 = G__100958;
          continue;
        } else {
          var node_100959 = cljs.core.first.call(null, seq__100939_100953__$1);
          goog.dom.forms.setValue(node_100959, value);
          var G__100960 = cljs.core.next.call(null, seq__100939_100953__$1);
          var G__100961 = null;
          var G__100962 = 0;
          var G__100963 = 0;
          seq__100939_100943 = G__100960;
          chunk__100940_100944 = G__100961;
          count__100941_100945 = G__100962;
          i__100942_100946 = G__100963;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return content;
};
domina.html = function html(content) {
  return domina.single_node.call(null, content).innerHTML;
};
domina.replace_children_BANG_ = function replace_children_BANG_(content, inner_content) {
  return domina.append_BANG_.call(null, domina.destroy_children_BANG_.call(null, content), inner_content);
};
domina.set_inner_html_BANG_ = function set_inner_html_BANG_(content, html_string) {
  var allows_inner_html_QMARK_ = cljs.core.not.call(null, cljs.core.re_find.call(null, domina.re_no_inner_html, html_string));
  var leading_whitespace_QMARK_ = cljs.core.re_find.call(null, domina.re_leading_whitespace, html_string);
  var tag_name = [cljs.core.str(cljs.core.second.call(null, cljs.core.re_find.call(null, domina.re_tag_name, html_string)))].join("").toLowerCase();
  var special_tag_QMARK_ = cljs.core.contains_QMARK_.call(null, domina.wrap_map, tag_name);
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = allows_inner_html_QMARK_;
    if (and__3969__auto__) {
      var and__3969__auto____$1 = function() {
        var or__3981__auto__ = domina.support.leading_whitespace_QMARK_;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return cljs.core.not.call(null, leading_whitespace_QMARK_);
        }
      }();
      if (cljs.core.truth_(and__3969__auto____$1)) {
        return!special_tag_QMARK_;
      } else {
        return and__3969__auto____$1;
      }
    } else {
      return and__3969__auto__;
    }
  }())) {
    var value_100974 = clojure.string.replace.call(null, html_string, domina.re_xhtml_tag, "\x3c$1\x3e\x3c/$2\x3e");
    try {
      var seq__100970_100975 = cljs.core.seq.call(null, domina.nodes.call(null, content));
      var chunk__100971_100976 = null;
      var count__100972_100977 = 0;
      var i__100973_100978 = 0;
      while (true) {
        if (i__100973_100978 < count__100972_100977) {
          var node_100979 = cljs.core._nth.call(null, chunk__100971_100976, i__100973_100978);
          node_100979.innerHTML = value_100974;
          var G__100980 = seq__100970_100975;
          var G__100981 = chunk__100971_100976;
          var G__100982 = count__100972_100977;
          var G__100983 = i__100973_100978 + 1;
          seq__100970_100975 = G__100980;
          chunk__100971_100976 = G__100981;
          count__100972_100977 = G__100982;
          i__100973_100978 = G__100983;
          continue;
        } else {
          var temp__4126__auto___100984 = cljs.core.seq.call(null, seq__100970_100975);
          if (temp__4126__auto___100984) {
            var seq__100970_100985__$1 = temp__4126__auto___100984;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__100970_100985__$1)) {
              var c__4768__auto___100986 = cljs.core.chunk_first.call(null, seq__100970_100985__$1);
              var G__100987 = cljs.core.chunk_rest.call(null, seq__100970_100985__$1);
              var G__100988 = c__4768__auto___100986;
              var G__100989 = cljs.core.count.call(null, c__4768__auto___100986);
              var G__100990 = 0;
              seq__100970_100975 = G__100987;
              chunk__100971_100976 = G__100988;
              count__100972_100977 = G__100989;
              i__100973_100978 = G__100990;
              continue;
            } else {
              var node_100991 = cljs.core.first.call(null, seq__100970_100985__$1);
              node_100991.innerHTML = value_100974;
              var G__100992 = cljs.core.next.call(null, seq__100970_100985__$1);
              var G__100993 = null;
              var G__100994 = 0;
              var G__100995 = 0;
              seq__100970_100975 = G__100992;
              chunk__100971_100976 = G__100993;
              count__100972_100977 = G__100994;
              i__100973_100978 = G__100995;
              continue;
            }
          } else {
          }
        }
        break;
      }
    } catch (e100969) {
      if (e100969 instanceof Error) {
        var e_100996 = e100969;
        domina.replace_children_BANG_.call(null, content, value_100974);
      } else {
        throw e100969;
      }
    }
  } else {
    domina.replace_children_BANG_.call(null, content, html_string);
  }
  return content;
};
domina.set_html_BANG_ = function set_html_BANG_(content, inner_content) {
  if (typeof inner_content === "string") {
    return domina.set_inner_html_BANG_.call(null, content, inner_content);
  } else {
    return domina.replace_children_BANG_.call(null, content, inner_content);
  }
};
domina.get_data = function() {
  var get_data = null;
  var get_data__2 = function(node, key) {
    return get_data.call(null, node, key, false);
  };
  var get_data__3 = function(node, key, bubble) {
    var m = domina.single_node.call(null, node).__domina_data;
    var value = cljs.core.truth_(m) ? cljs.core.get.call(null, m, key) : null;
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = bubble;
      if (cljs.core.truth_(and__3969__auto__)) {
        return value == null;
      } else {
        return and__3969__auto__;
      }
    }())) {
      var temp__4126__auto__ = domina.single_node.call(null, node).parentNode;
      if (cljs.core.truth_(temp__4126__auto__)) {
        var parent = temp__4126__auto__;
        return get_data.call(null, parent, key, true);
      } else {
        return null;
      }
    } else {
      return value;
    }
  };
  get_data = function(node, key, bubble) {
    switch(arguments.length) {
      case 2:
        return get_data__2.call(this, node, key);
      case 3:
        return get_data__3.call(this, node, key, bubble);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_data.cljs$core$IFn$_invoke$arity$2 = get_data__2;
  get_data.cljs$core$IFn$_invoke$arity$3 = get_data__3;
  return get_data;
}();
domina.set_data_BANG_ = function set_data_BANG_(node, key, value) {
  var m = function() {
    var or__3981__auto__ = domina.single_node.call(null, node).__domina_data;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  return domina.single_node.call(null, node).__domina_data = cljs.core.assoc.call(null, m, key, value);
};
domina.apply_with_cloning = function apply_with_cloning(f, parent_content, child_content) {
  var parents = domina.nodes.call(null, parent_content);
  var children = domina.nodes.call(null, child_content);
  var first_child = function() {
    var frag = document.createDocumentFragment();
    var seq__101003_101007 = cljs.core.seq.call(null, children);
    var chunk__101004_101008 = null;
    var count__101005_101009 = 0;
    var i__101006_101010 = 0;
    while (true) {
      if (i__101006_101010 < count__101005_101009) {
        var child_101011 = cljs.core._nth.call(null, chunk__101004_101008, i__101006_101010);
        frag.appendChild(child_101011);
        var G__101012 = seq__101003_101007;
        var G__101013 = chunk__101004_101008;
        var G__101014 = count__101005_101009;
        var G__101015 = i__101006_101010 + 1;
        seq__101003_101007 = G__101012;
        chunk__101004_101008 = G__101013;
        count__101005_101009 = G__101014;
        i__101006_101010 = G__101015;
        continue;
      } else {
        var temp__4126__auto___101016 = cljs.core.seq.call(null, seq__101003_101007);
        if (temp__4126__auto___101016) {
          var seq__101003_101017__$1 = temp__4126__auto___101016;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__101003_101017__$1)) {
            var c__4768__auto___101018 = cljs.core.chunk_first.call(null, seq__101003_101017__$1);
            var G__101019 = cljs.core.chunk_rest.call(null, seq__101003_101017__$1);
            var G__101020 = c__4768__auto___101018;
            var G__101021 = cljs.core.count.call(null, c__4768__auto___101018);
            var G__101022 = 0;
            seq__101003_101007 = G__101019;
            chunk__101004_101008 = G__101020;
            count__101005_101009 = G__101021;
            i__101006_101010 = G__101022;
            continue;
          } else {
            var child_101023 = cljs.core.first.call(null, seq__101003_101017__$1);
            frag.appendChild(child_101023);
            var G__101024 = cljs.core.next.call(null, seq__101003_101017__$1);
            var G__101025 = null;
            var G__101026 = 0;
            var G__101027 = 0;
            seq__101003_101007 = G__101024;
            chunk__101004_101008 = G__101025;
            count__101005_101009 = G__101026;
            i__101006_101010 = G__101027;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return frag;
  }();
  var other_children = cljs.core.doall.call(null, cljs.core.repeatedly.call(null, cljs.core.count.call(null, parents) - 1, function(parents, children, first_child) {
    return function() {
      return first_child.cloneNode(true);
    };
  }(parents, children, first_child)));
  if (cljs.core.seq.call(null, parents)) {
    f.call(null, cljs.core.first.call(null, parents), first_child);
    return cljs.core.doall.call(null, cljs.core.map.call(null, function(parents, children, first_child, other_children) {
      return function(p1__100997_SHARP_, p2__100998_SHARP_) {
        return f.call(null, p1__100997_SHARP_, p2__100998_SHARP_);
      };
    }(parents, children, first_child, other_children), cljs.core.rest.call(null, parents), other_children));
  } else {
    return null;
  }
};
domina.lazy_nl_via_item = function() {
  var lazy_nl_via_item = null;
  var lazy_nl_via_item__1 = function(nl) {
    return lazy_nl_via_item.call(null, nl, 0);
  };
  var lazy_nl_via_item__2 = function(nl, n) {
    if (n < nl.length) {
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, nl.item(n), lazy_nl_via_item.call(null, nl, n + 1));
      }, null, null);
    } else {
      return null;
    }
  };
  lazy_nl_via_item = function(nl, n) {
    switch(arguments.length) {
      case 1:
        return lazy_nl_via_item__1.call(this, nl);
      case 2:
        return lazy_nl_via_item__2.call(this, nl, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_nl_via_item.cljs$core$IFn$_invoke$arity$1 = lazy_nl_via_item__1;
  lazy_nl_via_item.cljs$core$IFn$_invoke$arity$2 = lazy_nl_via_item__2;
  return lazy_nl_via_item;
}();
domina.lazy_nl_via_array_ref = function() {
  var lazy_nl_via_array_ref = null;
  var lazy_nl_via_array_ref__1 = function(nl) {
    return lazy_nl_via_array_ref.call(null, nl, 0);
  };
  var lazy_nl_via_array_ref__2 = function(nl, n) {
    if (n < nl.length) {
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, nl[n], lazy_nl_via_array_ref.call(null, nl, n + 1));
      }, null, null);
    } else {
      return null;
    }
  };
  lazy_nl_via_array_ref = function(nl, n) {
    switch(arguments.length) {
      case 1:
        return lazy_nl_via_array_ref__1.call(this, nl);
      case 2:
        return lazy_nl_via_array_ref__2.call(this, nl, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$1 = lazy_nl_via_array_ref__1;
  lazy_nl_via_array_ref.cljs$core$IFn$_invoke$arity$2 = lazy_nl_via_array_ref__2;
  return lazy_nl_via_array_ref;
}();
domina.lazy_nodelist = function lazy_nodelist(nl) {
  if (cljs.core.truth_(nl.item)) {
    return domina.lazy_nl_via_item.call(null, nl);
  } else {
    return domina.lazy_nl_via_array_ref.call(null, nl);
  }
};
domina.array_like_QMARK_ = function array_like_QMARK_(obj) {
  var and__3969__auto__ = obj;
  if (cljs.core.truth_(and__3969__auto__)) {
    var and__3969__auto____$1 = cljs.core.not.call(null, obj.nodeName);
    if (and__3969__auto____$1) {
      return obj.length;
    } else {
      return and__3969__auto____$1;
    }
  } else {
    return and__3969__auto__;
  }
};
domina.normalize_seq = function normalize_seq(list_thing) {
  if (list_thing == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (function() {
      var G__101029 = list_thing;
      if (G__101029) {
        var bit__4662__auto__ = G__101029.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4662__auto__ || G__101029.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__101029.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__101029);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__101029);
      }
    }()) {
      return cljs.core.seq.call(null, list_thing);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, list_thing))) {
        return domina.lazy_nodelist.call(null, list_thing);
      } else {
        return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [list_thing], null));
      }
    }
  }
};
domina.DomContent["_"] = true;
domina.nodes["_"] = function(content) {
  if (content == null) {
    return cljs.core.List.EMPTY;
  } else {
    if (function() {
      var G__101030 = content;
      if (G__101030) {
        var bit__4662__auto__ = G__101030.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4662__auto__ || G__101030.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__101030.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__101030);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__101030);
      }
    }()) {
      return cljs.core.seq.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return domina.lazy_nodelist.call(null, content);
      } else {
        return cljs.core.seq.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [content], null));
      }
    }
  }
};
domina.single_node["_"] = function(content) {
  if (content == null) {
    return null;
  } else {
    if (function() {
      var G__101031 = content;
      if (G__101031) {
        var bit__4662__auto__ = G__101031.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4662__auto__ || G__101031.cljs$core$ISeqable$) {
          return true;
        } else {
          if (!G__101031.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__101031);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__101031);
      }
    }()) {
      return cljs.core.first.call(null, content);
    } else {
      if (cljs.core.truth_(domina.array_like_QMARK_.call(null, content))) {
        return content.item(0);
      } else {
        return content;
      }
    }
  }
};
domina.DomContent["string"] = true;
domina.nodes["string"] = function(s) {
  return cljs.core.doall.call(null, domina.nodes.call(null, domina.string_to_dom.call(null, s)));
};
domina.single_node["string"] = function(s) {
  return domina.single_node.call(null, domina.string_to_dom.call(null, s));
};
if (cljs.core.truth_(typeof NodeList != "undefined")) {
  NodeList.prototype.cljs$core$ISeqable$ = true;
  NodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
  NodeList.prototype.cljs$core$IIndexed$ = true;
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  NodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  NodeList.prototype.cljs$core$ICounted$ = true;
  NodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
} else {
}
if (cljs.core.truth_(typeof StaticNodeList != "undefined")) {
  StaticNodeList.prototype.cljs$core$ISeqable$ = true;
  StaticNodeList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return domina.lazy_nodelist.call(null, nodelist__$1);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$ = true;
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$2 = function(nodelist, n) {
    var nodelist__$1 = this;
    return nodelist__$1.item(n);
  };
  StaticNodeList.prototype.cljs$core$IIndexed$_nth$arity$3 = function(nodelist, n, not_found) {
    var nodelist__$1 = this;
    if (nodelist__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, nodelist__$1, n);
    }
  };
  StaticNodeList.prototype.cljs$core$ICounted$ = true;
  StaticNodeList.prototype.cljs$core$ICounted$_count$arity$1 = function(nodelist) {
    var nodelist__$1 = this;
    return nodelist__$1.length;
  };
} else {
}
if (cljs.core.truth_(typeof HTMLCollection != "undefined")) {
  HTMLCollection.prototype.cljs$core$ISeqable$ = true;
  HTMLCollection.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
    var coll__$1 = this;
    return domina.lazy_nodelist.call(null, coll__$1);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$ = true;
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
    var coll__$1 = this;
    return coll__$1.item(n);
  };
  HTMLCollection.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
    var coll__$1 = this;
    if (coll__$1.length <= n) {
      return not_found;
    } else {
      return cljs.core.nth.call(null, coll__$1, n);
    }
  };
  HTMLCollection.prototype.cljs$core$ICounted$ = true;
  HTMLCollection.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
    var coll__$1 = this;
    return coll__$1.length;
  };
} else {
}
;/*
 Portions of this code are from the Dojo Toolkit, received by
 The Closure Library Authors under the BSD license. All other code is
 Copyright 2005-2009 The Closure Library Authors. All Rights Reserved.

The "New" BSD License:

Copyright (c) 2005-2009, The Dojo Foundation
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
 Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
 Neither the name of the Dojo Foundation nor the names of its contributors
    may be used to endorse or promote products derived from this software
    without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
goog.provide("goog.dom.query");
goog.require("goog.array");
goog.require("goog.dom");
goog.require("goog.functions");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.dom.query = function() {
  var cssCaseBug = goog.userAgent.WEBKIT && goog.dom.getDocument().compatMode == "BackCompat";
  var childNodesName = !!goog.dom.getDocument().firstChild["children"] ? "children" : "childNodes";
  var specials = "\x3e~+";
  var caseSensitive = false;
  var getQueryParts = function(query) {
    if (specials.indexOf(query.slice(-1)) >= 0) {
      query += " * ";
    } else {
      query += " ";
    }
    var ts = function(s, e) {
      return goog.string.trim(query.slice(s, e));
    };
    var queryParts = [];
    var inBrackets = -1, inParens = -1, inMatchFor = -1, inPseudo = -1, inClass = -1, inId = -1, inTag = -1, lc = "", cc = "", pStart;
    var x = 0, ql = query.length, currentPart = null, cp = null;
    var endTag = function() {
      if (inTag >= 0) {
        var tv = inTag == x ? null : ts(inTag, x);
        if (specials.indexOf(tv) < 0) {
          currentPart.tag = tv;
        } else {
          currentPart.oper = tv;
        }
        inTag = -1;
      }
    };
    var endId = function() {
      if (inId >= 0) {
        currentPart.id = ts(inId, x).replace(/\\/g, "");
        inId = -1;
      }
    };
    var endClass = function() {
      if (inClass >= 0) {
        currentPart.classes.push(ts(inClass + 1, x).replace(/\\/g, ""));
        inClass = -1;
      }
    };
    var endAll = function() {
      endId();
      endTag();
      endClass();
    };
    var endPart = function() {
      endAll();
      if (inPseudo >= 0) {
        currentPart.pseudos.push({name:ts(inPseudo + 1, x)});
      }
      currentPart.loops = currentPart.pseudos.length || currentPart.attrs.length || currentPart.classes.length;
      currentPart.oquery = currentPart.query = ts(pStart, x);
      currentPart.otag = currentPart.tag = currentPart.oper ? null : currentPart.tag || "*";
      if (currentPart.tag) {
        currentPart.tag = currentPart.tag.toUpperCase();
      }
      if (queryParts.length && queryParts[queryParts.length - 1].oper) {
        currentPart.infixOper = queryParts.pop();
        currentPart.query = currentPart.infixOper.query + " " + currentPart.query;
      }
      queryParts.push(currentPart);
      currentPart = null;
    };
    for (;lc = cc, cc = query.charAt(x), x < ql;x++) {
      if (lc == "\\") {
        continue;
      }
      if (!currentPart) {
        pStart = x;
        currentPart = {query:null, pseudos:[], attrs:[], classes:[], tag:null, oper:null, id:null, getTag:function() {
          return caseSensitive ? this.otag : this.tag;
        }};
        inTag = x;
      }
      if (inBrackets >= 0) {
        if (cc == "]") {
          if (!cp.attr) {
            cp.attr = ts(inBrackets + 1, x);
          } else {
            cp.matchFor = ts(inMatchFor || inBrackets + 1, x);
          }
          var cmf = cp.matchFor;
          if (cmf) {
            if (cmf.charAt(0) == '"' || cmf.charAt(0) == "'") {
              cp.matchFor = cmf.slice(1, -1);
            }
          }
          currentPart.attrs.push(cp);
          cp = null;
          inBrackets = inMatchFor = -1;
        } else {
          if (cc == "\x3d") {
            var addToCc = "|~^$*".indexOf(lc) >= 0 ? lc : "";
            cp.type = addToCc + cc;
            cp.attr = ts(inBrackets + 1, x - addToCc.length);
            inMatchFor = x + 1;
          }
        }
      } else {
        if (inParens >= 0) {
          if (cc == ")") {
            if (inPseudo >= 0) {
              cp.value = ts(inParens + 1, x);
            }
            inPseudo = inParens = -1;
          }
        } else {
          if (cc == "#") {
            endAll();
            inId = x + 1;
          } else {
            if (cc == ".") {
              endAll();
              inClass = x;
            } else {
              if (cc == ":") {
                endAll();
                inPseudo = x;
              } else {
                if (cc == "[") {
                  endAll();
                  inBrackets = x;
                  cp = {};
                } else {
                  if (cc == "(") {
                    if (inPseudo >= 0) {
                      cp = {name:ts(inPseudo + 1, x), value:null};
                      currentPart.pseudos.push(cp);
                    }
                    inParens = x;
                  } else {
                    if (cc == " " && lc != cc) {
                      endPart();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return queryParts;
  };
  var agree = function(first, second) {
    if (!first) {
      return second;
    }
    if (!second) {
      return first;
    }
    return function() {
      return first.apply(window, arguments) && second.apply(window, arguments);
    };
  };
  function getArr(i, opt_arr) {
    var r = opt_arr || [];
    if (i) {
      r.push(i);
    }
    return r;
  }
  var isElement = function(n) {
    return 1 == n.nodeType;
  };
  var blank = "";
  var getAttr = function(elem, attr) {
    if (!elem) {
      return blank;
    }
    if (attr == "class") {
      return elem.className || blank;
    }
    if (attr == "for") {
      return elem.htmlFor || blank;
    }
    if (attr == "style") {
      return elem.style.cssText || blank;
    }
    return(caseSensitive ? elem.getAttribute(attr) : elem.getAttribute(attr, 2)) || blank;
  };
  var attrs = {"*\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr).indexOf(value) >= 0;
    };
  }, "^\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr).indexOf(value) == 0;
    };
  }, "$\x3d":function(attr, value) {
    var tval = " " + value;
    return function(elem) {
      var ea = " " + getAttr(elem, attr);
      return ea.lastIndexOf(value) == ea.length - value.length;
    };
  }, "~\x3d":function(attr, value) {
    var tval = " " + value + " ";
    return function(elem) {
      var ea = " " + getAttr(elem, attr) + " ";
      return ea.indexOf(tval) >= 0;
    };
  }, "|\x3d":function(attr, value) {
    value = " " + value;
    return function(elem) {
      var ea = " " + getAttr(elem, attr);
      return ea == value || ea.indexOf(value + "-") == 0;
    };
  }, "\x3d":function(attr, value) {
    return function(elem) {
      return getAttr(elem, attr) == value;
    };
  }};
  var noNextElementSibling = typeof goog.dom.getDocument().firstChild.nextElementSibling == "undefined";
  var nSibling = !noNextElementSibling ? "nextElementSibling" : "nextSibling";
  var pSibling = !noNextElementSibling ? "previousElementSibling" : "previousSibling";
  var simpleNodeTest = noNextElementSibling ? isElement : goog.functions.TRUE;
  var _lookLeft = function(node) {
    while (node = node[pSibling]) {
      if (simpleNodeTest(node)) {
        return false;
      }
    }
    return true;
  };
  var _lookRight = function(node) {
    while (node = node[nSibling]) {
      if (simpleNodeTest(node)) {
        return false;
      }
    }
    return true;
  };
  var getNodeIndex = function(node) {
    var root = node.parentNode;
    var i = 0, tret = root[childNodesName], ci = node["_i"] || -1, cl = root["_l"] || -1;
    if (!tret) {
      return-1;
    }
    var l = tret.length;
    if (cl == l && ci >= 0 && cl >= 0) {
      return ci;
    }
    root["_l"] = l;
    ci = -1;
    var te = root["firstElementChild"] || root["firstChild"];
    for (;te;te = te[nSibling]) {
      if (simpleNodeTest(te)) {
        te["_i"] = ++i;
        if (node === te) {
          ci = i;
        }
      }
    }
    return ci;
  };
  var isEven = function(elem) {
    return!(getNodeIndex(elem) % 2);
  };
  var isOdd = function(elem) {
    return getNodeIndex(elem) % 2;
  };
  var pseudos = {"checked":function(name, condition) {
    return function(elem) {
      return elem.checked || elem.attributes["checked"];
    };
  }, "first-child":function() {
    return _lookLeft;
  }, "last-child":function() {
    return _lookRight;
  }, "only-child":function(name, condition) {
    return function(node) {
      if (!_lookLeft(node)) {
        return false;
      }
      if (!_lookRight(node)) {
        return false;
      }
      return true;
    };
  }, "empty":function(name, condition) {
    return function(elem) {
      var cn = elem.childNodes;
      var cnl = elem.childNodes.length;
      for (var x = cnl - 1;x >= 0;x--) {
        var nt = cn[x].nodeType;
        if (nt === 1 || nt == 3) {
          return false;
        }
      }
      return true;
    };
  }, "contains":function(name, condition) {
    var cz = condition.charAt(0);
    if (cz == '"' || cz == "'") {
      condition = condition.slice(1, -1);
    }
    return function(elem) {
      return elem.innerHTML.indexOf(condition) >= 0;
    };
  }, "not":function(name, condition) {
    var p = getQueryParts(condition)[0];
    var ignores = {el:1};
    if (p.tag != "*") {
      ignores.tag = 1;
    }
    if (!p.classes.length) {
      ignores.classes = 1;
    }
    var ntf = getSimpleFilterFunc(p, ignores);
    return function(elem) {
      return!ntf(elem);
    };
  }, "nth-child":function(name, condition) {
    function pi(n) {
      return parseInt(n, 10);
    }
    if (condition == "odd") {
      return isOdd;
    } else {
      if (condition == "even") {
        return isEven;
      }
    }
    if (condition.indexOf("n") != -1) {
      var tparts = condition.split("n", 2);
      var pred = tparts[0] ? tparts[0] == "-" ? -1 : pi(tparts[0]) : 1;
      var idx = tparts[1] ? pi(tparts[1]) : 0;
      var lb = 0, ub = -1;
      if (pred > 0) {
        if (idx < 0) {
          idx = idx % pred && pred + idx % pred;
        } else {
          if (idx > 0) {
            if (idx >= pred) {
              lb = idx - idx % pred;
            }
            idx = idx % pred;
          }
        }
      } else {
        if (pred < 0) {
          pred *= -1;
          if (idx > 0) {
            ub = idx;
            idx = idx % pred;
          }
        }
      }
      if (pred > 0) {
        return function(elem) {
          var i = getNodeIndex(elem);
          return i >= lb && (ub < 0 || i <= ub) && i % pred == idx;
        };
      } else {
        condition = idx;
      }
    }
    var ncount = pi(condition);
    return function(elem) {
      return getNodeIndex(elem) == ncount;
    };
  }};
  var defaultGetter = goog.userAgent.IE ? function(cond) {
    var clc = cond.toLowerCase();
    if (clc == "class") {
      cond = "className";
    }
    return function(elem) {
      return caseSensitive ? elem.getAttribute(cond) : elem[cond] || elem[clc];
    };
  } : function(cond) {
    return function(elem) {
      return elem && elem.getAttribute && elem.hasAttribute(cond);
    };
  };
  var getSimpleFilterFunc = function(query, ignores) {
    if (!query) {
      return goog.functions.TRUE;
    }
    ignores = ignores || {};
    var ff = null;
    if (!ignores.el) {
      ff = agree(ff, isElement);
    }
    if (!ignores.tag) {
      if (query.tag != "*") {
        ff = agree(ff, function(elem) {
          return elem && elem.tagName == query.getTag();
        });
      }
    }
    if (!ignores.classes) {
      goog.array.forEach(query.classes, function(cname, idx, arr) {
        var re = new RegExp("(?:^|\\s)" + cname + "(?:\\s|$)");
        ff = agree(ff, function(elem) {
          return re.test(elem.className);
        });
        ff.count = idx;
      });
    }
    if (!ignores.pseudos) {
      goog.array.forEach(query.pseudos, function(pseudo) {
        var pn = pseudo.name;
        if (pseudos[pn]) {
          ff = agree(ff, pseudos[pn](pn, pseudo.value));
        }
      });
    }
    if (!ignores.attrs) {
      goog.array.forEach(query.attrs, function(attr) {
        var matcher;
        var a = attr.attr;
        if (attr.type && attrs[attr.type]) {
          matcher = attrs[attr.type](a, attr.matchFor);
        } else {
          if (a.length) {
            matcher = defaultGetter(a);
          }
        }
        if (matcher) {
          ff = agree(ff, matcher);
        }
      });
    }
    if (!ignores.id) {
      if (query.id) {
        ff = agree(ff, function(elem) {
          return!!elem && elem.id == query.id;
        });
      }
    }
    if (!ff) {
      if (!("default" in ignores)) {
        ff = goog.functions.TRUE;
      }
    }
    return ff;
  };
  var nextSiblingIterator = function(filterFunc) {
    return function(node, ret, bag) {
      while (node = node[nSibling]) {
        if (noNextElementSibling && !isElement(node)) {
          continue;
        }
        if ((!bag || _isUnique(node, bag)) && filterFunc(node)) {
          ret.push(node);
        }
        break;
      }
      return ret;
    };
  };
  var nextSiblingsIterator = function(filterFunc) {
    return function(root, ret, bag) {
      var te = root[nSibling];
      while (te) {
        if (simpleNodeTest(te)) {
          if (bag && !_isUnique(te, bag)) {
            break;
          }
          if (filterFunc(te)) {
            ret.push(te);
          }
        }
        te = te[nSibling];
      }
      return ret;
    };
  };
  var _childElements = function(filterFunc) {
    filterFunc = filterFunc || goog.functions.TRUE;
    return function(root, ret, bag) {
      var te, x = 0, tret = root[childNodesName];
      while (te = tret[x++]) {
        if (simpleNodeTest(te) && (!bag || _isUnique(te, bag)) && filterFunc(te, x)) {
          ret.push(te);
        }
      }
      return ret;
    };
  };
  var _isDescendant = function(node, root) {
    var pn = node.parentNode;
    while (pn) {
      if (pn == root) {
        break;
      }
      pn = pn.parentNode;
    }
    return!!pn;
  };
  var _getElementsFuncCache = {};
  var getElementsFunc = function(query) {
    var retFunc = _getElementsFuncCache[query.query];
    if (retFunc) {
      return retFunc;
    }
    var io = query.infixOper;
    var oper = io ? io.oper : "";
    var filterFunc = getSimpleFilterFunc(query, {el:1});
    var qt = query.tag;
    var wildcardTag = "*" == qt;
    var ecs = goog.dom.getDocument()["getElementsByClassName"];
    if (!oper) {
      if (query.id) {
        filterFunc = !query.loops && wildcardTag ? goog.functions.TRUE : getSimpleFilterFunc(query, {el:1, id:1});
        retFunc = function(root, arr) {
          var te = goog.dom.getDomHelper(root).getElement(query.id);
          if (!te || !filterFunc(te)) {
            return;
          }
          if (9 == root.nodeType) {
            return getArr(te, arr);
          } else {
            if (_isDescendant(te, root)) {
              return getArr(te, arr);
            }
          }
        };
      } else {
        if (ecs && /\{\s*\[native code\]\s*\}/.test(String(ecs)) && query.classes.length && !cssCaseBug) {
          filterFunc = getSimpleFilterFunc(query, {el:1, classes:1, id:1});
          var classesString = query.classes.join(" ");
          retFunc = function(root, arr) {
            var ret = getArr(0, arr), te, x = 0;
            var tret = root.getElementsByClassName(classesString);
            while (te = tret[x++]) {
              if (filterFunc(te, root)) {
                ret.push(te);
              }
            }
            return ret;
          };
        } else {
          if (!wildcardTag && !query.loops) {
            retFunc = function(root, arr) {
              var ret = getArr(0, arr), te, x = 0;
              var tret = root.getElementsByTagName(query.getTag());
              while (te = tret[x++]) {
                ret.push(te);
              }
              return ret;
            };
          } else {
            filterFunc = getSimpleFilterFunc(query, {el:1, tag:1, id:1});
            retFunc = function(root, arr) {
              var ret = getArr(0, arr), te, x = 0;
              var tret = root.getElementsByTagName(query.getTag());
              while (te = tret[x++]) {
                if (filterFunc(te, root)) {
                  ret.push(te);
                }
              }
              return ret;
            };
          }
        }
      }
    } else {
      var skipFilters = {el:1};
      if (wildcardTag) {
        skipFilters.tag = 1;
      }
      filterFunc = getSimpleFilterFunc(query, skipFilters);
      if ("+" == oper) {
        retFunc = nextSiblingIterator(filterFunc);
      } else {
        if ("~" == oper) {
          retFunc = nextSiblingsIterator(filterFunc);
        } else {
          if ("\x3e" == oper) {
            retFunc = _childElements(filterFunc);
          }
        }
      }
    }
    return _getElementsFuncCache[query.query] = retFunc;
  };
  var filterDown = function(root, queryParts) {
    var candidates = getArr(root), qp, x, te, qpl = queryParts.length, bag, ret;
    for (var i = 0;i < qpl;i++) {
      ret = [];
      qp = queryParts[i];
      x = candidates.length - 1;
      if (x > 0) {
        bag = {};
        ret.nozip = true;
      }
      var gef = getElementsFunc(qp);
      for (var j = 0;te = candidates[j];j++) {
        gef(te, ret, bag);
      }
      if (!ret.length) {
        break;
      }
      candidates = ret;
    }
    return ret;
  };
  var _queryFuncCacheDOM = {}, _queryFuncCacheQSA = {};
  var getStepQueryFunc = function(query) {
    var qparts = getQueryParts(goog.string.trim(query));
    if (qparts.length == 1) {
      var tef = getElementsFunc(qparts[0]);
      return function(root) {
        var r = tef(root, []);
        if (r) {
          r.nozip = true;
        }
        return r;
      };
    }
    return function(root) {
      return filterDown(root, qparts);
    };
  };
  var qsa = "querySelectorAll";
  var qsaAvail = !!goog.dom.getDocument()[qsa] && (!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("526"));
  var getQueryFunc = function(query, opt_forceDOM) {
    if (qsaAvail) {
      var qsaCached = _queryFuncCacheQSA[query];
      if (qsaCached && !opt_forceDOM) {
        return qsaCached;
      }
    }
    var domCached = _queryFuncCacheDOM[query];
    if (domCached) {
      return domCached;
    }
    var qcz = query.charAt(0);
    var nospace = -1 == query.indexOf(" ");
    if (query.indexOf("#") >= 0 && nospace) {
      opt_forceDOM = true;
    }
    var useQSA = qsaAvail && !opt_forceDOM && specials.indexOf(qcz) == -1 && (!goog.userAgent.IE || query.indexOf(":") == -1) && !(cssCaseBug && query.indexOf(".") >= 0) && query.indexOf(":contains") == -1 && query.indexOf("|\x3d") == -1;
    if (useQSA) {
      var tq = specials.indexOf(query.charAt(query.length - 1)) >= 0 ? query + " *" : query;
      return _queryFuncCacheQSA[query] = function(root) {
        try {
          if (!(9 == root.nodeType || nospace)) {
            throw "";
          }
          var r = root[qsa](tq);
          if (goog.userAgent.IE) {
            r.commentStrip = true;
          } else {
            r.nozip = true;
          }
          return r;
        } catch (e) {
          return getQueryFunc(query, true)(root);
        }
      };
    } else {
      var parts = query.split(/\s*,\s*/);
      return _queryFuncCacheDOM[query] = parts.length < 2 ? getStepQueryFunc(query) : function(root) {
        var pindex = 0, ret = [], tp;
        while (tp = parts[pindex++]) {
          ret = ret.concat(getStepQueryFunc(tp)(root));
        }
        return ret;
      };
    }
  };
  var _zipIdx = 0;
  var _nodeUID = goog.userAgent.IE ? function(node) {
    if (caseSensitive) {
      return node.getAttribute("_uid") || node.setAttribute("_uid", ++_zipIdx) || _zipIdx;
    } else {
      return node.uniqueID;
    }
  } : function(node) {
    return node["_uid"] || (node["_uid"] = ++_zipIdx);
  };
  var _isUnique = function(node, bag) {
    if (!bag) {
      return 1;
    }
    var id = _nodeUID(node);
    if (!bag[id]) {
      return bag[id] = 1;
    }
    return 0;
  };
  var _zipIdxName = "_zipIdx";
  var _zip = function(arr) {
    if (arr && arr.nozip) {
      return arr;
    }
    var ret = [];
    if (!arr || !arr.length) {
      return ret;
    }
    if (arr[0]) {
      ret.push(arr[0]);
    }
    if (arr.length < 2) {
      return ret;
    }
    _zipIdx++;
    if (goog.userAgent.IE && caseSensitive) {
      var szidx = _zipIdx + "";
      arr[0].setAttribute(_zipIdxName, szidx);
      for (var x = 1, te;te = arr[x];x++) {
        if (arr[x].getAttribute(_zipIdxName) != szidx) {
          ret.push(te);
        }
        te.setAttribute(_zipIdxName, szidx);
      }
    } else {
      if (goog.userAgent.IE && arr.commentStrip) {
        try {
          for (var x = 1, te;te = arr[x];x++) {
            if (isElement(te)) {
              ret.push(te);
            }
          }
        } catch (e) {
        }
      } else {
        if (arr[0]) {
          arr[0][_zipIdxName] = _zipIdx;
        }
        for (var x = 1, te;te = arr[x];x++) {
          if (arr[x][_zipIdxName] != _zipIdx) {
            ret.push(te);
          }
          te[_zipIdxName] = _zipIdx;
        }
      }
    }
    return ret;
  };
  var query = function(query, root) {
    if (!query) {
      return[];
    }
    if (query.constructor == Array) {
      return(query);
    }
    if (!goog.isString(query)) {
      return[query];
    }
    if (goog.isString(root)) {
      root = goog.dom.getElement(root);
      if (!root) {
        return[];
      }
    }
    root = root || goog.dom.getDocument();
    var od = root.ownerDocument || root.documentElement;
    caseSensitive = root.contentType && root.contentType == "application/xml" || goog.userAgent.OPERA && (root.doctype || od.toString() == "[object XMLDocument]") || !!od && (goog.userAgent.IE ? od.xml : root.xmlVersion || od.xmlVersion);
    var r = getQueryFunc(query)(root);
    if (r && r.nozip) {
      return r;
    }
    return _zip(r);
  };
  query.pseudos = pseudos;
  return query;
}();
goog.exportSymbol("goog.dom.query", goog.dom.query);
goog.exportSymbol("goog.dom.query.pseudos", goog.dom.query.pseudos);
goog.provide("domina.css");
goog.require("cljs.core");
goog.require("goog.dom.query");
goog.require("goog.dom");
goog.require("domina");
domina.css.root_element = function root_element() {
  return goog.dom.getElementsByTagNameAndClass("html")[0];
};
domina.css.sel = function() {
  var sel = null;
  var sel__1 = function(expr) {
    return sel.call(null, domina.css.root_element.call(null), expr);
  };
  var sel__2 = function(base, expr) {
    if (typeof domina.css.t93805 !== "undefined") {
    } else {
      domina.css.t93805 = function(expr, base, sel, meta93806) {
        this.expr = expr;
        this.base = base;
        this.sel = sel;
        this.meta93806 = meta93806;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      domina.css.t93805.prototype.domina$DomContent$ = true;
      domina.css.t93805.prototype.domina$DomContent$nodes$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.mapcat.call(null, function(___$1) {
          return function(p1__93800_SHARP_) {
            return domina.normalize_seq.call(null, goog.dom.query(self__.expr, p1__93800_SHARP_));
          };
        }(___$1), domina.nodes.call(null, self__.base));
      };
      domina.css.t93805.prototype.domina$DomContent$single_node$arity$1 = function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.first.call(null, cljs.core.filter.call(null, cljs.core.complement.call(null, cljs.core.nil_QMARK_), cljs.core.mapcat.call(null, function(___$1) {
          return function(p1__93801_SHARP_) {
            return domina.normalize_seq.call(null, goog.dom.query(self__.expr, p1__93801_SHARP_));
          };
        }(___$1), domina.nodes.call(null, self__.base))));
      };
      domina.css.t93805.prototype.cljs$core$IMeta$_meta$arity$1 = function(_93807) {
        var self__ = this;
        var _93807__$1 = this;
        return self__.meta93806;
      };
      domina.css.t93805.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_93807, meta93806__$1) {
        var self__ = this;
        var _93807__$1 = this;
        return new domina.css.t93805(self__.expr, self__.base, self__.sel, meta93806__$1);
      };
      domina.css.t93805.cljs$lang$type = true;
      domina.css.t93805.cljs$lang$ctorStr = "domina.css/t93805";
      domina.css.t93805.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
        return cljs.core._write.call(null, writer__4569__auto__, "domina.css/t93805");
      };
      domina.css.__GT_t93805 = function __GT_t93805(expr__$1, base__$1, sel__$1, meta93806) {
        return new domina.css.t93805(expr__$1, base__$1, sel__$1, meta93806);
      };
    }
    return new domina.css.t93805(expr, base, sel, cljs.core.PersistentArrayMap.EMPTY);
  };
  sel = function(base, expr) {
    switch(arguments.length) {
      case 1:
        return sel__1.call(this, base);
      case 2:
        return sel__2.call(this, base, expr);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sel.cljs$core$IFn$_invoke$arity$1 = sel__1;
  sel.cljs$core$IFn$_invoke$arity$2 = sel__2;
  return sel;
}();
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception, goog.debug.Logger.prototype.log));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception, opt_fnStackContext) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    var context;
    if (goog.STRICT_MODE_COMPATIBLE) {
      context = opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord;
    } else {
      context = opt_fnStackContext || arguments.callee.caller;
    }
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.maybeFlip_ = function() {
  if (goog.array.isEmpty(this.front_)) {
    this.front_ = this.back_;
    this.front_.reverse();
    this.back_ = [];
  }
};
goog.structs.Queue.prototype.enqueue = function(element) {
  this.back_.push(element);
};
goog.structs.Queue.prototype.dequeue = function() {
  this.maybeFlip_();
  return this.front_.pop();
};
goog.structs.Queue.prototype.peek = function() {
  this.maybeFlip_();
  return goog.array.peek(this.front_);
};
goog.structs.Queue.prototype.getCount = function() {
  return this.front_.length + this.back_.length;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.front_) && goog.array.isEmpty(this.back_);
};
goog.structs.Queue.prototype.clear = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.front_, obj) || goog.array.contains(this.back_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.lastIndexOf(this.front_, obj);
  if (index < 0) {
    return goog.array.remove(this.back_, obj);
  }
  goog.array.removeAt(this.front_, index);
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  var res = [];
  for (var i = this.front_.length - 1;i >= 0;--i) {
    res.push(this.front_[i]);
  }
  var len = this.back_.length;
  for (var i = 0;i < len;++i) {
    res.push(this.back_[i]);
  }
  return res;
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = this.freeQueue_.dequeue();
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject(freeQueue.dequeue());
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return{};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject(freeQueue.dequeue());
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.delayTimeout_ = undefined;
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.structs.PriorityPool.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.structs.PriorityPool.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
  this.headers_ = opt_headers;
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    headers.forEach(function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return!xhr.isDisposed() && !xhr.isActive();
};
goog.provide("goog.net.XhrManager");
goog.provide("goog.net.XhrManager.Event");
goog.provide("goog.net.XhrManager.Request");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIoPool");
goog.require("goog.structs.Map");
goog.net.XhrManager = function(opt_maxRetries, opt_headers, opt_minCount, opt_maxCount, opt_timeoutInterval) {
  goog.net.XhrManager.base(this, "constructor");
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.timeoutInterval_ = goog.isDef(opt_timeoutInterval) ? Math.max(0, opt_timeoutInterval) : 0;
  this.xhrPool_ = new goog.net.XhrIoPool(opt_headers, opt_minCount, opt_maxCount);
  this.requests_ = new goog.structs.Map;
  this.eventHandler_ = new goog.events.EventHandler(this);
};
goog.inherits(goog.net.XhrManager, goog.events.EventTarget);
goog.net.XhrManager.ERROR_ID_IN_USE_ = "[goog.net.XhrManager] ID in use";
goog.net.XhrManager.XHR_EVENT_TYPES_ = [goog.net.EventType.READY, goog.net.EventType.COMPLETE, goog.net.EventType.SUCCESS, goog.net.EventType.ERROR, goog.net.EventType.ABORT, goog.net.EventType.TIMEOUT];
goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrManager.prototype.getOutstandingCount = function() {
  return this.requests_.getCount();
};
goog.net.XhrManager.prototype.getOutstandingRequestIds = function() {
  return this.requests_.getKeys();
};
goog.net.XhrManager.prototype.send = function(id, url, opt_method, opt_content, opt_headers, opt_priority, opt_callback, opt_maxRetries, opt_responseType) {
  var requests = this.requests_;
  if (requests.get(id)) {
    throw Error(goog.net.XhrManager.ERROR_ID_IN_USE_);
  }
  var request = new goog.net.XhrManager.Request(url, goog.bind(this.handleEvent_, this, id), opt_method, opt_content, opt_headers, opt_callback, goog.isDef(opt_maxRetries) ? opt_maxRetries : this.maxRetries_, opt_responseType);
  this.requests_.set(id, request);
  var callback = goog.bind(this.handleAvailableXhr_, this, id);
  this.xhrPool_.getObject(callback, opt_priority);
  return request;
};
goog.net.XhrManager.prototype.abort = function(id, opt_force) {
  var request = this.requests_.get(id);
  if (request) {
    var xhrIo = request.xhrIo;
    request.setAborted(true);
    if (opt_force) {
      if (xhrIo) {
        this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
        goog.events.listenOnce(xhrIo, goog.net.EventType.READY, function() {
          this.xhrPool_.releaseObject(xhrIo);
        }, false, this);
      }
      this.requests_.remove(id);
    }
    if (xhrIo) {
      xhrIo.abort();
    }
  }
};
goog.net.XhrManager.prototype.handleAvailableXhr_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.xhrIo) {
    this.addXhrListener_(xhrIo, request.getXhrEventCallback());
    xhrIo.setTimeoutInterval(this.timeoutInterval_);
    xhrIo.setResponseType(request.getResponseType());
    request.xhrIo = xhrIo;
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.READY, this, id, xhrIo));
    this.retry_(id, xhrIo);
    if (request.getAborted()) {
      xhrIo.abort();
    }
  } else {
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleEvent_ = function(id, e) {
  var xhrIo = (e.target);
  switch(e.type) {
    case goog.net.EventType.READY:
      this.retry_(id, xhrIo);
      break;
    case goog.net.EventType.COMPLETE:
      return this.handleComplete_(id, xhrIo, e);
    case goog.net.EventType.SUCCESS:
      this.handleSuccess_(id, xhrIo);
      break;
    case goog.net.EventType.TIMEOUT:
    ;
    case goog.net.EventType.ERROR:
      this.handleError_(id, xhrIo);
      break;
    case goog.net.EventType.ABORT:
      this.handleAbort_(id, xhrIo);
      break;
  }
  return null;
};
goog.net.XhrManager.prototype.retry_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.getCompleted() && !request.hasReachedMaxRetries()) {
    request.increaseAttemptCount();
    xhrIo.send(request.getUrl(), request.getMethod(), request.getContent(), request.getHeaders());
  } else {
    if (request) {
      this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
      this.requests_.remove(id);
    }
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleComplete_ = function(id, xhrIo, e) {
  var request = this.requests_.get(id);
  if (xhrIo.getLastErrorCode() == goog.net.ErrorCode.ABORT || xhrIo.isSuccess() || request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.COMPLETE, this, id, xhrIo));
    if (request) {
      request.setCompleted(true);
      if (request.getCompleteCallback()) {
        return request.getCompleteCallback().call(xhrIo, e);
      }
    }
  }
  return null;
};
goog.net.XhrManager.prototype.handleAbort_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ABORT, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleSuccess_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.SUCCESS, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleError_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ERROR, this, id, xhrIo));
  }
};
goog.net.XhrManager.prototype.removeXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.unlisten(xhrIo, types, func);
};
goog.net.XhrManager.prototype.addXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.listen(xhrIo, types, func);
};
goog.net.XhrManager.prototype.disposeInternal = function() {
  goog.net.XhrManager.superClass_.disposeInternal.call(this);
  this.xhrPool_.dispose();
  this.xhrPool_ = null;
  this.eventHandler_.dispose();
  this.eventHandler_ = null;
  this.requests_.clear();
  this.requests_ = null;
};
goog.net.XhrManager.Event = function(type, target, id, xhrIo) {
  goog.events.Event.call(this, type, target);
  this.id = id;
  this.xhrIo = xhrIo;
};
goog.inherits(goog.net.XhrManager.Event, goog.events.Event);
goog.net.XhrManager.Request = function(url, xhrEventCallback, opt_method, opt_content, opt_headers, opt_callback, opt_maxRetries, opt_responseType) {
  this.url_ = url;
  this.method_ = opt_method || "GET";
  this.content_ = opt_content;
  this.headers_ = opt_headers || null;
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.attemptCount_ = 0;
  this.completed_ = false;
  this.aborted_ = false;
  this.xhrEventCallback_ = xhrEventCallback;
  this.completeCallback_ = opt_callback;
  this.responseType_ = opt_responseType || goog.net.XhrIo.ResponseType.DEFAULT;
  this.xhrIo = null;
};
goog.net.XhrManager.Request.prototype.getUrl = function() {
  return this.url_;
};
goog.net.XhrManager.Request.prototype.getMethod = function() {
  return this.method_;
};
goog.net.XhrManager.Request.prototype.getContent = function() {
  return this.content_;
};
goog.net.XhrManager.Request.prototype.getHeaders = function() {
  return this.headers_;
};
goog.net.XhrManager.Request.prototype.getMaxRetries = function() {
  return this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.getAttemptCount = function() {
  return this.attemptCount_;
};
goog.net.XhrManager.Request.prototype.increaseAttemptCount = function() {
  this.attemptCount_++;
};
goog.net.XhrManager.Request.prototype.hasReachedMaxRetries = function() {
  return this.attemptCount_ > this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.setCompleted = function(complete) {
  this.completed_ = complete;
};
goog.net.XhrManager.Request.prototype.getCompleted = function() {
  return this.completed_;
};
goog.net.XhrManager.Request.prototype.setAborted = function(aborted) {
  this.aborted_ = aborted;
};
goog.net.XhrManager.Request.prototype.getAborted = function() {
  return this.aborted_;
};
goog.net.XhrManager.Request.prototype.getXhrEventCallback = function() {
  return this.xhrEventCallback_;
};
goog.net.XhrManager.Request.prototype.getCompleteCallback = function() {
  return this.completeCallback_;
};
goog.net.XhrManager.Request.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d";
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
  util.btoa = function(input) {
    if (typeof btoa != "undefined") {
      return btoa(input);
    } else {
      var str = String(input);
      for (var block, charCode, idx = 0, map = util.chars, output = "";str.charAt(idx | 0) || (map = "\x3d", idx % 1);output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = str.charCodeAt(idx += 3 / 4);
        if (charCode > 255) {
          throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    }
  };
  util.atob = function(input) {
    if (typeof atob != "undefined") {
      return atob(input);
    } else {
      var str = String(input).replace(/=+$/, "");
      if (str.length % 4 == 1) {
        throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (var bc = 0, bs, buffer, idx = 0, output = "";buffer = str.charAt(idx++);~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
        buffer = util.chars.indexOf(buffer);
      }
      return output;
    }
  };
  util.Uint8ToBase64 = function(u8Arr) {
    var CHUNK_SIZE = 32768, index = 0, length = u8Arr.length, result = "", slice = null;
    while (index < length) {
      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));
      result += String.fromCharCode.apply(null, slice);
      index += CHUNK_SIZE;
    }
    return util.btoa(result);
  };
  util.Base64ToUint8 = function(base64) {
    var binary_string = util.atob(base64), len = binary_string.length, bytes = new Uint8Array(len);
    for (var i = 0;i < len;i++) {
      var ascii = binary_string.charCodeAt(i);
      bytes[i] = ascii;
    }
    return bytes;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.hashCodeProperty = "transit$hashCode$";
  eq.hashCodeCounter = 1;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      switch(typeof x) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        case "function":
          var code = x[eq.hashCodeProperty];
          if (code) {
            return code;
          } else {
            code = eq.hashCodeCounter;
            if (typeof Object.defineProperty != "undefined") {
              Object.defineProperty(x, eq.hashCodeProperty, {value:code, enumerable:false});
            } else {
              x[eq.hashCodeProperty] = code;
            }
            eq.hashCodeCounter++;
            return code;
          }
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("goog.math.Long");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.ZERO;
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.MAX_VALUE;
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.ZERO;
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.ZERO = goog.math.Long.fromInt(0);
goog.math.Long.ONE = goog.math.Long.fromInt(1);
goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return(this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return-1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return-1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.MIN_VALUE;
  } else {
    return this.not().add(goog.math.Long.ONE);
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.ZERO;
  } else {
    if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.ONE;
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  types.TaggedValue = function(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740992");
  types.MIN_INT = Long.fromString("-9007199254740992");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this.name;
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this.name == other.name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype.toString = function() {
    return "[Symbol: " + this.name + "]";
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this.name == other.name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function(s) {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str, decoder) {
    if ((!decoder || decoder.preferBuffers !== false) && typeof Buffer != "undefined") {
      return new Buffer(str, "base64");
    } else {
      if (typeof Uint8Array != "undefined") {
        return util.Base64ToUint8(str);
      } else {
        return types.taggedValue("b", str);
      }
    }
  };
  types.isBinary = function(x) {
    if (typeof Buffer != "undefined" && x instanceof Buffer) {
      return true;
    } else {
      if (typeof Uint8Array != "undefined" && x instanceof Uint8Array) {
        return true;
      } else {
        return x instanceof types.TaggedValue && x.tag === "b";
      }
    }
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function(map, type) {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitMapIterator = function(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.mapEquals = function(me, you) {
    if ((you instanceof types.TransitMap || you instanceof types.TransitArrayMap) && me.size === you.size) {
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (you != null && typeof you === "object") {
        var ks = util.objectKeys(you), kslen = ks.length;
        if (me.size === kslen) {
          for (var i = 0;i < kslen;i++) {
            var k = ks[i];
            if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.TransitArrayMap = function(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return "[TransitArrayMap]";
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k, notFound) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return notFound;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap["delete"](k);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries.splice(i, 2);
          this.size--;
          return;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return "[TransitMap]";
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        break;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k, notFound) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return notFound;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return "[TransitSet]";
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    this.map["delete"](value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.List && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
  types.specialDouble = function(v) {
    switch(v) {
      case "-INF":
        return-Infinity;
      case "INF":
        return Infinity;
      case "NaN":
        return NaN;
      default:
        throw new Error("Invalid special double value " + v);break;
    }
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function() {
    this.idx = 0;
    this.gen++;
  };
  caching.writeCache = function() {
    return new caching.WriteCache;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
  caching.readCache = function() {
    return new caching.ReadCache;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      ;
      case "s":
      ;
      case "?":
      ;
      case "i":
      ;
      case "d":
      ;
      case "b":
      ;
      case "'":
      ;
      case "array":
      ;
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.preferBuffers = this.options["preferBuffers"] != null ? this.options["preferBuffers"] : this.defaults.preferBuffers;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v, d) {
    return types.nullValue();
  }, "?":function(v, d) {
    return types.boolValue(v);
  }, "b":function(v, d) {
    return types.binary(v, d);
  }, "i":function(v, d) {
    return types.intValue(v);
  }, "n":function(v, d) {
    return types.bigInteger(v);
  }, "d":function(v, d) {
    return types.floatValue(v);
  }, "f":function(v, d) {
    return types.bigDecimalValue(v);
  }, "c":function(v, d) {
    return types.charValue(v);
  }, ":":function(v, d) {
    return types.keyword(v);
  }, "$":function(v, d) {
    return types.symbol(v);
  }, "r":function(v, d) {
    return types.uri(v);
  }, "z":function(v, d) {
    return types.specialDouble(v);
  }, "'":function(v, d) {
    return v;
  }, "m":function(v, d) {
    return types.date(v);
  }, "t":function(v, d) {
    return types.verboseDate(v);
  }, "u":function(v, d) {
    return types.uuid(v);
  }, "set":function(v, d) {
    return types.set(v);
  }, "list":function(v, d) {
    return types.list(v);
  }, "link":function(v, d) {
    return types.link(v);
  }, "cmap":function(v, d) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true, preferBuffers:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, asMapKey, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true), this);
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, asMapKey, true), this);
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, asMapKey, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init();
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2), this);
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.BufferHandler = function() {
  };
  handlers.BufferHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.BufferHandler.prototype.rep = function(v) {
    return v.toString("base64");
  };
  handlers.BufferHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.Uint8ArrayHandler = function() {
  };
  handlers.Uint8ArrayHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.Uint8ArrayHandler.prototype.rep = function(v) {
    return util.Uint8ToBase64(v);
  };
  handlers.Uint8ArrayHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    if (typeof Buffer != "undefined") {
      hs.set(Buffer, new handlers.BufferHandler);
    }
    if (typeof Uint8Array != "undefined") {
      hs.set(Uint8Array, new handlers.Uint8ArrayHandler);
    }
    return hs;
  };
  handlers.Handlers = function() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    var h = null;
    if (typeof ctor === "string") {
      h = this.handlers[ctor];
    } else {
      h = this.handlers[handlers.typeTag(ctor)];
    }
    if (h != null) {
      return h;
    } else {
      return this.handlers["default"];
    }
  };
  handlers.Handlers.prototype["get"] = handlers.Handlers.prototype.get;
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      ;
      case "string":
      ;
      case "boolean":
      ;
      case "number":
      ;
      case "array":
      ;
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        self.handlers.set(k, v);
      });
    }
    this.handlerForForeign = this.opts["handlerForForeign"];
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (i === Infinity) {
      return this.emitString(d.ESC, "z", "INF", asMapKey, cache);
    } else {
      if (i === -Infinity) {
        return this.emitString(d.ESC, "z", "-INF", asMapKey, cache);
      } else {
        if (isNaN(i)) {
          return this.emitString(d.ESC, "z", "NaN", asMapKey, cache);
        } else {
          if (asMapKey || typeof i === "string" || i instanceof Long) {
            return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
          } else {
            return i;
          }
        }
      }
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return[this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys(), step = null;
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.isForeignObject = function(x) {
    if (x.constructor["transit$isObject"]) {
      return true;
    }
    var ret = x.constructor.toString(), ret = ret.substr("function ".length), ret = ret.substr(0, ret.indexOf("(")), isObject = ret == "Object";
    if (typeof Object.defineProperty != "undefined") {
      Object.defineProperty(x.constructor, "transit$isObject", {value:isObject, enumerable:false});
    } else {
      x.constructor["transit$isObject"] = isObject;
    }
    return isObject;
  };
  writer.emitMap = function(em, obj, skip, cache) {
    if (obj.constructor === Object || obj.forEach != null || em.handlerForForeign && writer.isForeignObject(obj)) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            var ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          var ret = {}, ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var arr = em.unpack(obj), ret = ["^ "];
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return[tag, rep];
          }
        } else {
          var ret = ["^ "], ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return[em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
var TRANSIT_DEV = true;
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq, caching = com.cognitect.transit.caching;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      type = "json";
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashMapLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.readCache = caching.readCache;
  transit.writeCache = caching.writeCache;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = types.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", types.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
    goog.exportSymbol("transit.readCache", caching.readCache);
    goog.exportSymbol("transit.writeCache", caching.writeCache);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, decoder:decoder.decoder, UUIDfromString:types.UUIDfromString, 
    randomUUID:types.randomUUID, stringableKeys:writer.stringableKeys, readCache:caching.readCache, writeCache:caching.writeCache};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("goog.math.Long");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit");
cljs.core.UUID.prototype.cljs$core$IEquiv$ = true;
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return this$__$1.uuid === other.uuid;
  } else {
    if (other instanceof com.cognitect.transit.types.UUID) {
      return this$__$1.uuid === other.toString();
    } else {
      return false;
    }
  }
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return cljs.core._equiv.call(null, other, this$__$1);
  } else {
    return this$__$1.equiv(other);
  }
};
goog.math.Long.prototype.cljs$core$IEquiv$ = true;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
goog.math.Long.prototype.cljs$core$IHash$ = true;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(uuid, writer, _) {
  var uuid__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(uuid__$1.toString()), cljs.core.str('"')].join(""));
};
cognitect.transit.opts_merge = function opts_merge(a, b) {
  var seq__94058_94062 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__94059_94063 = null;
  var count__94060_94064 = 0;
  var i__94061_94065 = 0;
  while (true) {
    if (i__94061_94065 < count__94060_94064) {
      var k_94066 = cljs.core._nth.call(null, chunk__94059_94063, i__94061_94065);
      var v_94067 = b[k_94066];
      a[k_94066] = v_94067;
      var G__94068 = seq__94058_94062;
      var G__94069 = chunk__94059_94063;
      var G__94070 = count__94060_94064;
      var G__94071 = i__94061_94065 + 1;
      seq__94058_94062 = G__94068;
      chunk__94059_94063 = G__94069;
      count__94060_94064 = G__94070;
      i__94061_94065 = G__94071;
      continue;
    } else {
      var temp__4126__auto___94072 = cljs.core.seq.call(null, seq__94058_94062);
      if (temp__4126__auto___94072) {
        var seq__94058_94073__$1 = temp__4126__auto___94072;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__94058_94073__$1)) {
          var c__4768__auto___94074 = cljs.core.chunk_first.call(null, seq__94058_94073__$1);
          var G__94075 = cljs.core.chunk_rest.call(null, seq__94058_94073__$1);
          var G__94076 = c__4768__auto___94074;
          var G__94077 = cljs.core.count.call(null, c__4768__auto___94074);
          var G__94078 = 0;
          seq__94058_94062 = G__94075;
          chunk__94059_94063 = G__94076;
          count__94060_94064 = G__94077;
          i__94061_94065 = G__94078;
          continue;
        } else {
          var k_94079 = cljs.core.first.call(null, seq__94058_94073__$1);
          var v_94080 = b[k_94079];
          a[k_94079] = v_94080;
          var G__94081 = cljs.core.next.call(null, seq__94058_94073__$1);
          var G__94082 = null;
          var G__94083 = 0;
          var G__94084 = 0;
          seq__94058_94062 = G__94081;
          chunk__94059_94063 = G__94082;
          count__94060_94064 = G__94083;
          i__94061_94065 = G__94084;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.__GT_MapBuilder = function __GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.__GT_VectorBuilder = function __GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function() {
  var reader = null;
  var reader__1 = function(type) {
    return reader.call(null, type, null);
  };
  var reader__2 = function(type, opts) {
    return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"prefersStrings":false, "arrayBuilder":new cognitect.transit.VectorBuilder, "mapBuilder":new cognitect.transit.MapBuilder, "handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
      return cljs.core.symbol.call(null, v);
    }, ":", function(v) {
      return cljs.core.keyword.call(null, v);
    }, "set", function(v) {
      return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
    }, "list", function(v) {
      return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
    }, "cmap", function(v) {
      var i = 0;
      var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
      while (true) {
        if (i < v.length) {
          var G__94085 = i + 2;
          var G__94086 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
          i = G__94085;
          ret = G__94086;
          continue;
        } else {
          return cljs.core.persistent_BANG_.call(null, ret);
        }
        break;
      }
    }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts)))}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  reader = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return reader__1.call(this, type);
      case 2:
        return reader__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reader.cljs$core$IFn$_invoke$arity$1 = reader__1;
  reader.cljs$core$IFn$_invoke$arity$2 = reader__2;
  return reader;
}();
cognitect.transit.read = function read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.__GT_KeywordHandler = function __GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.__GT_SymbolHandler = function __GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__94087_94091 = cljs.core.seq.call(null, v);
  var chunk__94088_94092 = null;
  var count__94089_94093 = 0;
  var i__94090_94094 = 0;
  while (true) {
    if (i__94090_94094 < count__94089_94093) {
      var x_94095 = cljs.core._nth.call(null, chunk__94088_94092, i__94090_94094);
      ret.push(x_94095);
      var G__94096 = seq__94087_94091;
      var G__94097 = chunk__94088_94092;
      var G__94098 = count__94089_94093;
      var G__94099 = i__94090_94094 + 1;
      seq__94087_94091 = G__94096;
      chunk__94088_94092 = G__94097;
      count__94089_94093 = G__94098;
      i__94090_94094 = G__94099;
      continue;
    } else {
      var temp__4126__auto___94100 = cljs.core.seq.call(null, seq__94087_94091);
      if (temp__4126__auto___94100) {
        var seq__94087_94101__$1 = temp__4126__auto___94100;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__94087_94101__$1)) {
          var c__4768__auto___94102 = cljs.core.chunk_first.call(null, seq__94087_94101__$1);
          var G__94103 = cljs.core.chunk_rest.call(null, seq__94087_94101__$1);
          var G__94104 = c__4768__auto___94102;
          var G__94105 = cljs.core.count.call(null, c__4768__auto___94102);
          var G__94106 = 0;
          seq__94087_94091 = G__94103;
          chunk__94088_94092 = G__94104;
          count__94089_94093 = G__94105;
          i__94090_94094 = G__94106;
          continue;
        } else {
          var x_94107 = cljs.core.first.call(null, seq__94087_94101__$1);
          ret.push(x_94107);
          var G__94108 = cljs.core.next.call(null, seq__94087_94101__$1);
          var G__94109 = null;
          var G__94110 = 0;
          var G__94111 = 0;
          seq__94087_94091 = G__94108;
          chunk__94088_94092 = G__94109;
          count__94089_94093 = G__94110;
          i__94090_94094 = G__94111;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.__GT_ListHandler = function __GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.__GT_MapHandler = function __GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__94112_94116 = cljs.core.seq.call(null, v);
  var chunk__94113_94117 = null;
  var count__94114_94118 = 0;
  var i__94115_94119 = 0;
  while (true) {
    if (i__94115_94119 < count__94114_94118) {
      var x_94120 = cljs.core._nth.call(null, chunk__94113_94117, i__94115_94119);
      ret.push(x_94120);
      var G__94121 = seq__94112_94116;
      var G__94122 = chunk__94113_94117;
      var G__94123 = count__94114_94118;
      var G__94124 = i__94115_94119 + 1;
      seq__94112_94116 = G__94121;
      chunk__94113_94117 = G__94122;
      count__94114_94118 = G__94123;
      i__94115_94119 = G__94124;
      continue;
    } else {
      var temp__4126__auto___94125 = cljs.core.seq.call(null, seq__94112_94116);
      if (temp__4126__auto___94125) {
        var seq__94112_94126__$1 = temp__4126__auto___94125;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__94112_94126__$1)) {
          var c__4768__auto___94127 = cljs.core.chunk_first.call(null, seq__94112_94126__$1);
          var G__94128 = cljs.core.chunk_rest.call(null, seq__94112_94126__$1);
          var G__94129 = c__4768__auto___94127;
          var G__94130 = cljs.core.count.call(null, c__4768__auto___94127);
          var G__94131 = 0;
          seq__94112_94116 = G__94128;
          chunk__94113_94117 = G__94129;
          count__94114_94118 = G__94130;
          i__94115_94119 = G__94131;
          continue;
        } else {
          var x_94132 = cljs.core.first.call(null, seq__94112_94126__$1);
          ret.push(x_94132);
          var G__94133 = cljs.core.next.call(null, seq__94112_94126__$1);
          var G__94134 = null;
          var G__94135 = 0;
          var G__94136 = 0;
          seq__94112_94116 = G__94133;
          chunk__94113_94117 = G__94134;
          count__94114_94118 = G__94135;
          i__94115_94119 = G__94136;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.__GT_SetHandler = function __GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__94137_94141 = cljs.core.seq.call(null, v);
  var chunk__94138_94142 = null;
  var count__94139_94143 = 0;
  var i__94140_94144 = 0;
  while (true) {
    if (i__94140_94144 < count__94139_94143) {
      var x_94145 = cljs.core._nth.call(null, chunk__94138_94142, i__94140_94144);
      ret.push(x_94145);
      var G__94146 = seq__94137_94141;
      var G__94147 = chunk__94138_94142;
      var G__94148 = count__94139_94143;
      var G__94149 = i__94140_94144 + 1;
      seq__94137_94141 = G__94146;
      chunk__94138_94142 = G__94147;
      count__94139_94143 = G__94148;
      i__94140_94144 = G__94149;
      continue;
    } else {
      var temp__4126__auto___94150 = cljs.core.seq.call(null, seq__94137_94141);
      if (temp__4126__auto___94150) {
        var seq__94137_94151__$1 = temp__4126__auto___94150;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__94137_94151__$1)) {
          var c__4768__auto___94152 = cljs.core.chunk_first.call(null, seq__94137_94151__$1);
          var G__94153 = cljs.core.chunk_rest.call(null, seq__94137_94151__$1);
          var G__94154 = c__4768__auto___94152;
          var G__94155 = cljs.core.count.call(null, c__4768__auto___94152);
          var G__94156 = 0;
          seq__94137_94141 = G__94153;
          chunk__94138_94142 = G__94154;
          count__94139_94143 = G__94155;
          i__94140_94144 = G__94156;
          continue;
        } else {
          var x_94157 = cljs.core.first.call(null, seq__94137_94151__$1);
          ret.push(x_94157);
          var G__94158 = cljs.core.next.call(null, seq__94137_94151__$1);
          var G__94159 = null;
          var G__94160 = 0;
          var G__94161 = 0;
          seq__94137_94141 = G__94158;
          chunk__94138_94142 = G__94159;
          count__94139_94143 = G__94160;
          i__94140_94144 = G__94161;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.__GT_VectorHandler = function __GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.UUIDHandler = function() {
};
cognitect.transit.UUIDHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "u";
};
cognitect.transit.UUIDHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.uuid;
};
cognitect.transit.UUIDHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var this$ = this;
  return this$.rep(v);
};
cognitect.transit.UUIDHandler.cljs$lang$type = true;
cognitect.transit.UUIDHandler.cljs$lang$ctorStr = "cognitect.transit/UUIDHandler";
cognitect.transit.UUIDHandler.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/UUIDHandler");
};
cognitect.transit.__GT_UUIDHandler = function __GT_UUIDHandler() {
  return new cognitect.transit.UUIDHandler;
};
cognitect.transit.writer = function() {
  var writer = null;
  var writer__1 = function(type) {
    return writer.call(null, type, null);
  };
  var writer__2 = function(type, opts) {
    var keyword_handler = new cognitect.transit.KeywordHandler;
    var symbol_handler = new cognitect.transit.SymbolHandler;
    var list_handler = new cognitect.transit.ListHandler;
    var map_handler = new cognitect.transit.MapHandler;
    var set_handler = new cognitect.transit.SetHandler;
    var vector_handler = new cognitect.transit.VectorHandler;
    var uuid_handler = new cognitect.transit.UUIDHandler;
    var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
    cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.UUID, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, 
    symbol_handler, uuid_handler, list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
    return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(x) {
        if (x instanceof cljs.core.PersistentArrayMap) {
          return x.arr;
        } else {
          return false;
        }
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), "handlers":function() {
      var x94171 = cljs.core.clone.call(null, handlers);
      x94171.forEach = function(x94171, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
        return function(f) {
          var coll = this;
          var seq__94172 = cljs.core.seq.call(null, coll);
          var chunk__94173 = null;
          var count__94174 = 0;
          var i__94175 = 0;
          while (true) {
            if (i__94175 < count__94174) {
              var vec__94176 = cljs.core._nth.call(null, chunk__94173, i__94175);
              var k = cljs.core.nth.call(null, vec__94176, 0, null);
              var v = cljs.core.nth.call(null, vec__94176, 1, null);
              f.call(null, v, k);
              var G__94178 = seq__94172;
              var G__94179 = chunk__94173;
              var G__94180 = count__94174;
              var G__94181 = i__94175 + 1;
              seq__94172 = G__94178;
              chunk__94173 = G__94179;
              count__94174 = G__94180;
              i__94175 = G__94181;
              continue;
            } else {
              var temp__4126__auto__ = cljs.core.seq.call(null, seq__94172);
              if (temp__4126__auto__) {
                var seq__94172__$1 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__94172__$1)) {
                  var c__4768__auto__ = cljs.core.chunk_first.call(null, seq__94172__$1);
                  var G__94182 = cljs.core.chunk_rest.call(null, seq__94172__$1);
                  var G__94183 = c__4768__auto__;
                  var G__94184 = cljs.core.count.call(null, c__4768__auto__);
                  var G__94185 = 0;
                  seq__94172 = G__94182;
                  chunk__94173 = G__94183;
                  count__94174 = G__94184;
                  i__94175 = G__94185;
                  continue;
                } else {
                  var vec__94177 = cljs.core.first.call(null, seq__94172__$1);
                  var k = cljs.core.nth.call(null, vec__94177, 0, null);
                  var v = cljs.core.nth.call(null, vec__94177, 1, null);
                  f.call(null, v, k);
                  var G__94186 = cljs.core.next.call(null, seq__94172__$1);
                  var G__94187 = null;
                  var G__94188 = 0;
                  var G__94189 = 0;
                  seq__94172 = G__94186;
                  chunk__94173 = G__94187;
                  count__94174 = G__94188;
                  i__94175 = G__94189;
                  continue;
                }
              } else {
                return null;
              }
            }
            break;
          }
        };
      }(x94171, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers);
      return x94171;
    }(), "objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(m, kfn, vfn) {
        return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
          return function(obj, k, v) {
            var G__94170 = obj;
            G__94170.push(kfn.call(null, k), vfn.call(null, v));
            return G__94170;
          };
        }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), ["^ "], m);
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  writer = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return writer__1.call(this, type);
      case 2:
        return writer__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  writer.cljs$core$IFn$_invoke$arity$1 = writer__1;
  writer.cljs$core$IFn$_invoke$arity$2 = writer__2;
  return writer;
}();
cognitect.transit.write = function write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function() {
  var write_handler = null;
  var write_handler__2 = function(tag_fn, rep_fn) {
    return write_handler.call(null, tag_fn, rep_fn, null, null);
  };
  var write_handler__3 = function(tag_fn, rep_fn, str_rep_fn) {
    return write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
  };
  var write_handler__4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    if (typeof cognitect.transit.t94193 !== "undefined") {
    } else {
      cognitect.transit.t94193 = function(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, write_handler, meta94194) {
        this.verbose_handler_fn = verbose_handler_fn;
        this.str_rep_fn = str_rep_fn;
        this.rep_fn = rep_fn;
        this.tag_fn = tag_fn;
        this.write_handler = write_handler;
        this.meta94194 = meta94194;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cognitect.transit.t94193.prototype.tag = function(o) {
        var self__ = this;
        var _ = this;
        return self__.tag_fn.call(null, o);
      };
      cognitect.transit.t94193.prototype.rep = function(o) {
        var self__ = this;
        var _ = this;
        return self__.rep_fn.call(null, o);
      };
      cognitect.transit.t94193.prototype.stringRep = function(o) {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.str_rep_fn)) {
          return self__.str_rep_fn.call(null, o);
        } else {
          return null;
        }
      };
      cognitect.transit.t94193.prototype.getVerboseHandler = function() {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.verbose_handler_fn)) {
          return self__.verbose_handler_fn.call(null);
        } else {
          return null;
        }
      };
      cognitect.transit.t94193.prototype.cljs$core$IMeta$_meta$arity$1 = function(_94195) {
        var self__ = this;
        var _94195__$1 = this;
        return self__.meta94194;
      };
      cognitect.transit.t94193.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_94195, meta94194__$1) {
        var self__ = this;
        var _94195__$1 = this;
        return new cognitect.transit.t94193(self__.verbose_handler_fn, self__.str_rep_fn, self__.rep_fn, self__.tag_fn, self__.write_handler, meta94194__$1);
      };
      cognitect.transit.t94193.cljs$lang$type = true;
      cognitect.transit.t94193.cljs$lang$ctorStr = "cognitect.transit/t94193";
      cognitect.transit.t94193.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
        return cljs.core._write.call(null, writer__4569__auto__, "cognitect.transit/t94193");
      };
      cognitect.transit.__GT_t94193 = function __GT_t94193(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta94194) {
        return new cognitect.transit.t94193(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta94194);
      };
    }
    return new cognitect.transit.t94193(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, write_handler, cljs.core.PersistentArrayMap.EMPTY);
  };
  write_handler = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    switch(arguments.length) {
      case 2:
        return write_handler__2.call(this, tag_fn, rep_fn);
      case 3:
        return write_handler__3.call(this, tag_fn, rep_fn, str_rep_fn);
      case 4:
        return write_handler__4.call(this, tag_fn, rep_fn, str_rep_fn, verbose_handler_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  write_handler.cljs$core$IFn$_invoke$arity$2 = write_handler__2;
  write_handler.cljs$core$IFn$_invoke$arity$3 = write_handler__3;
  write_handler.cljs$core$IFn$_invoke$arity$4 = write_handler__4;
  return write_handler;
}();
cognitect.transit.tagged_value = function tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function integer(s) {
  return com.cognitect.transit.types.integer.call(null, s);
};
cognitect.transit.integer_QMARK_ = function integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function uuid_QMARK_(x) {
  return com.cognitect.transit.types.isUUID.call(null, x);
};
cognitect.transit.binary = function binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj93941 = {};
  return obj93941;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3969__auto__ = reader;
    if (and__3969__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4625__auto__ = reader == null ? null : reader;
    return function() {
      var or__3981__auto__ = cljs.reader.read_char[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.reader.read_char["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3969__auto__ = reader;
    if (and__3969__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4625__auto__ = reader == null ? null : reader;
    return function() {
      var or__3981__auto__ = cljs.reader.unread[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.reader.unread["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3981__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      var G__93942__i = 0, G__93942__a = new Array(arguments.length - 1);
      while (G__93942__i < G__93942__a.length) {
        G__93942__a[G__93942__i] = arguments[G__93942__i + 1];
        ++G__93942__i;
      }
      msg = new cljs.core.IndexedSeq(G__93942__a, 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__93943) {
    var rdr = cljs.core.first(arglist__93943);
    var msg = cljs.core.rest(arglist__93943);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3969__auto__ = !(ch === "#");
  if (and__3969__auto__) {
    var and__3969__auto____$1 = !(ch === "'");
    if (and__3969__auto____$1) {
      var and__3969__auto____$2 = !(ch === ":");
      if (and__3969__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3969__auto____$2;
      }
    } else {
      return and__3969__auto____$1;
    }
  } else {
    return and__3969__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__93944 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__93945 = cljs.reader.read_char.call(null, rdr);
      sb = G__93944;
      ch = G__93945;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__93946 = cljs.reader.read_char.call(null, rdr);
      ch = G__93946;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__93947 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__93947;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__93948 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__93948;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3981__auto__ = ch == null;
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3981__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__93949 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__93950 = cljs.reader.read_char.call(null, reader);
      buffer = G__93949;
      ch = G__93950;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__93951 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__93952 = cljs.reader.read_char.call(null, reader);
        buffer = G__93951;
        ch = G__93952;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__93953 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__93954 = cljs.reader.read_char.call(null, reader);
          buffer = G__93953;
          ch = G__93954;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__93959 = function() {
            var G__93957 = buffer;
            G__93957.append(nch);
            return G__93957;
          }();
          var G__93960 = cljs.reader.read_char.call(null, reader);
          buffer = G__93959;
          ch = G__93960;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__93961 = function() {
            var G__93958 = buffer;
            G__93958.append(ch);
            return G__93958;
          }();
          var G__93962 = cljs.reader.read_char.call(null, reader);
          buffer = G__93961;
          ch = G__93962;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__3969__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__3969__auto__)) {
      return!(token.length === 1);
    } else {
      return and__3969__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__93964 = o;
    if (G__93964) {
      var bit__4662__auto__ = G__93964.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4662__auto__ || G__93964.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__93964.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__93964);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__93964);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__93965 = reader;
        var G__93966 = eof_is_error;
        var G__93967 = sentinel;
        var G__93968 = is_recursive;
        reader = G__93965;
        eof_is_error = G__93966;
        sentinel = G__93967;
        is_recursive = G__93968;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__93969 = cljs.reader.read_comment.call(null, reader, ch);
          var G__93970 = eof_is_error;
          var G__93971 = sentinel;
          var G__93972 = is_recursive;
          reader = G__93969;
          eof_is_error = G__93970;
          sentinel = G__93971;
          is_recursive = G__93972;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__93973 = reader;
            var G__93974 = eof_is_error;
            var G__93975 = sentinel;
            var G__93976 = is_recursive;
            reader = G__93973;
            eof_is_error = G__93974;
            sentinel = G__93975;
            is_recursive = G__93976;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__93977 = b.append("0");
          b = G__93977;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__93979 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__93979, 0, null);
  var years = cljs.core.nth.call(null, vec__93979, 1, null);
  var months = cljs.core.nth.call(null, vec__93979, 2, null);
  var days = cljs.core.nth.call(null, vec__93979, 3, null);
  var hours = cljs.core.nth.call(null, vec__93979, 4, null);
  var minutes = cljs.core.nth.call(null, vec__93979, 5, null);
  var seconds = cljs.core.nth.call(null, vec__93979, 6, null);
  var fraction = cljs.core.nth.call(null, vec__93979, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__93979, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__93979, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__93979, 10, null);
  var v = vec__93979;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3981__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__93981 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__93981, 0, null);
    var months = cljs.core.nth.call(null, vec__93981, 1, null);
    var days = cljs.core.nth.call(null, vec__93981, 2, null);
    var hours = cljs.core.nth.call(null, vec__93981, 3, null);
    var minutes = cljs.core.nth.call(null, vec__93981, 4, null);
    var seconds = cljs.core.nth.call(null, vec__93981, 5, null);
    var ms = cljs.core.nth.call(null, vec__93981, 6, null);
    var offset = cljs.core.nth.call(null, vec__93981, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__93994_94006 = cljs.core.seq.call(null, form);
    var chunk__93995_94007 = null;
    var count__93996_94008 = 0;
    var i__93997_94009 = 0;
    while (true) {
      if (i__93997_94009 < count__93996_94008) {
        var x_94010 = cljs.core._nth.call(null, chunk__93995_94007, i__93997_94009);
        arr.push(x_94010);
        var G__94011 = seq__93994_94006;
        var G__94012 = chunk__93995_94007;
        var G__94013 = count__93996_94008;
        var G__94014 = i__93997_94009 + 1;
        seq__93994_94006 = G__94011;
        chunk__93995_94007 = G__94012;
        count__93996_94008 = G__94013;
        i__93997_94009 = G__94014;
        continue;
      } else {
        var temp__4126__auto___94015 = cljs.core.seq.call(null, seq__93994_94006);
        if (temp__4126__auto___94015) {
          var seq__93994_94016__$1 = temp__4126__auto___94015;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__93994_94016__$1)) {
            var c__4768__auto___94017 = cljs.core.chunk_first.call(null, seq__93994_94016__$1);
            var G__94018 = cljs.core.chunk_rest.call(null, seq__93994_94016__$1);
            var G__94019 = c__4768__auto___94017;
            var G__94020 = cljs.core.count.call(null, c__4768__auto___94017);
            var G__94021 = 0;
            seq__93994_94006 = G__94018;
            chunk__93995_94007 = G__94019;
            count__93996_94008 = G__94020;
            i__93997_94009 = G__94021;
            continue;
          } else {
            var x_94022 = cljs.core.first.call(null, seq__93994_94016__$1);
            arr.push(x_94022);
            var G__94023 = cljs.core.next.call(null, seq__93994_94016__$1);
            var G__94024 = null;
            var G__94025 = 0;
            var G__94026 = 0;
            seq__93994_94006 = G__94023;
            chunk__93995_94007 = G__94024;
            count__93996_94008 = G__94025;
            i__93997_94009 = G__94026;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj93999 = {};
        return obj93999;
      }();
      var seq__94000_94027 = cljs.core.seq.call(null, form);
      var chunk__94001_94028 = null;
      var count__94002_94029 = 0;
      var i__94003_94030 = 0;
      while (true) {
        if (i__94003_94030 < count__94002_94029) {
          var vec__94004_94031 = cljs.core._nth.call(null, chunk__94001_94028, i__94003_94030);
          var k_94032 = cljs.core.nth.call(null, vec__94004_94031, 0, null);
          var v_94033 = cljs.core.nth.call(null, vec__94004_94031, 1, null);
          obj[cljs.core.name.call(null, k_94032)] = v_94033;
          var G__94034 = seq__94000_94027;
          var G__94035 = chunk__94001_94028;
          var G__94036 = count__94002_94029;
          var G__94037 = i__94003_94030 + 1;
          seq__94000_94027 = G__94034;
          chunk__94001_94028 = G__94035;
          count__94002_94029 = G__94036;
          i__94003_94030 = G__94037;
          continue;
        } else {
          var temp__4126__auto___94038 = cljs.core.seq.call(null, seq__94000_94027);
          if (temp__4126__auto___94038) {
            var seq__94000_94039__$1 = temp__4126__auto___94038;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__94000_94039__$1)) {
              var c__4768__auto___94040 = cljs.core.chunk_first.call(null, seq__94000_94039__$1);
              var G__94041 = cljs.core.chunk_rest.call(null, seq__94000_94039__$1);
              var G__94042 = c__4768__auto___94040;
              var G__94043 = cljs.core.count.call(null, c__4768__auto___94040);
              var G__94044 = 0;
              seq__94000_94027 = G__94041;
              chunk__94001_94028 = G__94042;
              count__94002_94029 = G__94043;
              i__94003_94030 = G__94044;
              continue;
            } else {
              var vec__94005_94045 = cljs.core.first.call(null, seq__94000_94039__$1);
              var k_94046 = cljs.core.nth.call(null, vec__94005_94045, 0, null);
              var v_94047 = cljs.core.nth.call(null, vec__94005_94045, 1, null);
              obj[cljs.core.name.call(null, k_94046)] = v_94047;
              var G__94048 = cljs.core.next.call(null, seq__94000_94039__$1);
              var G__94049 = null;
              var G__94050 = 0;
              var G__94051 = 0;
              seq__94000_94027 = G__94048;
              chunk__94001_94028 = G__94049;
              count__94002_94029 = G__94050;
              i__94003_94030 = G__94051;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("ajax.core");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("cognitect.transit");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrManager");
goog.require("goog.json");
goog.require("goog.Uri.QueryData");
goog.require("goog.net.EventType");
goog.require("goog.events");
goog.require("goog.structs");
goog.require("goog.json.Serializer");
goog.require("clojure.string");
goog.require("cljs.reader");
goog.require("goog.net.ErrorCode");
ajax.core.AjaxImpl = function() {
  var obj93811 = {};
  return obj93811;
}();
ajax.core._js_ajax_request = function _js_ajax_request(this$, uri, method, body, headers, handler, opts) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7(this$, uri, method, body, headers, handler, opts);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._js_ajax_request[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._js_ajax_request["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxImpl.-js-ajax-request", this$);
        }
      }
    }().call(null, this$, uri, method, body, headers, handler, opts);
  }
};
ajax.core.AjaxRequest = function() {
  var obj93813 = {};
  return obj93813;
}();
ajax.core._abort = function _abort(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxRequest$_abort$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxRequest$_abort$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._abort[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._abort["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxRequest.-abort", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core.DirectlySubmittable = function() {
  var obj93815 = {};
  return obj93815;
}();
ajax.core.AjaxResponse = function() {
  var obj93817 = {};
  return obj93817;
}();
ajax.core._status = function _status(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_status$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_status$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._status[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._status["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-status", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._status_text = function _status_text(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_status_text$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_status_text$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._status_text[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._status_text["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-status-text", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._body = function _body(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_body$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_body$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._body[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._body["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-body", this$);
        }
      }
    }().call(null, this$);
  }
};
ajax.core._get_response_header = function _get_response_header(this$, header) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_get_response_header$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_get_response_header$arity$2(this$, header);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._get_response_header[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._get_response_header["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-get-response-header", this$);
        }
      }
    }().call(null, this$, header);
  }
};
ajax.core._was_aborted = function _was_aborted(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.ajax$core$AjaxResponse$_was_aborted$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxResponse$_was_aborted$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = ajax.core._was_aborted[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = ajax.core._was_aborted["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxResponse.-was-aborted", this$);
        }
      }
    }().call(null, this$);
  }
};
if (typeof FormData !== "undefined") {
  FormData.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof ArrayBufferView !== "undefined") {
  ArrayBufferView.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof Blob !== "undefined") {
  Blob.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
if (typeof Document !== "undefined") {
  Document.prototype.ajax$core$DirectlySubmittable$ = true;
} else {
}
ajax.core.submittable_QMARK_ = function submittable_QMARK_(params) {
  var or__3981__auto__ = function() {
    var G__93821 = params;
    if (G__93821) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__93821.ajax$core$DirectlySubmittable$;
        }
      }())) {
        return true;
      } else {
        if (!G__93821.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__93821);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__93821);
    }
  }();
  if (or__3981__auto__) {
    return or__3981__auto__;
  } else {
    return typeof params === "string";
  }
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_body$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getResponseText();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_status$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getStatus();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_status_text$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.getStatusText();
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var this$__$1 = this;
  return this$__$1.getResponseHeader(header);
};
goog.net.XhrIo.prototype.ajax$core$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._EQ_.call(null, this$__$1.getLastErrorCode(), goog.net.ErrorCode.ABORT);
};
goog.net.XhrIo.prototype.ajax$core$AjaxRequest$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxRequest$_abort$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.abort(goog.net.ErrorCode.ABORT);
};
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__93823) {
  var map__93824 = p__93823;
  var map__93824__$1 = cljs.core.seq_QMARK_.call(null, map__93824) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93824) : map__93824;
  var with_credentials = cljs.core.get.call(null, map__93824__$1, new cljs.core.Keyword(null, "with-credentials", "with-credentials", -1163127235), false);
  var timeout = cljs.core.get.call(null, map__93824__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var this$__$1 = this;
  var G__93825 = this$__$1;
  goog.events.listen(G__93825, goog.net.EventType.COMPLETE, function(G__93825, this$__$1, map__93824, map__93824__$1, with_credentials, timeout) {
    return function(p1__93822_SHARP_) {
      return handler.call(null, p1__93822_SHARP_.target);
    };
  }(G__93825, this$__$1, map__93824, map__93824__$1, with_credentials, timeout));
  G__93825.setTimeoutInterval(timeout);
  G__93825.setWithCredentials(with_credentials);
  G__93825.send(uri, method, body, cljs.core.clj__GT_js.call(null, headers));
  return G__93825;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_body$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.response;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_status$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.status;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_status_text$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.statusText;
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_get_response_header$arity$2 = function(this$, header) {
  var this$__$1 = this;
  return this$__$1.getResponseHeader(header);
};
XMLHttpRequest.prototype.ajax$core$AjaxResponse$_was_aborted$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._EQ_.call(null, 0, this$__$1.readyState);
};
XMLHttpRequest.prototype.ajax$core$AjaxRequest$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxRequest$_abort$arity$1 = function(this$) {
  var this$__$1 = this;
  return this$__$1.abort();
};
XMLHttpRequest.prototype.ajax$core$AjaxImpl$ = true;
XMLHttpRequest.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__93826) {
  var map__93827 = p__93826;
  var map__93827__$1 = cljs.core.seq_QMARK_.call(null, map__93827) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93827) : map__93827;
  var with_credentials = cljs.core.get.call(null, map__93827__$1, new cljs.core.Keyword(null, "with-credentials", "with-credentials", -1163127235), false);
  var timeout = cljs.core.get.call(null, map__93827__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318), 0);
  var this$__$1 = this;
  this$__$1.timeout = timeout;
  this$__$1.withCredentials = with_credentials;
  this$__$1.onreadystatechange = function(this$__$1, map__93827, map__93827__$1, with_credentials, timeout) {
    return function() {
      return handler.call(null, this$__$1);
    };
  }(this$__$1, map__93827, map__93827__$1, with_credentials, timeout);
  var G__93828 = this$__$1;
  G__93828.open(method, uri, true);
  var t_93835 = G__93828;
  var t_93836__$1 = function() {
    var seq__93829 = cljs.core.seq.call(null, headers);
    var chunk__93830 = null;
    var count__93831 = 0;
    var i__93832 = 0;
    while (true) {
      if (i__93832 < count__93831) {
        var vec__93833 = cljs.core._nth.call(null, chunk__93830, i__93832);
        var k = cljs.core.nth.call(null, vec__93833, 0, null);
        var v = cljs.core.nth.call(null, vec__93833, 1, null);
        t_93835.setRequestHeader(k, v);
        var G__93837 = seq__93829;
        var G__93838 = chunk__93830;
        var G__93839 = count__93831;
        var G__93840 = i__93832 + 1;
        seq__93829 = G__93837;
        chunk__93830 = G__93838;
        count__93831 = G__93839;
        i__93832 = G__93840;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__93829);
        if (temp__4126__auto__) {
          var seq__93829__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__93829__$1)) {
            var c__4768__auto__ = cljs.core.chunk_first.call(null, seq__93829__$1);
            var G__93841 = cljs.core.chunk_rest.call(null, seq__93829__$1);
            var G__93842 = c__4768__auto__;
            var G__93843 = cljs.core.count.call(null, c__4768__auto__);
            var G__93844 = 0;
            seq__93829 = G__93841;
            chunk__93830 = G__93842;
            count__93831 = G__93843;
            i__93832 = G__93844;
            continue;
          } else {
            var vec__93834 = cljs.core.first.call(null, seq__93829__$1);
            var k = cljs.core.nth.call(null, vec__93834, 0, null);
            var v = cljs.core.nth.call(null, vec__93834, 1, null);
            t_93835.setRequestHeader(k, v);
            var G__93845 = cljs.core.next.call(null, seq__93829__$1);
            var G__93846 = null;
            var G__93847 = 0;
            var G__93848 = 0;
            seq__93829 = G__93845;
            chunk__93830 = G__93846;
            count__93831 = G__93847;
            i__93832 = G__93848;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }();
  G__93828.send(function() {
    var or__3981__auto__ = body;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return "";
    }
  }());
  return G__93828;
};
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__93849) {
  var map__93850 = p__93849;
  var map__93850__$1 = cljs.core.seq_QMARK_.call(null, map__93850) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93850) : map__93850;
  var max_retries = cljs.core.get.call(null, map__93850__$1, new cljs.core.Keyword(null, "max-retries", "max-retries", -1933762121));
  var priority = cljs.core.get.call(null, map__93850__$1, new cljs.core.Keyword(null, "priority", "priority", 1431093715));
  var timeout = cljs.core.get.call(null, map__93850__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
  var id = cljs.core.get.call(null, map__93850__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
  var this$__$1 = this;
  return this$__$1.send(id, uri, method, body, cljs.core.clj__GT_js.call(null, headers), priority, handler, max_retries);
};
ajax.core.abort = function abort(this$) {
  return ajax.core._abort.call(null, this$);
};
ajax.core.success_QMARK_ = function success_QMARK_(status) {
  return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([status], true), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [200, 201, 202, 204, 205, 206], null));
};
ajax.core.read_edn = function read_edn(xhrio) {
  return cljs.reader.read_string.call(null, ajax.core._body.call(null, xhrio));
};
ajax.core.edn_response_format = function() {
  var edn_response_format = null;
  var edn_response_format__0 = function() {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.read_edn, new cljs.core.Keyword(null, "description", "description", -1428560544), "EDN", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/edn"], null);
  };
  var edn_response_format__1 = function(opts) {
    return edn_response_format.call(null);
  };
  edn_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return edn_response_format__0.call(this);
      case 1:
        return edn_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edn_response_format.cljs$core$IFn$_invoke$arity$0 = edn_response_format__0;
  edn_response_format.cljs$core$IFn$_invoke$arity$1 = edn_response_format__1;
  return edn_response_format;
}();
ajax.core.edn_request_format = function edn_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), cljs.core.pr_str, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/edn"], null);
};
ajax.core.transit_content_type = "application/transit+json; charset\x3dutf-8";
ajax.core.transit_write = function() {
  var transit_write = null;
  var transit_write__1 = function(writer) {
    return function(params) {
      return cognitect.transit.write.call(null, writer, params);
    };
  };
  var transit_write__2 = function(writer, params) {
    return cognitect.transit.write.call(null, writer, params);
  };
  transit_write = function(writer, params) {
    switch(arguments.length) {
      case 1:
        return transit_write__1.call(this, writer);
      case 2:
        return transit_write__2.call(this, writer, params);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_write.cljs$core$IFn$_invoke$arity$1 = transit_write__1;
  transit_write.cljs$core$IFn$_invoke$arity$2 = transit_write__2;
  return transit_write;
}();
ajax.core.transit_request_format = function() {
  var transit_request_format = null;
  var transit_request_format__0 = function() {
    return transit_request_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var transit_request_format__1 = function(p__93851) {
    var map__93853 = p__93851;
    var map__93853__$1 = cljs.core.seq_QMARK_.call(null, map__93853) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93853) : map__93853;
    var opts = map__93853__$1;
    var writer = cljs.core.get.call(null, map__93853__$1, new cljs.core.Keyword(null, "writer", "writer", -277568236));
    var type = cljs.core.get.call(null, map__93853__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
    var writer__$1 = function() {
      var or__3981__auto__ = writer;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return cognitect.transit.writer.call(null, function() {
          var or__3981__auto____$1 = type;
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            return new cljs.core.Keyword(null, "json", "json", 1279968570);
          }
        }(), opts);
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.transit_write.call(null, writer__$1), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), ajax.core.transit_content_type], null);
  };
  transit_request_format = function(p__93851) {
    switch(arguments.length) {
      case 0:
        return transit_request_format__0.call(this);
      case 1:
        return transit_request_format__1.call(this, p__93851);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_request_format.cljs$core$IFn$_invoke$arity$0 = transit_request_format__0;
  transit_request_format.cljs$core$IFn$_invoke$arity$1 = transit_request_format__1;
  return transit_request_format;
}();
ajax.core.transit_read = function() {
  var transit_read = null;
  var transit_read__1 = function(reader) {
    return function(raw, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var data = cognitect.transit.read.call(null, reader, text);
      if (cljs.core.truth_(raw)) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  };
  var transit_read__2 = function(reader, raw) {
    return function(xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var data = cognitect.transit.read.call(null, reader, text);
      if (cljs.core.truth_(raw)) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  };
  var transit_read__3 = function(reader, raw, xhrio) {
    var text = ajax.core._body.call(null, xhrio);
    var data = cognitect.transit.read.call(null, reader, text);
    if (cljs.core.truth_(raw)) {
      return data;
    } else {
      return cljs.core.js__GT_clj.call(null, data);
    }
  };
  transit_read = function(reader, raw, xhrio) {
    switch(arguments.length) {
      case 1:
        return transit_read__1.call(this, reader);
      case 2:
        return transit_read__2.call(this, reader, raw);
      case 3:
        return transit_read__3.call(this, reader, raw, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_read.cljs$core$IFn$_invoke$arity$1 = transit_read__1;
  transit_read.cljs$core$IFn$_invoke$arity$2 = transit_read__2;
  transit_read.cljs$core$IFn$_invoke$arity$3 = transit_read__3;
  return transit_read;
}();
ajax.core.transit_response_format = function() {
  var transit_response_format = null;
  var transit_response_format__0 = function() {
    return transit_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var transit_response_format__1 = function(p__93854) {
    var map__93856 = p__93854;
    var map__93856__$1 = cljs.core.seq_QMARK_.call(null, map__93856) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93856) : map__93856;
    var opts = map__93856__$1;
    var raw = cljs.core.get.call(null, map__93856__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
    var reader = cljs.core.get.call(null, map__93856__$1, new cljs.core.Keyword(null, "reader", "reader", 169660853));
    var type = cljs.core.get.call(null, map__93856__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
    var reader__$1 = function() {
      var or__3981__auto__ = reader;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return cognitect.transit.reader.call(null, function() {
          var or__3981__auto____$1 = type;
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            return new cljs.core.Keyword(null, "json", "json", 1279968570);
          }
        }(), opts);
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.transit_read.call(null, reader__$1, raw), new cljs.core.Keyword(null, "description", "description", -1428560544), "Transit", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/transit+json"], null);
  };
  transit_response_format = function(p__93854) {
    switch(arguments.length) {
      case 0:
        return transit_response_format__0.call(this);
      case 1:
        return transit_response_format__1.call(this, p__93854);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_response_format.cljs$core$IFn$_invoke$arity$0 = transit_response_format__0;
  transit_response_format.cljs$core$IFn$_invoke$arity$1 = transit_response_format__1;
  return transit_response_format;
}();
ajax.core.params_to_str = function params_to_str(params) {
  if (cljs.core.truth_(params)) {
    return goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
  } else {
    return null;
  }
};
ajax.core.url_request_format = function url_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.params_to_str, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/x-www-form-urlencoded"], null);
};
ajax.core.raw_response_format = function() {
  var raw_response_format = null;
  var raw_response_format__0 = function() {
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core._body, new cljs.core.Keyword(null, "description", "description", -1428560544), "raw text", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "*/*"], null);
  };
  var raw_response_format__1 = function(opts) {
    return raw_response_format.call(null);
  };
  raw_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return raw_response_format__0.call(this);
      case 1:
        return raw_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  raw_response_format.cljs$core$IFn$_invoke$arity$0 = raw_response_format__0;
  raw_response_format.cljs$core$IFn$_invoke$arity$1 = raw_response_format__1;
  return raw_response_format;
}();
ajax.core.write_json = function write_json(data) {
  return(new goog.json.Serializer).serialize(cljs.core.clj__GT_js.call(null, data));
};
ajax.core.json_request_format = function json_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.write_json, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/json"], null);
};
ajax.core.json_read = function() {
  var json_read = null;
  var json_read__1 = function(prefix) {
    return function(raw, keywords_QMARK_, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__3969__auto__ = prefix;
        if (cljs.core.truth_(and__3969__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__3969__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var json_read__2 = function(prefix, raw) {
    return function(keywords_QMARK_, xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__3969__auto__ = prefix;
        if (cljs.core.truth_(and__3969__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__3969__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var json_read__3 = function(prefix, raw, keywords_QMARK_) {
    return function(xhrio) {
      var text = ajax.core._body.call(null, xhrio);
      var text__$1 = cljs.core.truth_(function() {
        var and__3969__auto__ = prefix;
        if (cljs.core.truth_(and__3969__auto__)) {
          return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
        } else {
          return and__3969__auto__;
        }
      }()) ? text.substring(prefix.length()) : text;
      var json = goog.json.parse(text__$1);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var json_read__4 = function(prefix, raw, keywords_QMARK_, xhrio) {
    var text = ajax.core._body.call(null, xhrio);
    var text__$1 = cljs.core.truth_(function() {
      var and__3969__auto__ = prefix;
      if (cljs.core.truth_(and__3969__auto__)) {
        return cljs.core._EQ_.call(null, 0, text.indexOf(prefix));
      } else {
        return and__3969__auto__;
      }
    }()) ? text.substring(prefix.length()) : text;
    var json = goog.json.parse(text__$1);
    if (cljs.core.truth_(raw)) {
      return json;
    } else {
      return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
    }
  };
  json_read = function(prefix, raw, keywords_QMARK_, xhrio) {
    switch(arguments.length) {
      case 1:
        return json_read__1.call(this, prefix);
      case 2:
        return json_read__2.call(this, prefix, raw);
      case 3:
        return json_read__3.call(this, prefix, raw, keywords_QMARK_);
      case 4:
        return json_read__4.call(this, prefix, raw, keywords_QMARK_, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  json_read.cljs$core$IFn$_invoke$arity$1 = json_read__1;
  json_read.cljs$core$IFn$_invoke$arity$2 = json_read__2;
  json_read.cljs$core$IFn$_invoke$arity$3 = json_read__3;
  json_read.cljs$core$IFn$_invoke$arity$4 = json_read__4;
  return json_read;
}();
ajax.core.json_response_format = function() {
  var json_response_format = null;
  var json_response_format__0 = function() {
    return json_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var json_response_format__1 = function(p__93857) {
    var map__93859 = p__93857;
    var map__93859__$1 = cljs.core.seq_QMARK_.call(null, map__93859) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93859) : map__93859;
    var raw = cljs.core.get.call(null, map__93859__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
    var keywords_QMARK_ = cljs.core.get.call(null, map__93859__$1, new cljs.core.Keyword(null, "keywords?", "keywords?", 764949733));
    var prefix = cljs.core.get.call(null, map__93859__$1, new cljs.core.Keyword(null, "prefix", "prefix", -265908465));
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.json_read.call(null, prefix, raw, keywords_QMARK_), new cljs.core.Keyword(null, "description", "description", -1428560544), [cljs.core.str("JSON"), cljs.core.str(cljs.core.truth_(prefix) ? [cljs.core.str(" prefix '"), cljs.core.str(prefix), cljs.core.str("'")].join("") : null), cljs.core.str(cljs.core.truth_(keywords_QMARK_) ? " keywordize" : null)].join(""), new cljs.core.Keyword(null, 
    "content-type", "content-type", -508222634), "application/json"], null);
  };
  json_response_format = function(p__93857) {
    switch(arguments.length) {
      case 0:
        return json_response_format__0.call(this);
      case 1:
        return json_response_format__1.call(this, p__93857);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  json_response_format.cljs$core$IFn$_invoke$arity$0 = json_response_format__0;
  json_response_format.cljs$core$IFn$_invoke$arity$1 = json_response_format__1;
  return json_response_format;
}();
ajax.core.default_formats = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.json_response_format, ajax.core.edn_response_format, ajax.core.transit_response_format, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/plain", ajax.core.raw_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/html", ajax.core.raw_response_format], null), ajax.core.raw_response_format], 
null);
ajax.core.get_format = function() {
  var get_format = null;
  var get_format__1 = function(opts) {
    return function(format_entry) {
      if (cljs.core.vector_QMARK_.call(null, format_entry)) {
        return get_format.call(null, opts, cljs.core.second.call(null, format_entry));
      } else {
        if (cljs.core.map_QMARK_.call(null, format_entry)) {
          return format_entry;
        } else {
          return format_entry.call(null, opts);
        }
      }
    };
  };
  var get_format__2 = function(opts, format_entry) {
    if (cljs.core.vector_QMARK_.call(null, format_entry)) {
      return get_format.call(null, opts, cljs.core.second.call(null, format_entry));
    } else {
      if (cljs.core.map_QMARK_.call(null, format_entry)) {
        return format_entry;
      } else {
        return format_entry.call(null, opts);
      }
    }
  };
  get_format = function(opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return get_format__1.call(this, opts);
      case 2:
        return get_format__2.call(this, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_format.cljs$core$IFn$_invoke$arity$1 = get_format__1;
  get_format.cljs$core$IFn$_invoke$arity$2 = get_format__2;
  return get_format;
}();
ajax.core.accept_entry = function() {
  var accept_entry = null;
  var accept_entry__1 = function(opts) {
    return function(format_entry) {
      var or__3981__auto__ = cljs.core.vector_QMARK_.call(null, format_entry) ? cljs.core.first.call(null, format_entry) : (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_format.call(null, opts, format_entry));
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return "*/*";
      }
    };
  };
  var accept_entry__2 = function(opts, format_entry) {
    var or__3981__auto__ = cljs.core.vector_QMARK_.call(null, format_entry) ? cljs.core.first.call(null, format_entry) : (new cljs.core.Keyword(null, "content-type", "content-type", -508222634)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_format.call(null, opts, format_entry));
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return "*/*";
    }
  };
  accept_entry = function(opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return accept_entry__1.call(this, opts);
      case 2:
        return accept_entry__2.call(this, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  accept_entry.cljs$core$IFn$_invoke$arity$1 = accept_entry__1;
  accept_entry.cljs$core$IFn$_invoke$arity$2 = accept_entry__2;
  return accept_entry;
}();
ajax.core.detect_content_type = function() {
  var detect_content_type = null;
  var detect_content_type__1 = function(content_type) {
    return function(opts, format_entry) {
      var accept = ajax.core.accept_entry.call(null, opts, format_entry);
      return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
    };
  };
  var detect_content_type__2 = function(content_type, opts) {
    return function(format_entry) {
      var accept = ajax.core.accept_entry.call(null, opts, format_entry);
      return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
    };
  };
  var detect_content_type__3 = function(content_type, opts, format_entry) {
    var accept = ajax.core.accept_entry.call(null, opts, format_entry);
    return cljs.core._EQ_.call(null, accept, "*/*") || content_type.indexOf(accept) >= 0;
  };
  detect_content_type = function(content_type, opts, format_entry) {
    switch(arguments.length) {
      case 1:
        return detect_content_type__1.call(this, content_type);
      case 2:
        return detect_content_type__2.call(this, content_type, opts);
      case 3:
        return detect_content_type__3.call(this, content_type, opts, format_entry);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  detect_content_type.cljs$core$IFn$_invoke$arity$1 = detect_content_type__1;
  detect_content_type.cljs$core$IFn$_invoke$arity$2 = detect_content_type__2;
  detect_content_type.cljs$core$IFn$_invoke$arity$3 = detect_content_type__3;
  return detect_content_type;
}();
ajax.core.get_default_format = function get_default_format(xhrio, p__93860) {
  var map__93862 = p__93860;
  var map__93862__$1 = cljs.core.seq_QMARK_.call(null, map__93862) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93862) : map__93862;
  var opts = map__93862__$1;
  var response_format = cljs.core.get.call(null, map__93862__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var f = ajax.core.detect_content_type.call(null, function() {
    var or__3981__auto__ = ajax.core._get_response_header.call(null, xhrio, "Content-Type");
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return "";
    }
  }(), opts);
  return ajax.core.get_format.call(null, opts, cljs.core.first.call(null, cljs.core.filter.call(null, f, response_format)));
};
ajax.core.detect_response_format_read = function() {
  var detect_response_format_read = null;
  var detect_response_format_read__1 = function(opts) {
    return function(xhrio) {
      return(new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_default_format.call(null, xhrio, opts)).call(null, xhrio);
    };
  };
  var detect_response_format_read__2 = function(opts, xhrio) {
    return(new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_default_format.call(null, xhrio, opts)).call(null, xhrio);
  };
  detect_response_format_read = function(opts, xhrio) {
    switch(arguments.length) {
      case 1:
        return detect_response_format_read__1.call(this, opts);
      case 2:
        return detect_response_format_read__2.call(this, opts, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  detect_response_format_read.cljs$core$IFn$_invoke$arity$1 = detect_response_format_read__1;
  detect_response_format_read.cljs$core$IFn$_invoke$arity$2 = detect_response_format_read__2;
  return detect_response_format_read;
}();
ajax.core.accept_header = function accept_header(p__93863) {
  var map__93865 = p__93863;
  var map__93865__$1 = cljs.core.seq_QMARK_.call(null, map__93865) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93865) : map__93865;
  var opts = map__93865__$1;
  var response_format = cljs.core.get.call(null, map__93865__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  if (cljs.core.vector_QMARK_.call(null, response_format)) {
    return clojure.string.join.call(null, ", ", cljs.core.map.call(null, ajax.core.accept_entry.call(null, opts), response_format));
  } else {
    return ajax.core.accept_entry.call(null, opts, response_format);
  }
};
ajax.core.detect_response_format = function() {
  var detect_response_format = null;
  var detect_response_format__0 = function() {
    return detect_response_format.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.default_formats], null));
  };
  var detect_response_format__1 = function(opts) {
    var accept = ajax.core.accept_header.call(null, opts);
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.detect_response_format_read.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), [cljs.core.str("(from "), cljs.core.str(accept), cljs.core.str(")")].join(""), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), accept], null);
  };
  detect_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return detect_response_format__0.call(this);
      case 1:
        return detect_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  detect_response_format.cljs$core$IFn$_invoke$arity$0 = detect_response_format__0;
  detect_response_format.cljs$core$IFn$_invoke$arity$1 = detect_response_format__1;
  return detect_response_format;
}();
ajax.core.get_response_format = function get_response_format(p__93866) {
  var map__93868 = p__93866;
  var map__93868__$1 = cljs.core.seq_QMARK_.call(null, map__93868) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93868) : map__93868;
  var opts = map__93868__$1;
  var response_format = cljs.core.get.call(null, map__93868__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  if (cljs.core.vector_QMARK_.call(null, response_format)) {
    return ajax.core.detect_response_format.call(null, opts);
  } else {
    if (cljs.core.map_QMARK_.call(null, response_format)) {
      return response_format;
    } else {
      if (cljs.core.ifn_QMARK_.call(null, response_format)) {
        return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "read", "read", 1140058661), response_format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom", new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "*/*"], null);
      } else {
        throw new Error([cljs.core.str("unrecognized response format: "), cljs.core.str(response_format)].join(""));
      }
    }
  }
};
ajax.core.exception_response = function exception_response(e, status, p__93869, xhrio) {
  var map__93871 = p__93869;
  var map__93871__$1 = cljs.core.seq_QMARK_.call(null, map__93871) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93871) : map__93871;
  var description = cljs.core.get.call(null, map__93871__$1, new cljs.core.Keyword(null, "description", "description", -1428560544));
  var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), null], null);
  var status_text = [cljs.core.str(e.message), cljs.core.str("  Format should have been "), cljs.core.str(description)].join("");
  var parse_error = cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "parse", "parse", -1162164619), new cljs.core.Keyword(null, "original-text", "original-text", 744448452), ajax.core._body.call(null, xhrio));
  if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
    return parse_error;
  } else {
    return cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), ajax.core._status_text.call(null, xhrio), new cljs.core.Keyword(null, "parse-error", "parse-error", 255902478), parse_error);
  }
};
ajax.core.fail = function() {
  var fail__delegate = function(status, status_text, failure, params) {
    var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), failure], null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, cljs.core.reduce.call(null, cljs.core.conj, response, cljs.core.map.call(null, cljs.core.vec, cljs.core.partition.call(null, 2, params)))], null);
  };
  var fail = function(status, status_text, failure, var_args) {
    var params = null;
    if (arguments.length > 3) {
      var G__93872__i = 0, G__93872__a = new Array(arguments.length - 3);
      while (G__93872__i < G__93872__a.length) {
        G__93872__a[G__93872__i] = arguments[G__93872__i + 3];
        ++G__93872__i;
      }
      params = new cljs.core.IndexedSeq(G__93872__a, 0);
    }
    return fail__delegate.call(this, status, status_text, failure, params);
  };
  fail.cljs$lang$maxFixedArity = 3;
  fail.cljs$lang$applyTo = function(arglist__93873) {
    var status = cljs.core.first(arglist__93873);
    arglist__93873 = cljs.core.next(arglist__93873);
    var status_text = cljs.core.first(arglist__93873);
    arglist__93873 = cljs.core.next(arglist__93873);
    var failure = cljs.core.first(arglist__93873);
    var params = cljs.core.rest(arglist__93873);
    return fail__delegate(status, status_text, failure, params);
  };
  fail.cljs$core$IFn$_invoke$arity$variadic = fail__delegate;
  return fail;
}();
ajax.core.interpret_response = function interpret_response(p__93874, xhrio) {
  var map__93878 = p__93874;
  var map__93878__$1 = cljs.core.seq_QMARK_.call(null, map__93878) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93878) : map__93878;
  var format = map__93878__$1;
  var read = cljs.core.get.call(null, map__93878__$1, new cljs.core.Keyword(null, "read", "read", 1140058661));
  try {
    var status = ajax.core._status.call(null, xhrio);
    var fail = cljs.core.partial.call(null, ajax.core.fail, status);
    if (cljs.core._EQ_.call(null, -1, status)) {
      if (cljs.core.truth_(ajax.core._was_aborted.call(null, xhrio))) {
        return fail.call(null, "Request aborted by client.", new cljs.core.Keyword(null, "aborted", "aborted", 1775972619));
      } else {
        return fail.call(null, "Request timed out.", new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
      }
    } else {
      try {
        var response = read.call(null, xhrio);
        if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, response], null);
        } else {
          return fail.call(null, ajax.core._status_text.call(null, xhrio), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), response);
        }
      } catch (e93880) {
        if (e93880 instanceof Object) {
          var e = e93880;
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, ajax.core.exception_response.call(null, e, status, format, xhrio)], null);
        } else {
          throw e93880;
        }
      }
    }
  } catch (e93879) {
    if (e93879 instanceof Object) {
      var e = e93879;
      return ajax.core.fail.call(null, 0, e.message, new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "exception", "exception", -335277064), e);
    } else {
      throw e93879;
    }
  }
};
ajax.core.no_format = function no_format(xhrio) {
  throw new Error("No response format was supplied.");
};
ajax.core.uri_with_params = function uri_with_params(uri, params) {
  if (cljs.core.truth_(params)) {
    return[cljs.core.str(uri), cljs.core.str("?"), cljs.core.str(ajax.core.params_to_str.call(null, params))].join("");
  } else {
    return uri;
  }
};
ajax.core.get_request_format = function get_request_format(format) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.ifn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), format, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "text/plain"], null);
    } else {
      return null;
    }
  }
};
ajax.core.normalize_method = function normalize_method(method) {
  if (method instanceof cljs.core.Keyword) {
    return clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
  } else {
    return method;
  }
};
ajax.core.process_inputs = function process_inputs(p__93881, p__93882) {
  var map__93886 = p__93881;
  var map__93886__$1 = cljs.core.seq_QMARK_.call(null, map__93886) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93886) : map__93886;
  var headers = cljs.core.get.call(null, map__93886__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var params = cljs.core.get.call(null, map__93886__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var format = cljs.core.get.call(null, map__93886__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var method = cljs.core.get.call(null, map__93886__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var uri = cljs.core.get.call(null, map__93886__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var map__93887 = p__93882;
  var map__93887__$1 = cljs.core.seq_QMARK_.call(null, map__93887) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93887) : map__93887;
  var content_type = cljs.core.get.call(null, map__93887__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
  var headers__$1 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, ["Accept", content_type], null), function() {
    var or__3981__auto__ = headers;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }());
  if (cljs.core._EQ_.call(null, ajax.core.normalize_method.call(null, method), "GET")) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.uri_with_params.call(null, uri, params), null, headers__$1], null);
  } else {
    var map__93888 = ajax.core.get_request_format.call(null, format);
    var map__93888__$1 = cljs.core.seq_QMARK_.call(null, map__93888) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93888) : map__93888;
    var content_type__$1 = cljs.core.get.call(null, map__93888__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
    var write = cljs.core.get.call(null, map__93888__$1, new cljs.core.Keyword(null, "write", "write", -1857649168));
    var body = !(write == null) ? write.call(null, params) : ajax.core.submittable_QMARK_.call(null, params) ? params : function() {
      throw new Error([cljs.core.str("unrecognized request format: "), cljs.core.str(format)].join(""));
    }();
    var content_type__$2 = cljs.core.truth_(content_type__$1) ? new cljs.core.PersistentArrayMap(null, 1, ["Content-Type", content_type__$1], null) : null;
    var headers__$2 = cljs.core.merge.call(null, headers__$1, content_type__$2);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, body, headers__$2], null);
  }
};
ajax.core.js_handler = function() {
  var js_handler = null;
  var js_handler__1 = function(response_format) {
    return function(handler, xhrio) {
      var response = ajax.core.interpret_response.call(null, response_format, xhrio);
      return handler.call(null, response);
    };
  };
  var js_handler__2 = function(response_format, handler) {
    return function(xhrio) {
      var response = ajax.core.interpret_response.call(null, response_format, xhrio);
      return handler.call(null, response);
    };
  };
  var js_handler__3 = function(response_format, handler, xhrio) {
    var response = ajax.core.interpret_response.call(null, response_format, xhrio);
    return handler.call(null, response);
  };
  js_handler = function(response_format, handler, xhrio) {
    switch(arguments.length) {
      case 1:
        return js_handler__1.call(this, response_format);
      case 2:
        return js_handler__2.call(this, response_format, handler);
      case 3:
        return js_handler__3.call(this, response_format, handler, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_handler.cljs$core$IFn$_invoke$arity$1 = js_handler__1;
  js_handler.cljs$core$IFn$_invoke$arity$2 = js_handler__2;
  js_handler.cljs$core$IFn$_invoke$arity$3 = js_handler__3;
  return js_handler;
}();
ajax.core.base_handler = function base_handler(response_format, p__93889) {
  var map__93891 = p__93889;
  var map__93891__$1 = cljs.core.seq_QMARK_.call(null, map__93891) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93891) : map__93891;
  var handler = cljs.core.get.call(null, map__93891__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
  if (cljs.core.truth_(handler)) {
    return ajax.core.js_handler.call(null, response_format, handler);
  } else {
    throw new Error("No ajax handler provided.");
  }
};
ajax.core.ajax_request = function ajax_request(p__93892) {
  var map__93895 = p__93892;
  var map__93895__$1 = cljs.core.seq_QMARK_.call(null, map__93895) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93895) : map__93895;
  var opts = map__93895__$1;
  var api = cljs.core.get.call(null, map__93895__$1, new cljs.core.Keyword(null, "api", "api", -899839580));
  var method = cljs.core.get.call(null, map__93895__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var response_format = ajax.core.get_response_format.call(null, opts);
  var method__$1 = ajax.core.normalize_method.call(null, method);
  var vec__93896 = ajax.core.process_inputs.call(null, opts, response_format);
  var uri = cljs.core.nth.call(null, vec__93896, 0, null);
  var body = cljs.core.nth.call(null, vec__93896, 1, null);
  var headers = cljs.core.nth.call(null, vec__93896, 2, null);
  var handler = ajax.core.base_handler.call(null, response_format, opts);
  var api__$1 = function() {
    var or__3981__auto__ = api;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return new goog.net.XhrIo;
    }
  }();
  return ajax.core._js_ajax_request.call(null, api__$1, uri, method__$1, body, headers, handler, opts);
};
ajax.core.keyword_request_format = function keyword_request_format(format, format_params) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.fn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "write", "write", -1857649168), format], null);
    } else {
      if (format == null) {
        return ajax.core.transit_request_format.call(null, format_params);
      } else {
        var G__93898 = format instanceof cljs.core.Keyword ? format.fqn : null;
        switch(G__93898) {
          case "url":
            return ajax.core.url_request_format.call(null);
            break;
          case "raw":
            return ajax.core.url_request_format.call(null);
            break;
          case "edn":
            return ajax.core.edn_request_format.call(null);
            break;
          case "json":
            return ajax.core.json_request_format.call(null);
            break;
          case "transit":
            return ajax.core.transit_request_format.call(null, format_params);
            break;
          default:
            return null;
        }
      }
    }
  }
};
ajax.core.keyword_response_format_2 = function keyword_response_format_2(format, format_params) {
  if (cljs.core.vector_QMARK_.call(null, format)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, format), keyword_response_format_2.call(null, cljs.core.second.call(null, format), format_params)], null);
  } else {
    if (cljs.core.map_QMARK_.call(null, format)) {
      return format;
    } else {
      if (cljs.core.fn_QMARK_.call(null, format)) {
        return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1140058661), format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom"], null);
      } else {
        if (format == null) {
          return ajax.core.detect_response_format.call(null);
        } else {
          var G__93901 = format instanceof cljs.core.Keyword ? format.fqn : null;
          switch(G__93901) {
            case "detect":
              return ajax.core.detect_response_format.call(null);
              break;
            case "raw":
              return ajax.core.raw_response_format.call(null);
              break;
            case "edn":
              return ajax.core.edn_response_format.call(null);
              break;
            case "json":
              return ajax.core.json_response_format.call(null, format_params);
              break;
            case "transit":
              return ajax.core.transit_response_format.call(null, format_params);
              break;
            default:
              return null;
          }
        }
      }
    }
  }
};
ajax.core.keyword_response_format = function keyword_response_format(format, format_params) {
  if (cljs.core.vector_QMARK_.call(null, format)) {
    return cljs.core.apply.call(null, cljs.core.vector, cljs.core.map.call(null, function(p1__93903_SHARP_) {
      return ajax.core.keyword_response_format_2.call(null, p1__93903_SHARP_, format_params);
    }, format));
  } else {
    return ajax.core.keyword_response_format_2.call(null, format, format_params);
  }
};
ajax.core.transform_handler = function() {
  var transform_handler = null;
  var transform_handler__1 = function(p__93906) {
    var map__93914 = p__93906;
    var map__93914__$1 = cljs.core.seq_QMARK_.call(null, map__93914) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93914) : map__93914;
    var finally$ = cljs.core.get.call(null, map__93914__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
    var error_handler = cljs.core.get.call(null, map__93914__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
    var handler = cljs.core.get.call(null, map__93914__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
    return function(map__93914, map__93914__$1, finally$, error_handler, handler) {
      return function(p__93915) {
        var vec__93916 = p__93915;
        var ok = cljs.core.nth.call(null, vec__93916, 0, null);
        var result = cljs.core.nth.call(null, vec__93916, 1, null);
        var temp__4124__auto___93917 = cljs.core.truth_(ok) ? handler : error_handler;
        if (cljs.core.truth_(temp__4124__auto___93917)) {
          var h_93918 = temp__4124__auto___93917;
          h_93918.call(null, result);
        } else {
        }
        if (cljs.core.fn_QMARK_.call(null, finally$)) {
          return finally$.call(null);
        } else {
          return null;
        }
      };
    }(map__93914, map__93914__$1, finally$, error_handler, handler);
  };
  var transform_handler__2 = function(p__93904, p__93905) {
    var map__93912 = p__93904;
    var map__93912__$1 = cljs.core.seq_QMARK_.call(null, map__93912) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93912) : map__93912;
    var finally$ = cljs.core.get.call(null, map__93912__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
    var error_handler = cljs.core.get.call(null, map__93912__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
    var handler = cljs.core.get.call(null, map__93912__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
    var vec__93913 = p__93905;
    var ok = cljs.core.nth.call(null, vec__93913, 0, null);
    var result = cljs.core.nth.call(null, vec__93913, 1, null);
    var temp__4124__auto___93919 = cljs.core.truth_(ok) ? handler : error_handler;
    if (cljs.core.truth_(temp__4124__auto___93919)) {
      var h_93920 = temp__4124__auto___93919;
      h_93920.call(null, result);
    } else {
    }
    if (cljs.core.fn_QMARK_.call(null, finally$)) {
      return finally$.call(null);
    } else {
      return null;
    }
  };
  transform_handler = function(p__93904, p__93905) {
    switch(arguments.length) {
      case 1:
        return transform_handler__1.call(this, p__93904);
      case 2:
        return transform_handler__2.call(this, p__93904, p__93905);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transform_handler.cljs$core$IFn$_invoke$arity$1 = transform_handler__1;
  transform_handler.cljs$core$IFn$_invoke$arity$2 = transform_handler__2;
  return transform_handler;
}();
ajax.core.transform_opts = function transform_opts(p__93921) {
  var map__93923 = p__93921;
  var map__93923__$1 = cljs.core.seq_QMARK_.call(null, map__93923) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93923) : map__93923;
  var opts = map__93923__$1;
  var params = cljs.core.get.call(null, map__93923__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var response_format = cljs.core.get.call(null, map__93923__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var format = cljs.core.get.call(null, map__93923__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var method = cljs.core.get.call(null, map__93923__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var needs_format = !(ajax.core.submittable_QMARK_.call(null, params) || cljs.core._EQ_.call(null, method, "GET"));
  var rf = cljs.core.truth_(function() {
    var or__3981__auto__ = format;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return needs_format;
    }
  }()) ? ajax.core.keyword_request_format.call(null, format, opts) : null;
  return cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "handler", "handler", -195596612), ajax.core.transform_handler.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), rf, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.keyword_response_format.call(null, response_format, opts));
};
ajax.core.easy_ajax_request = function easy_ajax_request(uri, method, opts) {
  return ajax.core.ajax_request.call(null, ajax.core.transform_opts.call(null, cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "uri", "uri", -774711847), uri, new cljs.core.Keyword(null, "method", "method", 55703592), method)));
};
ajax.core.GET = function() {
  var GET__delegate = function(uri, opts) {
    var f__6386__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "GET", f__6386__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6386__auto__);
  };
  var GET = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__93924__i = 0, G__93924__a = new Array(arguments.length - 1);
      while (G__93924__i < G__93924__a.length) {
        G__93924__a[G__93924__i] = arguments[G__93924__i + 1];
        ++G__93924__i;
      }
      opts = new cljs.core.IndexedSeq(G__93924__a, 0);
    }
    return GET__delegate.call(this, uri, opts);
  };
  GET.cljs$lang$maxFixedArity = 1;
  GET.cljs$lang$applyTo = function(arglist__93925) {
    var uri = cljs.core.first(arglist__93925);
    var opts = cljs.core.rest(arglist__93925);
    return GET__delegate(uri, opts);
  };
  GET.cljs$core$IFn$_invoke$arity$variadic = GET__delegate;
  return GET;
}();
ajax.core.HEAD = function() {
  var HEAD__delegate = function(uri, opts) {
    var f__6386__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "HEAD", f__6386__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6386__auto__);
  };
  var HEAD = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__93926__i = 0, G__93926__a = new Array(arguments.length - 1);
      while (G__93926__i < G__93926__a.length) {
        G__93926__a[G__93926__i] = arguments[G__93926__i + 1];
        ++G__93926__i;
      }
      opts = new cljs.core.IndexedSeq(G__93926__a, 0);
    }
    return HEAD__delegate.call(this, uri, opts);
  };
  HEAD.cljs$lang$maxFixedArity = 1;
  HEAD.cljs$lang$applyTo = function(arglist__93927) {
    var uri = cljs.core.first(arglist__93927);
    var opts = cljs.core.rest(arglist__93927);
    return HEAD__delegate(uri, opts);
  };
  HEAD.cljs$core$IFn$_invoke$arity$variadic = HEAD__delegate;
  return HEAD;
}();
ajax.core.POST = function() {
  var POST__delegate = function(uri, opts) {
    var f__6386__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "POST", f__6386__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6386__auto__);
  };
  var POST = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__93928__i = 0, G__93928__a = new Array(arguments.length - 1);
      while (G__93928__i < G__93928__a.length) {
        G__93928__a[G__93928__i] = arguments[G__93928__i + 1];
        ++G__93928__i;
      }
      opts = new cljs.core.IndexedSeq(G__93928__a, 0);
    }
    return POST__delegate.call(this, uri, opts);
  };
  POST.cljs$lang$maxFixedArity = 1;
  POST.cljs$lang$applyTo = function(arglist__93929) {
    var uri = cljs.core.first(arglist__93929);
    var opts = cljs.core.rest(arglist__93929);
    return POST__delegate(uri, opts);
  };
  POST.cljs$core$IFn$_invoke$arity$variadic = POST__delegate;
  return POST;
}();
ajax.core.PUT = function() {
  var PUT__delegate = function(uri, opts) {
    var f__6386__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "PUT", f__6386__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6386__auto__);
  };
  var PUT = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__93930__i = 0, G__93930__a = new Array(arguments.length - 1);
      while (G__93930__i < G__93930__a.length) {
        G__93930__a[G__93930__i] = arguments[G__93930__i + 1];
        ++G__93930__i;
      }
      opts = new cljs.core.IndexedSeq(G__93930__a, 0);
    }
    return PUT__delegate.call(this, uri, opts);
  };
  PUT.cljs$lang$maxFixedArity = 1;
  PUT.cljs$lang$applyTo = function(arglist__93931) {
    var uri = cljs.core.first(arglist__93931);
    var opts = cljs.core.rest(arglist__93931);
    return PUT__delegate(uri, opts);
  };
  PUT.cljs$core$IFn$_invoke$arity$variadic = PUT__delegate;
  return PUT;
}();
ajax.core.DELETE = function() {
  var DELETE__delegate = function(uri, opts) {
    var f__6386__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "DELETE", f__6386__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6386__auto__);
  };
  var DELETE = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__93932__i = 0, G__93932__a = new Array(arguments.length - 1);
      while (G__93932__i < G__93932__a.length) {
        G__93932__a[G__93932__i] = arguments[G__93932__i + 1];
        ++G__93932__i;
      }
      opts = new cljs.core.IndexedSeq(G__93932__a, 0);
    }
    return DELETE__delegate.call(this, uri, opts);
  };
  DELETE.cljs$lang$maxFixedArity = 1;
  DELETE.cljs$lang$applyTo = function(arglist__93933) {
    var uri = cljs.core.first(arglist__93933);
    var opts = cljs.core.rest(arglist__93933);
    return DELETE__delegate(uri, opts);
  };
  DELETE.cljs$core$IFn$_invoke$arity$variadic = DELETE__delegate;
  return DELETE;
}();
ajax.core.OPTIONS = function() {
  var OPTIONS__delegate = function(uri, opts) {
    var f__6386__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "OPTIONS", f__6386__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6386__auto__);
  };
  var OPTIONS = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__93934__i = 0, G__93934__a = new Array(arguments.length - 1);
      while (G__93934__i < G__93934__a.length) {
        G__93934__a[G__93934__i] = arguments[G__93934__i + 1];
        ++G__93934__i;
      }
      opts = new cljs.core.IndexedSeq(G__93934__a, 0);
    }
    return OPTIONS__delegate.call(this, uri, opts);
  };
  OPTIONS.cljs$lang$maxFixedArity = 1;
  OPTIONS.cljs$lang$applyTo = function(arglist__93935) {
    var uri = cljs.core.first(arglist__93935);
    var opts = cljs.core.rest(arglist__93935);
    return OPTIONS__delegate(uri, opts);
  };
  OPTIONS.cljs$core$IFn$_invoke$arity$variadic = OPTIONS__delegate;
  return OPTIONS;
}();
ajax.core.TRACE = function() {
  var TRACE__delegate = function(uri, opts) {
    var f__6386__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "TRACE", f__6386__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6386__auto__);
  };
  var TRACE = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      var G__93936__i = 0, G__93936__a = new Array(arguments.length - 1);
      while (G__93936__i < G__93936__a.length) {
        G__93936__a[G__93936__i] = arguments[G__93936__i + 1];
        ++G__93936__i;
      }
      opts = new cljs.core.IndexedSeq(G__93936__a, 0);
    }
    return TRACE__delegate.call(this, uri, opts);
  };
  TRACE.cljs$lang$maxFixedArity = 1;
  TRACE.cljs$lang$applyTo = function(arglist__93937) {
    var uri = cljs.core.first(arglist__93937);
    var opts = cljs.core.rest(arglist__93937);
    return TRACE__delegate(uri, opts);
  };
  TRACE.cljs$core$IFn$_invoke$arity$variadic = TRACE__delegate;
  return TRACE;
}();
goog.provide("om.dom");
goog.require("cljs.core");
goog.require("goog.object");
om.dom.a = function() {
  var a__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.a.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var a = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100331__i = 0, G__100331__a = new Array(arguments.length - 1);
      while (G__100331__i < G__100331__a.length) {
        G__100331__a[G__100331__i] = arguments[G__100331__i + 1];
        ++G__100331__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100331__a, 0);
    }
    return a__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  a.cljs$lang$maxFixedArity = 1;
  a.cljs$lang$applyTo = function(arglist__100332) {
    var opts__7119__auto__ = cljs.core.first(arglist__100332);
    var children__7120__auto__ = cljs.core.rest(arglist__100332);
    return a__delegate(opts__7119__auto__, children__7120__auto__);
  };
  a.cljs$core$IFn$_invoke$arity$variadic = a__delegate;
  return a;
}();
om.dom.abbr = function() {
  var abbr__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.abbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var abbr = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100333__i = 0, G__100333__a = new Array(arguments.length - 1);
      while (G__100333__i < G__100333__a.length) {
        G__100333__a[G__100333__i] = arguments[G__100333__i + 1];
        ++G__100333__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100333__a, 0);
    }
    return abbr__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  abbr.cljs$lang$maxFixedArity = 1;
  abbr.cljs$lang$applyTo = function(arglist__100334) {
    var opts__7119__auto__ = cljs.core.first(arglist__100334);
    var children__7120__auto__ = cljs.core.rest(arglist__100334);
    return abbr__delegate(opts__7119__auto__, children__7120__auto__);
  };
  abbr.cljs$core$IFn$_invoke$arity$variadic = abbr__delegate;
  return abbr;
}();
om.dom.address = function() {
  var address__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.address.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var address = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100335__i = 0, G__100335__a = new Array(arguments.length - 1);
      while (G__100335__i < G__100335__a.length) {
        G__100335__a[G__100335__i] = arguments[G__100335__i + 1];
        ++G__100335__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100335__a, 0);
    }
    return address__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  address.cljs$lang$maxFixedArity = 1;
  address.cljs$lang$applyTo = function(arglist__100336) {
    var opts__7119__auto__ = cljs.core.first(arglist__100336);
    var children__7120__auto__ = cljs.core.rest(arglist__100336);
    return address__delegate(opts__7119__auto__, children__7120__auto__);
  };
  address.cljs$core$IFn$_invoke$arity$variadic = address__delegate;
  return address;
}();
om.dom.area = function() {
  var area__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.area.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var area = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100337__i = 0, G__100337__a = new Array(arguments.length - 1);
      while (G__100337__i < G__100337__a.length) {
        G__100337__a[G__100337__i] = arguments[G__100337__i + 1];
        ++G__100337__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100337__a, 0);
    }
    return area__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  area.cljs$lang$maxFixedArity = 1;
  area.cljs$lang$applyTo = function(arglist__100338) {
    var opts__7119__auto__ = cljs.core.first(arglist__100338);
    var children__7120__auto__ = cljs.core.rest(arglist__100338);
    return area__delegate(opts__7119__auto__, children__7120__auto__);
  };
  area.cljs$core$IFn$_invoke$arity$variadic = area__delegate;
  return area;
}();
om.dom.article = function() {
  var article__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.article.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var article = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100339__i = 0, G__100339__a = new Array(arguments.length - 1);
      while (G__100339__i < G__100339__a.length) {
        G__100339__a[G__100339__i] = arguments[G__100339__i + 1];
        ++G__100339__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100339__a, 0);
    }
    return article__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  article.cljs$lang$maxFixedArity = 1;
  article.cljs$lang$applyTo = function(arglist__100340) {
    var opts__7119__auto__ = cljs.core.first(arglist__100340);
    var children__7120__auto__ = cljs.core.rest(arglist__100340);
    return article__delegate(opts__7119__auto__, children__7120__auto__);
  };
  article.cljs$core$IFn$_invoke$arity$variadic = article__delegate;
  return article;
}();
om.dom.aside = function() {
  var aside__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.aside.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var aside = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100341__i = 0, G__100341__a = new Array(arguments.length - 1);
      while (G__100341__i < G__100341__a.length) {
        G__100341__a[G__100341__i] = arguments[G__100341__i + 1];
        ++G__100341__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100341__a, 0);
    }
    return aside__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  aside.cljs$lang$maxFixedArity = 1;
  aside.cljs$lang$applyTo = function(arglist__100342) {
    var opts__7119__auto__ = cljs.core.first(arglist__100342);
    var children__7120__auto__ = cljs.core.rest(arglist__100342);
    return aside__delegate(opts__7119__auto__, children__7120__auto__);
  };
  aside.cljs$core$IFn$_invoke$arity$variadic = aside__delegate;
  return aside;
}();
om.dom.audio = function() {
  var audio__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.audio.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var audio = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100343__i = 0, G__100343__a = new Array(arguments.length - 1);
      while (G__100343__i < G__100343__a.length) {
        G__100343__a[G__100343__i] = arguments[G__100343__i + 1];
        ++G__100343__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100343__a, 0);
    }
    return audio__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  audio.cljs$lang$maxFixedArity = 1;
  audio.cljs$lang$applyTo = function(arglist__100344) {
    var opts__7119__auto__ = cljs.core.first(arglist__100344);
    var children__7120__auto__ = cljs.core.rest(arglist__100344);
    return audio__delegate(opts__7119__auto__, children__7120__auto__);
  };
  audio.cljs$core$IFn$_invoke$arity$variadic = audio__delegate;
  return audio;
}();
om.dom.b = function() {
  var b__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.b.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var b = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100345__i = 0, G__100345__a = new Array(arguments.length - 1);
      while (G__100345__i < G__100345__a.length) {
        G__100345__a[G__100345__i] = arguments[G__100345__i + 1];
        ++G__100345__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100345__a, 0);
    }
    return b__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  b.cljs$lang$maxFixedArity = 1;
  b.cljs$lang$applyTo = function(arglist__100346) {
    var opts__7119__auto__ = cljs.core.first(arglist__100346);
    var children__7120__auto__ = cljs.core.rest(arglist__100346);
    return b__delegate(opts__7119__auto__, children__7120__auto__);
  };
  b.cljs$core$IFn$_invoke$arity$variadic = b__delegate;
  return b;
}();
om.dom.base = function() {
  var base__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.base.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var base = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100347__i = 0, G__100347__a = new Array(arguments.length - 1);
      while (G__100347__i < G__100347__a.length) {
        G__100347__a[G__100347__i] = arguments[G__100347__i + 1];
        ++G__100347__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100347__a, 0);
    }
    return base__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  base.cljs$lang$maxFixedArity = 1;
  base.cljs$lang$applyTo = function(arglist__100348) {
    var opts__7119__auto__ = cljs.core.first(arglist__100348);
    var children__7120__auto__ = cljs.core.rest(arglist__100348);
    return base__delegate(opts__7119__auto__, children__7120__auto__);
  };
  base.cljs$core$IFn$_invoke$arity$variadic = base__delegate;
  return base;
}();
om.dom.bdi = function() {
  var bdi__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.bdi.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var bdi = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100349__i = 0, G__100349__a = new Array(arguments.length - 1);
      while (G__100349__i < G__100349__a.length) {
        G__100349__a[G__100349__i] = arguments[G__100349__i + 1];
        ++G__100349__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100349__a, 0);
    }
    return bdi__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  bdi.cljs$lang$maxFixedArity = 1;
  bdi.cljs$lang$applyTo = function(arglist__100350) {
    var opts__7119__auto__ = cljs.core.first(arglist__100350);
    var children__7120__auto__ = cljs.core.rest(arglist__100350);
    return bdi__delegate(opts__7119__auto__, children__7120__auto__);
  };
  bdi.cljs$core$IFn$_invoke$arity$variadic = bdi__delegate;
  return bdi;
}();
om.dom.bdo = function() {
  var bdo__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.bdo.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var bdo = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100351__i = 0, G__100351__a = new Array(arguments.length - 1);
      while (G__100351__i < G__100351__a.length) {
        G__100351__a[G__100351__i] = arguments[G__100351__i + 1];
        ++G__100351__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100351__a, 0);
    }
    return bdo__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  bdo.cljs$lang$maxFixedArity = 1;
  bdo.cljs$lang$applyTo = function(arglist__100352) {
    var opts__7119__auto__ = cljs.core.first(arglist__100352);
    var children__7120__auto__ = cljs.core.rest(arglist__100352);
    return bdo__delegate(opts__7119__auto__, children__7120__auto__);
  };
  bdo.cljs$core$IFn$_invoke$arity$variadic = bdo__delegate;
  return bdo;
}();
om.dom.big = function() {
  var big__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.big.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var big = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100353__i = 0, G__100353__a = new Array(arguments.length - 1);
      while (G__100353__i < G__100353__a.length) {
        G__100353__a[G__100353__i] = arguments[G__100353__i + 1];
        ++G__100353__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100353__a, 0);
    }
    return big__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  big.cljs$lang$maxFixedArity = 1;
  big.cljs$lang$applyTo = function(arglist__100354) {
    var opts__7119__auto__ = cljs.core.first(arglist__100354);
    var children__7120__auto__ = cljs.core.rest(arglist__100354);
    return big__delegate(opts__7119__auto__, children__7120__auto__);
  };
  big.cljs$core$IFn$_invoke$arity$variadic = big__delegate;
  return big;
}();
om.dom.blockquote = function() {
  var blockquote__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.blockquote.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var blockquote = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100355__i = 0, G__100355__a = new Array(arguments.length - 1);
      while (G__100355__i < G__100355__a.length) {
        G__100355__a[G__100355__i] = arguments[G__100355__i + 1];
        ++G__100355__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100355__a, 0);
    }
    return blockquote__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  blockquote.cljs$lang$maxFixedArity = 1;
  blockquote.cljs$lang$applyTo = function(arglist__100356) {
    var opts__7119__auto__ = cljs.core.first(arglist__100356);
    var children__7120__auto__ = cljs.core.rest(arglist__100356);
    return blockquote__delegate(opts__7119__auto__, children__7120__auto__);
  };
  blockquote.cljs$core$IFn$_invoke$arity$variadic = blockquote__delegate;
  return blockquote;
}();
om.dom.body = function() {
  var body__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.body.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var body = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100357__i = 0, G__100357__a = new Array(arguments.length - 1);
      while (G__100357__i < G__100357__a.length) {
        G__100357__a[G__100357__i] = arguments[G__100357__i + 1];
        ++G__100357__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100357__a, 0);
    }
    return body__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  body.cljs$lang$maxFixedArity = 1;
  body.cljs$lang$applyTo = function(arglist__100358) {
    var opts__7119__auto__ = cljs.core.first(arglist__100358);
    var children__7120__auto__ = cljs.core.rest(arglist__100358);
    return body__delegate(opts__7119__auto__, children__7120__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
om.dom.br = function() {
  var br__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.br.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var br = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100359__i = 0, G__100359__a = new Array(arguments.length - 1);
      while (G__100359__i < G__100359__a.length) {
        G__100359__a[G__100359__i] = arguments[G__100359__i + 1];
        ++G__100359__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100359__a, 0);
    }
    return br__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  br.cljs$lang$maxFixedArity = 1;
  br.cljs$lang$applyTo = function(arglist__100360) {
    var opts__7119__auto__ = cljs.core.first(arglist__100360);
    var children__7120__auto__ = cljs.core.rest(arglist__100360);
    return br__delegate(opts__7119__auto__, children__7120__auto__);
  };
  br.cljs$core$IFn$_invoke$arity$variadic = br__delegate;
  return br;
}();
om.dom.button = function() {
  var button__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.button.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var button = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100361__i = 0, G__100361__a = new Array(arguments.length - 1);
      while (G__100361__i < G__100361__a.length) {
        G__100361__a[G__100361__i] = arguments[G__100361__i + 1];
        ++G__100361__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100361__a, 0);
    }
    return button__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  button.cljs$lang$maxFixedArity = 1;
  button.cljs$lang$applyTo = function(arglist__100362) {
    var opts__7119__auto__ = cljs.core.first(arglist__100362);
    var children__7120__auto__ = cljs.core.rest(arglist__100362);
    return button__delegate(opts__7119__auto__, children__7120__auto__);
  };
  button.cljs$core$IFn$_invoke$arity$variadic = button__delegate;
  return button;
}();
om.dom.canvas = function() {
  var canvas__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.canvas.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var canvas = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100363__i = 0, G__100363__a = new Array(arguments.length - 1);
      while (G__100363__i < G__100363__a.length) {
        G__100363__a[G__100363__i] = arguments[G__100363__i + 1];
        ++G__100363__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100363__a, 0);
    }
    return canvas__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  canvas.cljs$lang$maxFixedArity = 1;
  canvas.cljs$lang$applyTo = function(arglist__100364) {
    var opts__7119__auto__ = cljs.core.first(arglist__100364);
    var children__7120__auto__ = cljs.core.rest(arglist__100364);
    return canvas__delegate(opts__7119__auto__, children__7120__auto__);
  };
  canvas.cljs$core$IFn$_invoke$arity$variadic = canvas__delegate;
  return canvas;
}();
om.dom.caption = function() {
  var caption__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.caption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var caption = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100365__i = 0, G__100365__a = new Array(arguments.length - 1);
      while (G__100365__i < G__100365__a.length) {
        G__100365__a[G__100365__i] = arguments[G__100365__i + 1];
        ++G__100365__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100365__a, 0);
    }
    return caption__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  caption.cljs$lang$maxFixedArity = 1;
  caption.cljs$lang$applyTo = function(arglist__100366) {
    var opts__7119__auto__ = cljs.core.first(arglist__100366);
    var children__7120__auto__ = cljs.core.rest(arglist__100366);
    return caption__delegate(opts__7119__auto__, children__7120__auto__);
  };
  caption.cljs$core$IFn$_invoke$arity$variadic = caption__delegate;
  return caption;
}();
om.dom.cite = function() {
  var cite__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.cite.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var cite = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100367__i = 0, G__100367__a = new Array(arguments.length - 1);
      while (G__100367__i < G__100367__a.length) {
        G__100367__a[G__100367__i] = arguments[G__100367__i + 1];
        ++G__100367__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100367__a, 0);
    }
    return cite__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  cite.cljs$lang$maxFixedArity = 1;
  cite.cljs$lang$applyTo = function(arglist__100368) {
    var opts__7119__auto__ = cljs.core.first(arglist__100368);
    var children__7120__auto__ = cljs.core.rest(arglist__100368);
    return cite__delegate(opts__7119__auto__, children__7120__auto__);
  };
  cite.cljs$core$IFn$_invoke$arity$variadic = cite__delegate;
  return cite;
}();
om.dom.code = function() {
  var code__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.code.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var code = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100369__i = 0, G__100369__a = new Array(arguments.length - 1);
      while (G__100369__i < G__100369__a.length) {
        G__100369__a[G__100369__i] = arguments[G__100369__i + 1];
        ++G__100369__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100369__a, 0);
    }
    return code__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  code.cljs$lang$maxFixedArity = 1;
  code.cljs$lang$applyTo = function(arglist__100370) {
    var opts__7119__auto__ = cljs.core.first(arglist__100370);
    var children__7120__auto__ = cljs.core.rest(arglist__100370);
    return code__delegate(opts__7119__auto__, children__7120__auto__);
  };
  code.cljs$core$IFn$_invoke$arity$variadic = code__delegate;
  return code;
}();
om.dom.col = function() {
  var col__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.col.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var col = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100371__i = 0, G__100371__a = new Array(arguments.length - 1);
      while (G__100371__i < G__100371__a.length) {
        G__100371__a[G__100371__i] = arguments[G__100371__i + 1];
        ++G__100371__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100371__a, 0);
    }
    return col__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  col.cljs$lang$maxFixedArity = 1;
  col.cljs$lang$applyTo = function(arglist__100372) {
    var opts__7119__auto__ = cljs.core.first(arglist__100372);
    var children__7120__auto__ = cljs.core.rest(arglist__100372);
    return col__delegate(opts__7119__auto__, children__7120__auto__);
  };
  col.cljs$core$IFn$_invoke$arity$variadic = col__delegate;
  return col;
}();
om.dom.colgroup = function() {
  var colgroup__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.colgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var colgroup = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100373__i = 0, G__100373__a = new Array(arguments.length - 1);
      while (G__100373__i < G__100373__a.length) {
        G__100373__a[G__100373__i] = arguments[G__100373__i + 1];
        ++G__100373__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100373__a, 0);
    }
    return colgroup__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  colgroup.cljs$lang$maxFixedArity = 1;
  colgroup.cljs$lang$applyTo = function(arglist__100374) {
    var opts__7119__auto__ = cljs.core.first(arglist__100374);
    var children__7120__auto__ = cljs.core.rest(arglist__100374);
    return colgroup__delegate(opts__7119__auto__, children__7120__auto__);
  };
  colgroup.cljs$core$IFn$_invoke$arity$variadic = colgroup__delegate;
  return colgroup;
}();
om.dom.data = function() {
  var data__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.data.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var data = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100375__i = 0, G__100375__a = new Array(arguments.length - 1);
      while (G__100375__i < G__100375__a.length) {
        G__100375__a[G__100375__i] = arguments[G__100375__i + 1];
        ++G__100375__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100375__a, 0);
    }
    return data__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  data.cljs$lang$maxFixedArity = 1;
  data.cljs$lang$applyTo = function(arglist__100376) {
    var opts__7119__auto__ = cljs.core.first(arglist__100376);
    var children__7120__auto__ = cljs.core.rest(arglist__100376);
    return data__delegate(opts__7119__auto__, children__7120__auto__);
  };
  data.cljs$core$IFn$_invoke$arity$variadic = data__delegate;
  return data;
}();
om.dom.datalist = function() {
  var datalist__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.datalist.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var datalist = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100377__i = 0, G__100377__a = new Array(arguments.length - 1);
      while (G__100377__i < G__100377__a.length) {
        G__100377__a[G__100377__i] = arguments[G__100377__i + 1];
        ++G__100377__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100377__a, 0);
    }
    return datalist__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  datalist.cljs$lang$maxFixedArity = 1;
  datalist.cljs$lang$applyTo = function(arglist__100378) {
    var opts__7119__auto__ = cljs.core.first(arglist__100378);
    var children__7120__auto__ = cljs.core.rest(arglist__100378);
    return datalist__delegate(opts__7119__auto__, children__7120__auto__);
  };
  datalist.cljs$core$IFn$_invoke$arity$variadic = datalist__delegate;
  return datalist;
}();
om.dom.dd = function() {
  var dd__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.dd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var dd = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100379__i = 0, G__100379__a = new Array(arguments.length - 1);
      while (G__100379__i < G__100379__a.length) {
        G__100379__a[G__100379__i] = arguments[G__100379__i + 1];
        ++G__100379__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100379__a, 0);
    }
    return dd__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  dd.cljs$lang$maxFixedArity = 1;
  dd.cljs$lang$applyTo = function(arglist__100380) {
    var opts__7119__auto__ = cljs.core.first(arglist__100380);
    var children__7120__auto__ = cljs.core.rest(arglist__100380);
    return dd__delegate(opts__7119__auto__, children__7120__auto__);
  };
  dd.cljs$core$IFn$_invoke$arity$variadic = dd__delegate;
  return dd;
}();
om.dom.del = function() {
  var del__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.del.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var del = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100381__i = 0, G__100381__a = new Array(arguments.length - 1);
      while (G__100381__i < G__100381__a.length) {
        G__100381__a[G__100381__i] = arguments[G__100381__i + 1];
        ++G__100381__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100381__a, 0);
    }
    return del__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  del.cljs$lang$maxFixedArity = 1;
  del.cljs$lang$applyTo = function(arglist__100382) {
    var opts__7119__auto__ = cljs.core.first(arglist__100382);
    var children__7120__auto__ = cljs.core.rest(arglist__100382);
    return del__delegate(opts__7119__auto__, children__7120__auto__);
  };
  del.cljs$core$IFn$_invoke$arity$variadic = del__delegate;
  return del;
}();
om.dom.dfn = function() {
  var dfn__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.dfn.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var dfn = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100383__i = 0, G__100383__a = new Array(arguments.length - 1);
      while (G__100383__i < G__100383__a.length) {
        G__100383__a[G__100383__i] = arguments[G__100383__i + 1];
        ++G__100383__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100383__a, 0);
    }
    return dfn__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  dfn.cljs$lang$maxFixedArity = 1;
  dfn.cljs$lang$applyTo = function(arglist__100384) {
    var opts__7119__auto__ = cljs.core.first(arglist__100384);
    var children__7120__auto__ = cljs.core.rest(arglist__100384);
    return dfn__delegate(opts__7119__auto__, children__7120__auto__);
  };
  dfn.cljs$core$IFn$_invoke$arity$variadic = dfn__delegate;
  return dfn;
}();
om.dom.div = function() {
  var div__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.div.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var div = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100385__i = 0, G__100385__a = new Array(arguments.length - 1);
      while (G__100385__i < G__100385__a.length) {
        G__100385__a[G__100385__i] = arguments[G__100385__i + 1];
        ++G__100385__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100385__a, 0);
    }
    return div__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  div.cljs$lang$maxFixedArity = 1;
  div.cljs$lang$applyTo = function(arglist__100386) {
    var opts__7119__auto__ = cljs.core.first(arglist__100386);
    var children__7120__auto__ = cljs.core.rest(arglist__100386);
    return div__delegate(opts__7119__auto__, children__7120__auto__);
  };
  div.cljs$core$IFn$_invoke$arity$variadic = div__delegate;
  return div;
}();
om.dom.dl = function() {
  var dl__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.dl.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var dl = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100387__i = 0, G__100387__a = new Array(arguments.length - 1);
      while (G__100387__i < G__100387__a.length) {
        G__100387__a[G__100387__i] = arguments[G__100387__i + 1];
        ++G__100387__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100387__a, 0);
    }
    return dl__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  dl.cljs$lang$maxFixedArity = 1;
  dl.cljs$lang$applyTo = function(arglist__100388) {
    var opts__7119__auto__ = cljs.core.first(arglist__100388);
    var children__7120__auto__ = cljs.core.rest(arglist__100388);
    return dl__delegate(opts__7119__auto__, children__7120__auto__);
  };
  dl.cljs$core$IFn$_invoke$arity$variadic = dl__delegate;
  return dl;
}();
om.dom.dt = function() {
  var dt__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.dt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var dt = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100389__i = 0, G__100389__a = new Array(arguments.length - 1);
      while (G__100389__i < G__100389__a.length) {
        G__100389__a[G__100389__i] = arguments[G__100389__i + 1];
        ++G__100389__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100389__a, 0);
    }
    return dt__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  dt.cljs$lang$maxFixedArity = 1;
  dt.cljs$lang$applyTo = function(arglist__100390) {
    var opts__7119__auto__ = cljs.core.first(arglist__100390);
    var children__7120__auto__ = cljs.core.rest(arglist__100390);
    return dt__delegate(opts__7119__auto__, children__7120__auto__);
  };
  dt.cljs$core$IFn$_invoke$arity$variadic = dt__delegate;
  return dt;
}();
om.dom.em = function() {
  var em__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.em.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var em = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100391__i = 0, G__100391__a = new Array(arguments.length - 1);
      while (G__100391__i < G__100391__a.length) {
        G__100391__a[G__100391__i] = arguments[G__100391__i + 1];
        ++G__100391__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100391__a, 0);
    }
    return em__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  em.cljs$lang$maxFixedArity = 1;
  em.cljs$lang$applyTo = function(arglist__100392) {
    var opts__7119__auto__ = cljs.core.first(arglist__100392);
    var children__7120__auto__ = cljs.core.rest(arglist__100392);
    return em__delegate(opts__7119__auto__, children__7120__auto__);
  };
  em.cljs$core$IFn$_invoke$arity$variadic = em__delegate;
  return em;
}();
om.dom.embed = function() {
  var embed__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.embed.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var embed = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100393__i = 0, G__100393__a = new Array(arguments.length - 1);
      while (G__100393__i < G__100393__a.length) {
        G__100393__a[G__100393__i] = arguments[G__100393__i + 1];
        ++G__100393__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100393__a, 0);
    }
    return embed__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  embed.cljs$lang$maxFixedArity = 1;
  embed.cljs$lang$applyTo = function(arglist__100394) {
    var opts__7119__auto__ = cljs.core.first(arglist__100394);
    var children__7120__auto__ = cljs.core.rest(arglist__100394);
    return embed__delegate(opts__7119__auto__, children__7120__auto__);
  };
  embed.cljs$core$IFn$_invoke$arity$variadic = embed__delegate;
  return embed;
}();
om.dom.fieldset = function() {
  var fieldset__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.fieldset.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var fieldset = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100395__i = 0, G__100395__a = new Array(arguments.length - 1);
      while (G__100395__i < G__100395__a.length) {
        G__100395__a[G__100395__i] = arguments[G__100395__i + 1];
        ++G__100395__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100395__a, 0);
    }
    return fieldset__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  fieldset.cljs$lang$maxFixedArity = 1;
  fieldset.cljs$lang$applyTo = function(arglist__100396) {
    var opts__7119__auto__ = cljs.core.first(arglist__100396);
    var children__7120__auto__ = cljs.core.rest(arglist__100396);
    return fieldset__delegate(opts__7119__auto__, children__7120__auto__);
  };
  fieldset.cljs$core$IFn$_invoke$arity$variadic = fieldset__delegate;
  return fieldset;
}();
om.dom.figcaption = function() {
  var figcaption__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.figcaption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var figcaption = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100397__i = 0, G__100397__a = new Array(arguments.length - 1);
      while (G__100397__i < G__100397__a.length) {
        G__100397__a[G__100397__i] = arguments[G__100397__i + 1];
        ++G__100397__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100397__a, 0);
    }
    return figcaption__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  figcaption.cljs$lang$maxFixedArity = 1;
  figcaption.cljs$lang$applyTo = function(arglist__100398) {
    var opts__7119__auto__ = cljs.core.first(arglist__100398);
    var children__7120__auto__ = cljs.core.rest(arglist__100398);
    return figcaption__delegate(opts__7119__auto__, children__7120__auto__);
  };
  figcaption.cljs$core$IFn$_invoke$arity$variadic = figcaption__delegate;
  return figcaption;
}();
om.dom.figure = function() {
  var figure__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.figure.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var figure = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100399__i = 0, G__100399__a = new Array(arguments.length - 1);
      while (G__100399__i < G__100399__a.length) {
        G__100399__a[G__100399__i] = arguments[G__100399__i + 1];
        ++G__100399__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100399__a, 0);
    }
    return figure__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  figure.cljs$lang$maxFixedArity = 1;
  figure.cljs$lang$applyTo = function(arglist__100400) {
    var opts__7119__auto__ = cljs.core.first(arglist__100400);
    var children__7120__auto__ = cljs.core.rest(arglist__100400);
    return figure__delegate(opts__7119__auto__, children__7120__auto__);
  };
  figure.cljs$core$IFn$_invoke$arity$variadic = figure__delegate;
  return figure;
}();
om.dom.footer = function() {
  var footer__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.footer.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var footer = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100401__i = 0, G__100401__a = new Array(arguments.length - 1);
      while (G__100401__i < G__100401__a.length) {
        G__100401__a[G__100401__i] = arguments[G__100401__i + 1];
        ++G__100401__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100401__a, 0);
    }
    return footer__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  footer.cljs$lang$maxFixedArity = 1;
  footer.cljs$lang$applyTo = function(arglist__100402) {
    var opts__7119__auto__ = cljs.core.first(arglist__100402);
    var children__7120__auto__ = cljs.core.rest(arglist__100402);
    return footer__delegate(opts__7119__auto__, children__7120__auto__);
  };
  footer.cljs$core$IFn$_invoke$arity$variadic = footer__delegate;
  return footer;
}();
om.dom.form = function() {
  var form__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.form.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var form = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100403__i = 0, G__100403__a = new Array(arguments.length - 1);
      while (G__100403__i < G__100403__a.length) {
        G__100403__a[G__100403__i] = arguments[G__100403__i + 1];
        ++G__100403__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100403__a, 0);
    }
    return form__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  form.cljs$lang$maxFixedArity = 1;
  form.cljs$lang$applyTo = function(arglist__100404) {
    var opts__7119__auto__ = cljs.core.first(arglist__100404);
    var children__7120__auto__ = cljs.core.rest(arglist__100404);
    return form__delegate(opts__7119__auto__, children__7120__auto__);
  };
  form.cljs$core$IFn$_invoke$arity$variadic = form__delegate;
  return form;
}();
om.dom.h1 = function() {
  var h1__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.h1.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var h1 = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100405__i = 0, G__100405__a = new Array(arguments.length - 1);
      while (G__100405__i < G__100405__a.length) {
        G__100405__a[G__100405__i] = arguments[G__100405__i + 1];
        ++G__100405__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100405__a, 0);
    }
    return h1__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  h1.cljs$lang$maxFixedArity = 1;
  h1.cljs$lang$applyTo = function(arglist__100406) {
    var opts__7119__auto__ = cljs.core.first(arglist__100406);
    var children__7120__auto__ = cljs.core.rest(arglist__100406);
    return h1__delegate(opts__7119__auto__, children__7120__auto__);
  };
  h1.cljs$core$IFn$_invoke$arity$variadic = h1__delegate;
  return h1;
}();
om.dom.h2 = function() {
  var h2__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.h2.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var h2 = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100407__i = 0, G__100407__a = new Array(arguments.length - 1);
      while (G__100407__i < G__100407__a.length) {
        G__100407__a[G__100407__i] = arguments[G__100407__i + 1];
        ++G__100407__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100407__a, 0);
    }
    return h2__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  h2.cljs$lang$maxFixedArity = 1;
  h2.cljs$lang$applyTo = function(arglist__100408) {
    var opts__7119__auto__ = cljs.core.first(arglist__100408);
    var children__7120__auto__ = cljs.core.rest(arglist__100408);
    return h2__delegate(opts__7119__auto__, children__7120__auto__);
  };
  h2.cljs$core$IFn$_invoke$arity$variadic = h2__delegate;
  return h2;
}();
om.dom.h3 = function() {
  var h3__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.h3.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var h3 = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100409__i = 0, G__100409__a = new Array(arguments.length - 1);
      while (G__100409__i < G__100409__a.length) {
        G__100409__a[G__100409__i] = arguments[G__100409__i + 1];
        ++G__100409__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100409__a, 0);
    }
    return h3__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  h3.cljs$lang$maxFixedArity = 1;
  h3.cljs$lang$applyTo = function(arglist__100410) {
    var opts__7119__auto__ = cljs.core.first(arglist__100410);
    var children__7120__auto__ = cljs.core.rest(arglist__100410);
    return h3__delegate(opts__7119__auto__, children__7120__auto__);
  };
  h3.cljs$core$IFn$_invoke$arity$variadic = h3__delegate;
  return h3;
}();
om.dom.h4 = function() {
  var h4__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.h4.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var h4 = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100411__i = 0, G__100411__a = new Array(arguments.length - 1);
      while (G__100411__i < G__100411__a.length) {
        G__100411__a[G__100411__i] = arguments[G__100411__i + 1];
        ++G__100411__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100411__a, 0);
    }
    return h4__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  h4.cljs$lang$maxFixedArity = 1;
  h4.cljs$lang$applyTo = function(arglist__100412) {
    var opts__7119__auto__ = cljs.core.first(arglist__100412);
    var children__7120__auto__ = cljs.core.rest(arglist__100412);
    return h4__delegate(opts__7119__auto__, children__7120__auto__);
  };
  h4.cljs$core$IFn$_invoke$arity$variadic = h4__delegate;
  return h4;
}();
om.dom.h5 = function() {
  var h5__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.h5.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var h5 = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100413__i = 0, G__100413__a = new Array(arguments.length - 1);
      while (G__100413__i < G__100413__a.length) {
        G__100413__a[G__100413__i] = arguments[G__100413__i + 1];
        ++G__100413__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100413__a, 0);
    }
    return h5__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  h5.cljs$lang$maxFixedArity = 1;
  h5.cljs$lang$applyTo = function(arglist__100414) {
    var opts__7119__auto__ = cljs.core.first(arglist__100414);
    var children__7120__auto__ = cljs.core.rest(arglist__100414);
    return h5__delegate(opts__7119__auto__, children__7120__auto__);
  };
  h5.cljs$core$IFn$_invoke$arity$variadic = h5__delegate;
  return h5;
}();
om.dom.h6 = function() {
  var h6__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.h6.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var h6 = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100415__i = 0, G__100415__a = new Array(arguments.length - 1);
      while (G__100415__i < G__100415__a.length) {
        G__100415__a[G__100415__i] = arguments[G__100415__i + 1];
        ++G__100415__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100415__a, 0);
    }
    return h6__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  h6.cljs$lang$maxFixedArity = 1;
  h6.cljs$lang$applyTo = function(arglist__100416) {
    var opts__7119__auto__ = cljs.core.first(arglist__100416);
    var children__7120__auto__ = cljs.core.rest(arglist__100416);
    return h6__delegate(opts__7119__auto__, children__7120__auto__);
  };
  h6.cljs$core$IFn$_invoke$arity$variadic = h6__delegate;
  return h6;
}();
om.dom.head = function() {
  var head__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.head.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var head = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100417__i = 0, G__100417__a = new Array(arguments.length - 1);
      while (G__100417__i < G__100417__a.length) {
        G__100417__a[G__100417__i] = arguments[G__100417__i + 1];
        ++G__100417__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100417__a, 0);
    }
    return head__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  head.cljs$lang$maxFixedArity = 1;
  head.cljs$lang$applyTo = function(arglist__100418) {
    var opts__7119__auto__ = cljs.core.first(arglist__100418);
    var children__7120__auto__ = cljs.core.rest(arglist__100418);
    return head__delegate(opts__7119__auto__, children__7120__auto__);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
om.dom.header = function() {
  var header__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.header.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var header = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100419__i = 0, G__100419__a = new Array(arguments.length - 1);
      while (G__100419__i < G__100419__a.length) {
        G__100419__a[G__100419__i] = arguments[G__100419__i + 1];
        ++G__100419__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100419__a, 0);
    }
    return header__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  header.cljs$lang$maxFixedArity = 1;
  header.cljs$lang$applyTo = function(arglist__100420) {
    var opts__7119__auto__ = cljs.core.first(arglist__100420);
    var children__7120__auto__ = cljs.core.rest(arglist__100420);
    return header__delegate(opts__7119__auto__, children__7120__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
om.dom.hr = function() {
  var hr__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.hr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var hr = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100421__i = 0, G__100421__a = new Array(arguments.length - 1);
      while (G__100421__i < G__100421__a.length) {
        G__100421__a[G__100421__i] = arguments[G__100421__i + 1];
        ++G__100421__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100421__a, 0);
    }
    return hr__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  hr.cljs$lang$maxFixedArity = 1;
  hr.cljs$lang$applyTo = function(arglist__100422) {
    var opts__7119__auto__ = cljs.core.first(arglist__100422);
    var children__7120__auto__ = cljs.core.rest(arglist__100422);
    return hr__delegate(opts__7119__auto__, children__7120__auto__);
  };
  hr.cljs$core$IFn$_invoke$arity$variadic = hr__delegate;
  return hr;
}();
om.dom.html = function() {
  var html__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.html.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var html = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100423__i = 0, G__100423__a = new Array(arguments.length - 1);
      while (G__100423__i < G__100423__a.length) {
        G__100423__a[G__100423__i] = arguments[G__100423__i + 1];
        ++G__100423__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100423__a, 0);
    }
    return html__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  html.cljs$lang$maxFixedArity = 1;
  html.cljs$lang$applyTo = function(arglist__100424) {
    var opts__7119__auto__ = cljs.core.first(arglist__100424);
    var children__7120__auto__ = cljs.core.rest(arglist__100424);
    return html__delegate(opts__7119__auto__, children__7120__auto__);
  };
  html.cljs$core$IFn$_invoke$arity$variadic = html__delegate;
  return html;
}();
om.dom.i = function() {
  var i__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.i.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var i = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100425__i = 0, G__100425__a = new Array(arguments.length - 1);
      while (G__100425__i < G__100425__a.length) {
        G__100425__a[G__100425__i] = arguments[G__100425__i + 1];
        ++G__100425__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100425__a, 0);
    }
    return i__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  i.cljs$lang$maxFixedArity = 1;
  i.cljs$lang$applyTo = function(arglist__100426) {
    var opts__7119__auto__ = cljs.core.first(arglist__100426);
    var children__7120__auto__ = cljs.core.rest(arglist__100426);
    return i__delegate(opts__7119__auto__, children__7120__auto__);
  };
  i.cljs$core$IFn$_invoke$arity$variadic = i__delegate;
  return i;
}();
om.dom.iframe = function() {
  var iframe__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.iframe.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var iframe = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100427__i = 0, G__100427__a = new Array(arguments.length - 1);
      while (G__100427__i < G__100427__a.length) {
        G__100427__a[G__100427__i] = arguments[G__100427__i + 1];
        ++G__100427__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100427__a, 0);
    }
    return iframe__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  iframe.cljs$lang$maxFixedArity = 1;
  iframe.cljs$lang$applyTo = function(arglist__100428) {
    var opts__7119__auto__ = cljs.core.first(arglist__100428);
    var children__7120__auto__ = cljs.core.rest(arglist__100428);
    return iframe__delegate(opts__7119__auto__, children__7120__auto__);
  };
  iframe.cljs$core$IFn$_invoke$arity$variadic = iframe__delegate;
  return iframe;
}();
om.dom.img = function() {
  var img__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.img.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var img = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100429__i = 0, G__100429__a = new Array(arguments.length - 1);
      while (G__100429__i < G__100429__a.length) {
        G__100429__a[G__100429__i] = arguments[G__100429__i + 1];
        ++G__100429__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100429__a, 0);
    }
    return img__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  img.cljs$lang$maxFixedArity = 1;
  img.cljs$lang$applyTo = function(arglist__100430) {
    var opts__7119__auto__ = cljs.core.first(arglist__100430);
    var children__7120__auto__ = cljs.core.rest(arglist__100430);
    return img__delegate(opts__7119__auto__, children__7120__auto__);
  };
  img.cljs$core$IFn$_invoke$arity$variadic = img__delegate;
  return img;
}();
om.dom.ins = function() {
  var ins__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.ins.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var ins = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100431__i = 0, G__100431__a = new Array(arguments.length - 1);
      while (G__100431__i < G__100431__a.length) {
        G__100431__a[G__100431__i] = arguments[G__100431__i + 1];
        ++G__100431__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100431__a, 0);
    }
    return ins__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  ins.cljs$lang$maxFixedArity = 1;
  ins.cljs$lang$applyTo = function(arglist__100432) {
    var opts__7119__auto__ = cljs.core.first(arglist__100432);
    var children__7120__auto__ = cljs.core.rest(arglist__100432);
    return ins__delegate(opts__7119__auto__, children__7120__auto__);
  };
  ins.cljs$core$IFn$_invoke$arity$variadic = ins__delegate;
  return ins;
}();
om.dom.kbd = function() {
  var kbd__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.kbd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var kbd = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100433__i = 0, G__100433__a = new Array(arguments.length - 1);
      while (G__100433__i < G__100433__a.length) {
        G__100433__a[G__100433__i] = arguments[G__100433__i + 1];
        ++G__100433__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100433__a, 0);
    }
    return kbd__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  kbd.cljs$lang$maxFixedArity = 1;
  kbd.cljs$lang$applyTo = function(arglist__100434) {
    var opts__7119__auto__ = cljs.core.first(arglist__100434);
    var children__7120__auto__ = cljs.core.rest(arglist__100434);
    return kbd__delegate(opts__7119__auto__, children__7120__auto__);
  };
  kbd.cljs$core$IFn$_invoke$arity$variadic = kbd__delegate;
  return kbd;
}();
om.dom.keygen = function() {
  var keygen__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.keygen.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var keygen = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100435__i = 0, G__100435__a = new Array(arguments.length - 1);
      while (G__100435__i < G__100435__a.length) {
        G__100435__a[G__100435__i] = arguments[G__100435__i + 1];
        ++G__100435__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100435__a, 0);
    }
    return keygen__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  keygen.cljs$lang$maxFixedArity = 1;
  keygen.cljs$lang$applyTo = function(arglist__100436) {
    var opts__7119__auto__ = cljs.core.first(arglist__100436);
    var children__7120__auto__ = cljs.core.rest(arglist__100436);
    return keygen__delegate(opts__7119__auto__, children__7120__auto__);
  };
  keygen.cljs$core$IFn$_invoke$arity$variadic = keygen__delegate;
  return keygen;
}();
om.dom.label = function() {
  var label__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.label.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var label = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100437__i = 0, G__100437__a = new Array(arguments.length - 1);
      while (G__100437__i < G__100437__a.length) {
        G__100437__a[G__100437__i] = arguments[G__100437__i + 1];
        ++G__100437__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100437__a, 0);
    }
    return label__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  label.cljs$lang$maxFixedArity = 1;
  label.cljs$lang$applyTo = function(arglist__100438) {
    var opts__7119__auto__ = cljs.core.first(arglist__100438);
    var children__7120__auto__ = cljs.core.rest(arglist__100438);
    return label__delegate(opts__7119__auto__, children__7120__auto__);
  };
  label.cljs$core$IFn$_invoke$arity$variadic = label__delegate;
  return label;
}();
om.dom.legend = function() {
  var legend__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.legend.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var legend = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100439__i = 0, G__100439__a = new Array(arguments.length - 1);
      while (G__100439__i < G__100439__a.length) {
        G__100439__a[G__100439__i] = arguments[G__100439__i + 1];
        ++G__100439__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100439__a, 0);
    }
    return legend__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  legend.cljs$lang$maxFixedArity = 1;
  legend.cljs$lang$applyTo = function(arglist__100440) {
    var opts__7119__auto__ = cljs.core.first(arglist__100440);
    var children__7120__auto__ = cljs.core.rest(arglist__100440);
    return legend__delegate(opts__7119__auto__, children__7120__auto__);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
om.dom.li = function() {
  var li__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.li.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var li = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100441__i = 0, G__100441__a = new Array(arguments.length - 1);
      while (G__100441__i < G__100441__a.length) {
        G__100441__a[G__100441__i] = arguments[G__100441__i + 1];
        ++G__100441__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100441__a, 0);
    }
    return li__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  li.cljs$lang$maxFixedArity = 1;
  li.cljs$lang$applyTo = function(arglist__100442) {
    var opts__7119__auto__ = cljs.core.first(arglist__100442);
    var children__7120__auto__ = cljs.core.rest(arglist__100442);
    return li__delegate(opts__7119__auto__, children__7120__auto__);
  };
  li.cljs$core$IFn$_invoke$arity$variadic = li__delegate;
  return li;
}();
om.dom.link = function() {
  var link__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.link.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var link = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100443__i = 0, G__100443__a = new Array(arguments.length - 1);
      while (G__100443__i < G__100443__a.length) {
        G__100443__a[G__100443__i] = arguments[G__100443__i + 1];
        ++G__100443__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100443__a, 0);
    }
    return link__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  link.cljs$lang$maxFixedArity = 1;
  link.cljs$lang$applyTo = function(arglist__100444) {
    var opts__7119__auto__ = cljs.core.first(arglist__100444);
    var children__7120__auto__ = cljs.core.rest(arglist__100444);
    return link__delegate(opts__7119__auto__, children__7120__auto__);
  };
  link.cljs$core$IFn$_invoke$arity$variadic = link__delegate;
  return link;
}();
om.dom.main = function() {
  var main__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.main.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var main = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100445__i = 0, G__100445__a = new Array(arguments.length - 1);
      while (G__100445__i < G__100445__a.length) {
        G__100445__a[G__100445__i] = arguments[G__100445__i + 1];
        ++G__100445__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100445__a, 0);
    }
    return main__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  main.cljs$lang$maxFixedArity = 1;
  main.cljs$lang$applyTo = function(arglist__100446) {
    var opts__7119__auto__ = cljs.core.first(arglist__100446);
    var children__7120__auto__ = cljs.core.rest(arglist__100446);
    return main__delegate(opts__7119__auto__, children__7120__auto__);
  };
  main.cljs$core$IFn$_invoke$arity$variadic = main__delegate;
  return main;
}();
om.dom.map = function() {
  var map__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.map.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var map = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100447__i = 0, G__100447__a = new Array(arguments.length - 1);
      while (G__100447__i < G__100447__a.length) {
        G__100447__a[G__100447__i] = arguments[G__100447__i + 1];
        ++G__100447__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100447__a, 0);
    }
    return map__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  map.cljs$lang$maxFixedArity = 1;
  map.cljs$lang$applyTo = function(arglist__100448) {
    var opts__7119__auto__ = cljs.core.first(arglist__100448);
    var children__7120__auto__ = cljs.core.rest(arglist__100448);
    return map__delegate(opts__7119__auto__, children__7120__auto__);
  };
  map.cljs$core$IFn$_invoke$arity$variadic = map__delegate;
  return map;
}();
om.dom.mark = function() {
  var mark__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.mark.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var mark = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100449__i = 0, G__100449__a = new Array(arguments.length - 1);
      while (G__100449__i < G__100449__a.length) {
        G__100449__a[G__100449__i] = arguments[G__100449__i + 1];
        ++G__100449__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100449__a, 0);
    }
    return mark__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  mark.cljs$lang$maxFixedArity = 1;
  mark.cljs$lang$applyTo = function(arglist__100450) {
    var opts__7119__auto__ = cljs.core.first(arglist__100450);
    var children__7120__auto__ = cljs.core.rest(arglist__100450);
    return mark__delegate(opts__7119__auto__, children__7120__auto__);
  };
  mark.cljs$core$IFn$_invoke$arity$variadic = mark__delegate;
  return mark;
}();
om.dom.marquee = function() {
  var marquee__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.marquee.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var marquee = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100451__i = 0, G__100451__a = new Array(arguments.length - 1);
      while (G__100451__i < G__100451__a.length) {
        G__100451__a[G__100451__i] = arguments[G__100451__i + 1];
        ++G__100451__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100451__a, 0);
    }
    return marquee__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  marquee.cljs$lang$maxFixedArity = 1;
  marquee.cljs$lang$applyTo = function(arglist__100452) {
    var opts__7119__auto__ = cljs.core.first(arglist__100452);
    var children__7120__auto__ = cljs.core.rest(arglist__100452);
    return marquee__delegate(opts__7119__auto__, children__7120__auto__);
  };
  marquee.cljs$core$IFn$_invoke$arity$variadic = marquee__delegate;
  return marquee;
}();
om.dom.menu = function() {
  var menu__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.menu.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var menu = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100453__i = 0, G__100453__a = new Array(arguments.length - 1);
      while (G__100453__i < G__100453__a.length) {
        G__100453__a[G__100453__i] = arguments[G__100453__i + 1];
        ++G__100453__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100453__a, 0);
    }
    return menu__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  menu.cljs$lang$maxFixedArity = 1;
  menu.cljs$lang$applyTo = function(arglist__100454) {
    var opts__7119__auto__ = cljs.core.first(arglist__100454);
    var children__7120__auto__ = cljs.core.rest(arglist__100454);
    return menu__delegate(opts__7119__auto__, children__7120__auto__);
  };
  menu.cljs$core$IFn$_invoke$arity$variadic = menu__delegate;
  return menu;
}();
om.dom.menuitem = function() {
  var menuitem__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.menuitem.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var menuitem = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100455__i = 0, G__100455__a = new Array(arguments.length - 1);
      while (G__100455__i < G__100455__a.length) {
        G__100455__a[G__100455__i] = arguments[G__100455__i + 1];
        ++G__100455__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100455__a, 0);
    }
    return menuitem__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  menuitem.cljs$lang$maxFixedArity = 1;
  menuitem.cljs$lang$applyTo = function(arglist__100456) {
    var opts__7119__auto__ = cljs.core.first(arglist__100456);
    var children__7120__auto__ = cljs.core.rest(arglist__100456);
    return menuitem__delegate(opts__7119__auto__, children__7120__auto__);
  };
  menuitem.cljs$core$IFn$_invoke$arity$variadic = menuitem__delegate;
  return menuitem;
}();
om.dom.meta = function() {
  var meta__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.meta.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var meta = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100457__i = 0, G__100457__a = new Array(arguments.length - 1);
      while (G__100457__i < G__100457__a.length) {
        G__100457__a[G__100457__i] = arguments[G__100457__i + 1];
        ++G__100457__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100457__a, 0);
    }
    return meta__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  meta.cljs$lang$maxFixedArity = 1;
  meta.cljs$lang$applyTo = function(arglist__100458) {
    var opts__7119__auto__ = cljs.core.first(arglist__100458);
    var children__7120__auto__ = cljs.core.rest(arglist__100458);
    return meta__delegate(opts__7119__auto__, children__7120__auto__);
  };
  meta.cljs$core$IFn$_invoke$arity$variadic = meta__delegate;
  return meta;
}();
om.dom.meter = function() {
  var meter__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.meter.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var meter = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100459__i = 0, G__100459__a = new Array(arguments.length - 1);
      while (G__100459__i < G__100459__a.length) {
        G__100459__a[G__100459__i] = arguments[G__100459__i + 1];
        ++G__100459__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100459__a, 0);
    }
    return meter__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  meter.cljs$lang$maxFixedArity = 1;
  meter.cljs$lang$applyTo = function(arglist__100460) {
    var opts__7119__auto__ = cljs.core.first(arglist__100460);
    var children__7120__auto__ = cljs.core.rest(arglist__100460);
    return meter__delegate(opts__7119__auto__, children__7120__auto__);
  };
  meter.cljs$core$IFn$_invoke$arity$variadic = meter__delegate;
  return meter;
}();
om.dom.nav = function() {
  var nav__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.nav.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var nav = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100461__i = 0, G__100461__a = new Array(arguments.length - 1);
      while (G__100461__i < G__100461__a.length) {
        G__100461__a[G__100461__i] = arguments[G__100461__i + 1];
        ++G__100461__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100461__a, 0);
    }
    return nav__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  nav.cljs$lang$maxFixedArity = 1;
  nav.cljs$lang$applyTo = function(arglist__100462) {
    var opts__7119__auto__ = cljs.core.first(arglist__100462);
    var children__7120__auto__ = cljs.core.rest(arglist__100462);
    return nav__delegate(opts__7119__auto__, children__7120__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
om.dom.noscript = function() {
  var noscript__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.noscript.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var noscript = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100463__i = 0, G__100463__a = new Array(arguments.length - 1);
      while (G__100463__i < G__100463__a.length) {
        G__100463__a[G__100463__i] = arguments[G__100463__i + 1];
        ++G__100463__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100463__a, 0);
    }
    return noscript__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  noscript.cljs$lang$maxFixedArity = 1;
  noscript.cljs$lang$applyTo = function(arglist__100464) {
    var opts__7119__auto__ = cljs.core.first(arglist__100464);
    var children__7120__auto__ = cljs.core.rest(arglist__100464);
    return noscript__delegate(opts__7119__auto__, children__7120__auto__);
  };
  noscript.cljs$core$IFn$_invoke$arity$variadic = noscript__delegate;
  return noscript;
}();
om.dom.object = function() {
  var object__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.object.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var object = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100465__i = 0, G__100465__a = new Array(arguments.length - 1);
      while (G__100465__i < G__100465__a.length) {
        G__100465__a[G__100465__i] = arguments[G__100465__i + 1];
        ++G__100465__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100465__a, 0);
    }
    return object__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  object.cljs$lang$maxFixedArity = 1;
  object.cljs$lang$applyTo = function(arglist__100466) {
    var opts__7119__auto__ = cljs.core.first(arglist__100466);
    var children__7120__auto__ = cljs.core.rest(arglist__100466);
    return object__delegate(opts__7119__auto__, children__7120__auto__);
  };
  object.cljs$core$IFn$_invoke$arity$variadic = object__delegate;
  return object;
}();
om.dom.ol = function() {
  var ol__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.ol.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var ol = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100467__i = 0, G__100467__a = new Array(arguments.length - 1);
      while (G__100467__i < G__100467__a.length) {
        G__100467__a[G__100467__i] = arguments[G__100467__i + 1];
        ++G__100467__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100467__a, 0);
    }
    return ol__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  ol.cljs$lang$maxFixedArity = 1;
  ol.cljs$lang$applyTo = function(arglist__100468) {
    var opts__7119__auto__ = cljs.core.first(arglist__100468);
    var children__7120__auto__ = cljs.core.rest(arglist__100468);
    return ol__delegate(opts__7119__auto__, children__7120__auto__);
  };
  ol.cljs$core$IFn$_invoke$arity$variadic = ol__delegate;
  return ol;
}();
om.dom.optgroup = function() {
  var optgroup__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.optgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var optgroup = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100469__i = 0, G__100469__a = new Array(arguments.length - 1);
      while (G__100469__i < G__100469__a.length) {
        G__100469__a[G__100469__i] = arguments[G__100469__i + 1];
        ++G__100469__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100469__a, 0);
    }
    return optgroup__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  optgroup.cljs$lang$maxFixedArity = 1;
  optgroup.cljs$lang$applyTo = function(arglist__100470) {
    var opts__7119__auto__ = cljs.core.first(arglist__100470);
    var children__7120__auto__ = cljs.core.rest(arglist__100470);
    return optgroup__delegate(opts__7119__auto__, children__7120__auto__);
  };
  optgroup.cljs$core$IFn$_invoke$arity$variadic = optgroup__delegate;
  return optgroup;
}();
om.dom.output = function() {
  var output__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.output.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var output = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100471__i = 0, G__100471__a = new Array(arguments.length - 1);
      while (G__100471__i < G__100471__a.length) {
        G__100471__a[G__100471__i] = arguments[G__100471__i + 1];
        ++G__100471__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100471__a, 0);
    }
    return output__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  output.cljs$lang$maxFixedArity = 1;
  output.cljs$lang$applyTo = function(arglist__100472) {
    var opts__7119__auto__ = cljs.core.first(arglist__100472);
    var children__7120__auto__ = cljs.core.rest(arglist__100472);
    return output__delegate(opts__7119__auto__, children__7120__auto__);
  };
  output.cljs$core$IFn$_invoke$arity$variadic = output__delegate;
  return output;
}();
om.dom.p = function() {
  var p__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.p.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var p = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100473__i = 0, G__100473__a = new Array(arguments.length - 1);
      while (G__100473__i < G__100473__a.length) {
        G__100473__a[G__100473__i] = arguments[G__100473__i + 1];
        ++G__100473__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100473__a, 0);
    }
    return p__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  p.cljs$lang$maxFixedArity = 1;
  p.cljs$lang$applyTo = function(arglist__100474) {
    var opts__7119__auto__ = cljs.core.first(arglist__100474);
    var children__7120__auto__ = cljs.core.rest(arglist__100474);
    return p__delegate(opts__7119__auto__, children__7120__auto__);
  };
  p.cljs$core$IFn$_invoke$arity$variadic = p__delegate;
  return p;
}();
om.dom.param = function() {
  var param__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.param.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var param = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100475__i = 0, G__100475__a = new Array(arguments.length - 1);
      while (G__100475__i < G__100475__a.length) {
        G__100475__a[G__100475__i] = arguments[G__100475__i + 1];
        ++G__100475__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100475__a, 0);
    }
    return param__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  param.cljs$lang$maxFixedArity = 1;
  param.cljs$lang$applyTo = function(arglist__100476) {
    var opts__7119__auto__ = cljs.core.first(arglist__100476);
    var children__7120__auto__ = cljs.core.rest(arglist__100476);
    return param__delegate(opts__7119__auto__, children__7120__auto__);
  };
  param.cljs$core$IFn$_invoke$arity$variadic = param__delegate;
  return param;
}();
om.dom.pre = function() {
  var pre__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.pre.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var pre = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100477__i = 0, G__100477__a = new Array(arguments.length - 1);
      while (G__100477__i < G__100477__a.length) {
        G__100477__a[G__100477__i] = arguments[G__100477__i + 1];
        ++G__100477__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100477__a, 0);
    }
    return pre__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  pre.cljs$lang$maxFixedArity = 1;
  pre.cljs$lang$applyTo = function(arglist__100478) {
    var opts__7119__auto__ = cljs.core.first(arglist__100478);
    var children__7120__auto__ = cljs.core.rest(arglist__100478);
    return pre__delegate(opts__7119__auto__, children__7120__auto__);
  };
  pre.cljs$core$IFn$_invoke$arity$variadic = pre__delegate;
  return pre;
}();
om.dom.progress = function() {
  var progress__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.progress.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var progress = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100479__i = 0, G__100479__a = new Array(arguments.length - 1);
      while (G__100479__i < G__100479__a.length) {
        G__100479__a[G__100479__i] = arguments[G__100479__i + 1];
        ++G__100479__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100479__a, 0);
    }
    return progress__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  progress.cljs$lang$maxFixedArity = 1;
  progress.cljs$lang$applyTo = function(arglist__100480) {
    var opts__7119__auto__ = cljs.core.first(arglist__100480);
    var children__7120__auto__ = cljs.core.rest(arglist__100480);
    return progress__delegate(opts__7119__auto__, children__7120__auto__);
  };
  progress.cljs$core$IFn$_invoke$arity$variadic = progress__delegate;
  return progress;
}();
om.dom.q = function() {
  var q__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.q.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var q = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100481__i = 0, G__100481__a = new Array(arguments.length - 1);
      while (G__100481__i < G__100481__a.length) {
        G__100481__a[G__100481__i] = arguments[G__100481__i + 1];
        ++G__100481__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100481__a, 0);
    }
    return q__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  q.cljs$lang$maxFixedArity = 1;
  q.cljs$lang$applyTo = function(arglist__100482) {
    var opts__7119__auto__ = cljs.core.first(arglist__100482);
    var children__7120__auto__ = cljs.core.rest(arglist__100482);
    return q__delegate(opts__7119__auto__, children__7120__auto__);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
om.dom.rp = function() {
  var rp__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.rp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var rp = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100483__i = 0, G__100483__a = new Array(arguments.length - 1);
      while (G__100483__i < G__100483__a.length) {
        G__100483__a[G__100483__i] = arguments[G__100483__i + 1];
        ++G__100483__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100483__a, 0);
    }
    return rp__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  rp.cljs$lang$maxFixedArity = 1;
  rp.cljs$lang$applyTo = function(arglist__100484) {
    var opts__7119__auto__ = cljs.core.first(arglist__100484);
    var children__7120__auto__ = cljs.core.rest(arglist__100484);
    return rp__delegate(opts__7119__auto__, children__7120__auto__);
  };
  rp.cljs$core$IFn$_invoke$arity$variadic = rp__delegate;
  return rp;
}();
om.dom.rt = function() {
  var rt__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.rt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var rt = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100485__i = 0, G__100485__a = new Array(arguments.length - 1);
      while (G__100485__i < G__100485__a.length) {
        G__100485__a[G__100485__i] = arguments[G__100485__i + 1];
        ++G__100485__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100485__a, 0);
    }
    return rt__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  rt.cljs$lang$maxFixedArity = 1;
  rt.cljs$lang$applyTo = function(arglist__100486) {
    var opts__7119__auto__ = cljs.core.first(arglist__100486);
    var children__7120__auto__ = cljs.core.rest(arglist__100486);
    return rt__delegate(opts__7119__auto__, children__7120__auto__);
  };
  rt.cljs$core$IFn$_invoke$arity$variadic = rt__delegate;
  return rt;
}();
om.dom.ruby = function() {
  var ruby__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.ruby.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var ruby = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100487__i = 0, G__100487__a = new Array(arguments.length - 1);
      while (G__100487__i < G__100487__a.length) {
        G__100487__a[G__100487__i] = arguments[G__100487__i + 1];
        ++G__100487__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100487__a, 0);
    }
    return ruby__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  ruby.cljs$lang$maxFixedArity = 1;
  ruby.cljs$lang$applyTo = function(arglist__100488) {
    var opts__7119__auto__ = cljs.core.first(arglist__100488);
    var children__7120__auto__ = cljs.core.rest(arglist__100488);
    return ruby__delegate(opts__7119__auto__, children__7120__auto__);
  };
  ruby.cljs$core$IFn$_invoke$arity$variadic = ruby__delegate;
  return ruby;
}();
om.dom.s = function() {
  var s__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.s.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var s = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100489__i = 0, G__100489__a = new Array(arguments.length - 1);
      while (G__100489__i < G__100489__a.length) {
        G__100489__a[G__100489__i] = arguments[G__100489__i + 1];
        ++G__100489__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100489__a, 0);
    }
    return s__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  s.cljs$lang$maxFixedArity = 1;
  s.cljs$lang$applyTo = function(arglist__100490) {
    var opts__7119__auto__ = cljs.core.first(arglist__100490);
    var children__7120__auto__ = cljs.core.rest(arglist__100490);
    return s__delegate(opts__7119__auto__, children__7120__auto__);
  };
  s.cljs$core$IFn$_invoke$arity$variadic = s__delegate;
  return s;
}();
om.dom.samp = function() {
  var samp__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.samp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var samp = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100491__i = 0, G__100491__a = new Array(arguments.length - 1);
      while (G__100491__i < G__100491__a.length) {
        G__100491__a[G__100491__i] = arguments[G__100491__i + 1];
        ++G__100491__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100491__a, 0);
    }
    return samp__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  samp.cljs$lang$maxFixedArity = 1;
  samp.cljs$lang$applyTo = function(arglist__100492) {
    var opts__7119__auto__ = cljs.core.first(arglist__100492);
    var children__7120__auto__ = cljs.core.rest(arglist__100492);
    return samp__delegate(opts__7119__auto__, children__7120__auto__);
  };
  samp.cljs$core$IFn$_invoke$arity$variadic = samp__delegate;
  return samp;
}();
om.dom.script = function() {
  var script__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.script.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var script = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100493__i = 0, G__100493__a = new Array(arguments.length - 1);
      while (G__100493__i < G__100493__a.length) {
        G__100493__a[G__100493__i] = arguments[G__100493__i + 1];
        ++G__100493__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100493__a, 0);
    }
    return script__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  script.cljs$lang$maxFixedArity = 1;
  script.cljs$lang$applyTo = function(arglist__100494) {
    var opts__7119__auto__ = cljs.core.first(arglist__100494);
    var children__7120__auto__ = cljs.core.rest(arglist__100494);
    return script__delegate(opts__7119__auto__, children__7120__auto__);
  };
  script.cljs$core$IFn$_invoke$arity$variadic = script__delegate;
  return script;
}();
om.dom.section = function() {
  var section__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.section.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var section = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100495__i = 0, G__100495__a = new Array(arguments.length - 1);
      while (G__100495__i < G__100495__a.length) {
        G__100495__a[G__100495__i] = arguments[G__100495__i + 1];
        ++G__100495__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100495__a, 0);
    }
    return section__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  section.cljs$lang$maxFixedArity = 1;
  section.cljs$lang$applyTo = function(arglist__100496) {
    var opts__7119__auto__ = cljs.core.first(arglist__100496);
    var children__7120__auto__ = cljs.core.rest(arglist__100496);
    return section__delegate(opts__7119__auto__, children__7120__auto__);
  };
  section.cljs$core$IFn$_invoke$arity$variadic = section__delegate;
  return section;
}();
om.dom.select = function() {
  var select__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.select.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var select = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100497__i = 0, G__100497__a = new Array(arguments.length - 1);
      while (G__100497__i < G__100497__a.length) {
        G__100497__a[G__100497__i] = arguments[G__100497__i + 1];
        ++G__100497__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100497__a, 0);
    }
    return select__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  select.cljs$lang$maxFixedArity = 1;
  select.cljs$lang$applyTo = function(arglist__100498) {
    var opts__7119__auto__ = cljs.core.first(arglist__100498);
    var children__7120__auto__ = cljs.core.rest(arglist__100498);
    return select__delegate(opts__7119__auto__, children__7120__auto__);
  };
  select.cljs$core$IFn$_invoke$arity$variadic = select__delegate;
  return select;
}();
om.dom.small = function() {
  var small__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.small.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var small = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100499__i = 0, G__100499__a = new Array(arguments.length - 1);
      while (G__100499__i < G__100499__a.length) {
        G__100499__a[G__100499__i] = arguments[G__100499__i + 1];
        ++G__100499__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100499__a, 0);
    }
    return small__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  small.cljs$lang$maxFixedArity = 1;
  small.cljs$lang$applyTo = function(arglist__100500) {
    var opts__7119__auto__ = cljs.core.first(arglist__100500);
    var children__7120__auto__ = cljs.core.rest(arglist__100500);
    return small__delegate(opts__7119__auto__, children__7120__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
om.dom.source = function() {
  var source__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.source.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var source = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100501__i = 0, G__100501__a = new Array(arguments.length - 1);
      while (G__100501__i < G__100501__a.length) {
        G__100501__a[G__100501__i] = arguments[G__100501__i + 1];
        ++G__100501__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100501__a, 0);
    }
    return source__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  source.cljs$lang$maxFixedArity = 1;
  source.cljs$lang$applyTo = function(arglist__100502) {
    var opts__7119__auto__ = cljs.core.first(arglist__100502);
    var children__7120__auto__ = cljs.core.rest(arglist__100502);
    return source__delegate(opts__7119__auto__, children__7120__auto__);
  };
  source.cljs$core$IFn$_invoke$arity$variadic = source__delegate;
  return source;
}();
om.dom.span = function() {
  var span__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.span.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var span = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100503__i = 0, G__100503__a = new Array(arguments.length - 1);
      while (G__100503__i < G__100503__a.length) {
        G__100503__a[G__100503__i] = arguments[G__100503__i + 1];
        ++G__100503__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100503__a, 0);
    }
    return span__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  span.cljs$lang$maxFixedArity = 1;
  span.cljs$lang$applyTo = function(arglist__100504) {
    var opts__7119__auto__ = cljs.core.first(arglist__100504);
    var children__7120__auto__ = cljs.core.rest(arglist__100504);
    return span__delegate(opts__7119__auto__, children__7120__auto__);
  };
  span.cljs$core$IFn$_invoke$arity$variadic = span__delegate;
  return span;
}();
om.dom.strong = function() {
  var strong__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.strong.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var strong = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100505__i = 0, G__100505__a = new Array(arguments.length - 1);
      while (G__100505__i < G__100505__a.length) {
        G__100505__a[G__100505__i] = arguments[G__100505__i + 1];
        ++G__100505__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100505__a, 0);
    }
    return strong__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  strong.cljs$lang$maxFixedArity = 1;
  strong.cljs$lang$applyTo = function(arglist__100506) {
    var opts__7119__auto__ = cljs.core.first(arglist__100506);
    var children__7120__auto__ = cljs.core.rest(arglist__100506);
    return strong__delegate(opts__7119__auto__, children__7120__auto__);
  };
  strong.cljs$core$IFn$_invoke$arity$variadic = strong__delegate;
  return strong;
}();
om.dom.style = function() {
  var style__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.style.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var style = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100507__i = 0, G__100507__a = new Array(arguments.length - 1);
      while (G__100507__i < G__100507__a.length) {
        G__100507__a[G__100507__i] = arguments[G__100507__i + 1];
        ++G__100507__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100507__a, 0);
    }
    return style__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  style.cljs$lang$maxFixedArity = 1;
  style.cljs$lang$applyTo = function(arglist__100508) {
    var opts__7119__auto__ = cljs.core.first(arglist__100508);
    var children__7120__auto__ = cljs.core.rest(arglist__100508);
    return style__delegate(opts__7119__auto__, children__7120__auto__);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
om.dom.sub = function() {
  var sub__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.sub.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var sub = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100509__i = 0, G__100509__a = new Array(arguments.length - 1);
      while (G__100509__i < G__100509__a.length) {
        G__100509__a[G__100509__i] = arguments[G__100509__i + 1];
        ++G__100509__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100509__a, 0);
    }
    return sub__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  sub.cljs$lang$maxFixedArity = 1;
  sub.cljs$lang$applyTo = function(arglist__100510) {
    var opts__7119__auto__ = cljs.core.first(arglist__100510);
    var children__7120__auto__ = cljs.core.rest(arglist__100510);
    return sub__delegate(opts__7119__auto__, children__7120__auto__);
  };
  sub.cljs$core$IFn$_invoke$arity$variadic = sub__delegate;
  return sub;
}();
om.dom.summary = function() {
  var summary__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.summary.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var summary = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100511__i = 0, G__100511__a = new Array(arguments.length - 1);
      while (G__100511__i < G__100511__a.length) {
        G__100511__a[G__100511__i] = arguments[G__100511__i + 1];
        ++G__100511__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100511__a, 0);
    }
    return summary__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  summary.cljs$lang$maxFixedArity = 1;
  summary.cljs$lang$applyTo = function(arglist__100512) {
    var opts__7119__auto__ = cljs.core.first(arglist__100512);
    var children__7120__auto__ = cljs.core.rest(arglist__100512);
    return summary__delegate(opts__7119__auto__, children__7120__auto__);
  };
  summary.cljs$core$IFn$_invoke$arity$variadic = summary__delegate;
  return summary;
}();
om.dom.sup = function() {
  var sup__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.sup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var sup = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100513__i = 0, G__100513__a = new Array(arguments.length - 1);
      while (G__100513__i < G__100513__a.length) {
        G__100513__a[G__100513__i] = arguments[G__100513__i + 1];
        ++G__100513__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100513__a, 0);
    }
    return sup__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  sup.cljs$lang$maxFixedArity = 1;
  sup.cljs$lang$applyTo = function(arglist__100514) {
    var opts__7119__auto__ = cljs.core.first(arglist__100514);
    var children__7120__auto__ = cljs.core.rest(arglist__100514);
    return sup__delegate(opts__7119__auto__, children__7120__auto__);
  };
  sup.cljs$core$IFn$_invoke$arity$variadic = sup__delegate;
  return sup;
}();
om.dom.table = function() {
  var table__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.table.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var table = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100515__i = 0, G__100515__a = new Array(arguments.length - 1);
      while (G__100515__i < G__100515__a.length) {
        G__100515__a[G__100515__i] = arguments[G__100515__i + 1];
        ++G__100515__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100515__a, 0);
    }
    return table__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  table.cljs$lang$maxFixedArity = 1;
  table.cljs$lang$applyTo = function(arglist__100516) {
    var opts__7119__auto__ = cljs.core.first(arglist__100516);
    var children__7120__auto__ = cljs.core.rest(arglist__100516);
    return table__delegate(opts__7119__auto__, children__7120__auto__);
  };
  table.cljs$core$IFn$_invoke$arity$variadic = table__delegate;
  return table;
}();
om.dom.tbody = function() {
  var tbody__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.tbody.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var tbody = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100517__i = 0, G__100517__a = new Array(arguments.length - 1);
      while (G__100517__i < G__100517__a.length) {
        G__100517__a[G__100517__i] = arguments[G__100517__i + 1];
        ++G__100517__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100517__a, 0);
    }
    return tbody__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  tbody.cljs$lang$maxFixedArity = 1;
  tbody.cljs$lang$applyTo = function(arglist__100518) {
    var opts__7119__auto__ = cljs.core.first(arglist__100518);
    var children__7120__auto__ = cljs.core.rest(arglist__100518);
    return tbody__delegate(opts__7119__auto__, children__7120__auto__);
  };
  tbody.cljs$core$IFn$_invoke$arity$variadic = tbody__delegate;
  return tbody;
}();
om.dom.td = function() {
  var td__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.td.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var td = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100519__i = 0, G__100519__a = new Array(arguments.length - 1);
      while (G__100519__i < G__100519__a.length) {
        G__100519__a[G__100519__i] = arguments[G__100519__i + 1];
        ++G__100519__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100519__a, 0);
    }
    return td__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  td.cljs$lang$maxFixedArity = 1;
  td.cljs$lang$applyTo = function(arglist__100520) {
    var opts__7119__auto__ = cljs.core.first(arglist__100520);
    var children__7120__auto__ = cljs.core.rest(arglist__100520);
    return td__delegate(opts__7119__auto__, children__7120__auto__);
  };
  td.cljs$core$IFn$_invoke$arity$variadic = td__delegate;
  return td;
}();
om.dom.tfoot = function() {
  var tfoot__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.tfoot.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var tfoot = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100521__i = 0, G__100521__a = new Array(arguments.length - 1);
      while (G__100521__i < G__100521__a.length) {
        G__100521__a[G__100521__i] = arguments[G__100521__i + 1];
        ++G__100521__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100521__a, 0);
    }
    return tfoot__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  tfoot.cljs$lang$maxFixedArity = 1;
  tfoot.cljs$lang$applyTo = function(arglist__100522) {
    var opts__7119__auto__ = cljs.core.first(arglist__100522);
    var children__7120__auto__ = cljs.core.rest(arglist__100522);
    return tfoot__delegate(opts__7119__auto__, children__7120__auto__);
  };
  tfoot.cljs$core$IFn$_invoke$arity$variadic = tfoot__delegate;
  return tfoot;
}();
om.dom.th = function() {
  var th__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.th.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var th = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100523__i = 0, G__100523__a = new Array(arguments.length - 1);
      while (G__100523__i < G__100523__a.length) {
        G__100523__a[G__100523__i] = arguments[G__100523__i + 1];
        ++G__100523__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100523__a, 0);
    }
    return th__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  th.cljs$lang$maxFixedArity = 1;
  th.cljs$lang$applyTo = function(arglist__100524) {
    var opts__7119__auto__ = cljs.core.first(arglist__100524);
    var children__7120__auto__ = cljs.core.rest(arglist__100524);
    return th__delegate(opts__7119__auto__, children__7120__auto__);
  };
  th.cljs$core$IFn$_invoke$arity$variadic = th__delegate;
  return th;
}();
om.dom.thead = function() {
  var thead__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.thead.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var thead = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100525__i = 0, G__100525__a = new Array(arguments.length - 1);
      while (G__100525__i < G__100525__a.length) {
        G__100525__a[G__100525__i] = arguments[G__100525__i + 1];
        ++G__100525__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100525__a, 0);
    }
    return thead__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  thead.cljs$lang$maxFixedArity = 1;
  thead.cljs$lang$applyTo = function(arglist__100526) {
    var opts__7119__auto__ = cljs.core.first(arglist__100526);
    var children__7120__auto__ = cljs.core.rest(arglist__100526);
    return thead__delegate(opts__7119__auto__, children__7120__auto__);
  };
  thead.cljs$core$IFn$_invoke$arity$variadic = thead__delegate;
  return thead;
}();
om.dom.time = function() {
  var time__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.time.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var time = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100527__i = 0, G__100527__a = new Array(arguments.length - 1);
      while (G__100527__i < G__100527__a.length) {
        G__100527__a[G__100527__i] = arguments[G__100527__i + 1];
        ++G__100527__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100527__a, 0);
    }
    return time__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  time.cljs$lang$maxFixedArity = 1;
  time.cljs$lang$applyTo = function(arglist__100528) {
    var opts__7119__auto__ = cljs.core.first(arglist__100528);
    var children__7120__auto__ = cljs.core.rest(arglist__100528);
    return time__delegate(opts__7119__auto__, children__7120__auto__);
  };
  time.cljs$core$IFn$_invoke$arity$variadic = time__delegate;
  return time;
}();
om.dom.title = function() {
  var title__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.title.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var title = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100529__i = 0, G__100529__a = new Array(arguments.length - 1);
      while (G__100529__i < G__100529__a.length) {
        G__100529__a[G__100529__i] = arguments[G__100529__i + 1];
        ++G__100529__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100529__a, 0);
    }
    return title__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  title.cljs$lang$maxFixedArity = 1;
  title.cljs$lang$applyTo = function(arglist__100530) {
    var opts__7119__auto__ = cljs.core.first(arglist__100530);
    var children__7120__auto__ = cljs.core.rest(arglist__100530);
    return title__delegate(opts__7119__auto__, children__7120__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
om.dom.tr = function() {
  var tr__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.tr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var tr = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100531__i = 0, G__100531__a = new Array(arguments.length - 1);
      while (G__100531__i < G__100531__a.length) {
        G__100531__a[G__100531__i] = arguments[G__100531__i + 1];
        ++G__100531__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100531__a, 0);
    }
    return tr__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  tr.cljs$lang$maxFixedArity = 1;
  tr.cljs$lang$applyTo = function(arglist__100532) {
    var opts__7119__auto__ = cljs.core.first(arglist__100532);
    var children__7120__auto__ = cljs.core.rest(arglist__100532);
    return tr__delegate(opts__7119__auto__, children__7120__auto__);
  };
  tr.cljs$core$IFn$_invoke$arity$variadic = tr__delegate;
  return tr;
}();
om.dom.track = function() {
  var track__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.track.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var track = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100533__i = 0, G__100533__a = new Array(arguments.length - 1);
      while (G__100533__i < G__100533__a.length) {
        G__100533__a[G__100533__i] = arguments[G__100533__i + 1];
        ++G__100533__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100533__a, 0);
    }
    return track__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  track.cljs$lang$maxFixedArity = 1;
  track.cljs$lang$applyTo = function(arglist__100534) {
    var opts__7119__auto__ = cljs.core.first(arglist__100534);
    var children__7120__auto__ = cljs.core.rest(arglist__100534);
    return track__delegate(opts__7119__auto__, children__7120__auto__);
  };
  track.cljs$core$IFn$_invoke$arity$variadic = track__delegate;
  return track;
}();
om.dom.u = function() {
  var u__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.u.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var u = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100535__i = 0, G__100535__a = new Array(arguments.length - 1);
      while (G__100535__i < G__100535__a.length) {
        G__100535__a[G__100535__i] = arguments[G__100535__i + 1];
        ++G__100535__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100535__a, 0);
    }
    return u__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  u.cljs$lang$maxFixedArity = 1;
  u.cljs$lang$applyTo = function(arglist__100536) {
    var opts__7119__auto__ = cljs.core.first(arglist__100536);
    var children__7120__auto__ = cljs.core.rest(arglist__100536);
    return u__delegate(opts__7119__auto__, children__7120__auto__);
  };
  u.cljs$core$IFn$_invoke$arity$variadic = u__delegate;
  return u;
}();
om.dom.ul = function() {
  var ul__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.ul.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var ul = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100537__i = 0, G__100537__a = new Array(arguments.length - 1);
      while (G__100537__i < G__100537__a.length) {
        G__100537__a[G__100537__i] = arguments[G__100537__i + 1];
        ++G__100537__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100537__a, 0);
    }
    return ul__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  ul.cljs$lang$maxFixedArity = 1;
  ul.cljs$lang$applyTo = function(arglist__100538) {
    var opts__7119__auto__ = cljs.core.first(arglist__100538);
    var children__7120__auto__ = cljs.core.rest(arglist__100538);
    return ul__delegate(opts__7119__auto__, children__7120__auto__);
  };
  ul.cljs$core$IFn$_invoke$arity$variadic = ul__delegate;
  return ul;
}();
om.dom.var$ = function() {
  var var$__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.var$.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var var$ = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100539__i = 0, G__100539__a = new Array(arguments.length - 1);
      while (G__100539__i < G__100539__a.length) {
        G__100539__a[G__100539__i] = arguments[G__100539__i + 1];
        ++G__100539__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100539__a, 0);
    }
    return var$__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  var$.cljs$lang$maxFixedArity = 1;
  var$.cljs$lang$applyTo = function(arglist__100540) {
    var opts__7119__auto__ = cljs.core.first(arglist__100540);
    var children__7120__auto__ = cljs.core.rest(arglist__100540);
    return var$__delegate(opts__7119__auto__, children__7120__auto__);
  };
  var$.cljs$core$IFn$_invoke$arity$variadic = var$__delegate;
  return var$;
}();
om.dom.video = function() {
  var video__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.video.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var video = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100541__i = 0, G__100541__a = new Array(arguments.length - 1);
      while (G__100541__i < G__100541__a.length) {
        G__100541__a[G__100541__i] = arguments[G__100541__i + 1];
        ++G__100541__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100541__a, 0);
    }
    return video__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  video.cljs$lang$maxFixedArity = 1;
  video.cljs$lang$applyTo = function(arglist__100542) {
    var opts__7119__auto__ = cljs.core.first(arglist__100542);
    var children__7120__auto__ = cljs.core.rest(arglist__100542);
    return video__delegate(opts__7119__auto__, children__7120__auto__);
  };
  video.cljs$core$IFn$_invoke$arity$variadic = video__delegate;
  return video;
}();
om.dom.wbr = function() {
  var wbr__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.wbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var wbr = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100543__i = 0, G__100543__a = new Array(arguments.length - 1);
      while (G__100543__i < G__100543__a.length) {
        G__100543__a[G__100543__i] = arguments[G__100543__i + 1];
        ++G__100543__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100543__a, 0);
    }
    return wbr__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  wbr.cljs$lang$maxFixedArity = 1;
  wbr.cljs$lang$applyTo = function(arglist__100544) {
    var opts__7119__auto__ = cljs.core.first(arglist__100544);
    var children__7120__auto__ = cljs.core.rest(arglist__100544);
    return wbr__delegate(opts__7119__auto__, children__7120__auto__);
  };
  wbr.cljs$core$IFn$_invoke$arity$variadic = wbr__delegate;
  return wbr;
}();
om.dom.circle = function() {
  var circle__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.circle.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var circle = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100545__i = 0, G__100545__a = new Array(arguments.length - 1);
      while (G__100545__i < G__100545__a.length) {
        G__100545__a[G__100545__i] = arguments[G__100545__i + 1];
        ++G__100545__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100545__a, 0);
    }
    return circle__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  circle.cljs$lang$maxFixedArity = 1;
  circle.cljs$lang$applyTo = function(arglist__100546) {
    var opts__7119__auto__ = cljs.core.first(arglist__100546);
    var children__7120__auto__ = cljs.core.rest(arglist__100546);
    return circle__delegate(opts__7119__auto__, children__7120__auto__);
  };
  circle.cljs$core$IFn$_invoke$arity$variadic = circle__delegate;
  return circle;
}();
om.dom.ellipse = function() {
  var ellipse__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.ellipse.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var ellipse = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100547__i = 0, G__100547__a = new Array(arguments.length - 1);
      while (G__100547__i < G__100547__a.length) {
        G__100547__a[G__100547__i] = arguments[G__100547__i + 1];
        ++G__100547__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100547__a, 0);
    }
    return ellipse__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  ellipse.cljs$lang$maxFixedArity = 1;
  ellipse.cljs$lang$applyTo = function(arglist__100548) {
    var opts__7119__auto__ = cljs.core.first(arglist__100548);
    var children__7120__auto__ = cljs.core.rest(arglist__100548);
    return ellipse__delegate(opts__7119__auto__, children__7120__auto__);
  };
  ellipse.cljs$core$IFn$_invoke$arity$variadic = ellipse__delegate;
  return ellipse;
}();
om.dom.g = function() {
  var g__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.g.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var g = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100549__i = 0, G__100549__a = new Array(arguments.length - 1);
      while (G__100549__i < G__100549__a.length) {
        G__100549__a[G__100549__i] = arguments[G__100549__i + 1];
        ++G__100549__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100549__a, 0);
    }
    return g__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  g.cljs$lang$maxFixedArity = 1;
  g.cljs$lang$applyTo = function(arglist__100550) {
    var opts__7119__auto__ = cljs.core.first(arglist__100550);
    var children__7120__auto__ = cljs.core.rest(arglist__100550);
    return g__delegate(opts__7119__auto__, children__7120__auto__);
  };
  g.cljs$core$IFn$_invoke$arity$variadic = g__delegate;
  return g;
}();
om.dom.line = function() {
  var line__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.line.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var line = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100551__i = 0, G__100551__a = new Array(arguments.length - 1);
      while (G__100551__i < G__100551__a.length) {
        G__100551__a[G__100551__i] = arguments[G__100551__i + 1];
        ++G__100551__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100551__a, 0);
    }
    return line__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  line.cljs$lang$maxFixedArity = 1;
  line.cljs$lang$applyTo = function(arglist__100552) {
    var opts__7119__auto__ = cljs.core.first(arglist__100552);
    var children__7120__auto__ = cljs.core.rest(arglist__100552);
    return line__delegate(opts__7119__auto__, children__7120__auto__);
  };
  line.cljs$core$IFn$_invoke$arity$variadic = line__delegate;
  return line;
}();
om.dom.path = function() {
  var path__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.path.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var path = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100553__i = 0, G__100553__a = new Array(arguments.length - 1);
      while (G__100553__i < G__100553__a.length) {
        G__100553__a[G__100553__i] = arguments[G__100553__i + 1];
        ++G__100553__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100553__a, 0);
    }
    return path__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  path.cljs$lang$maxFixedArity = 1;
  path.cljs$lang$applyTo = function(arglist__100554) {
    var opts__7119__auto__ = cljs.core.first(arglist__100554);
    var children__7120__auto__ = cljs.core.rest(arglist__100554);
    return path__delegate(opts__7119__auto__, children__7120__auto__);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
om.dom.polyline = function() {
  var polyline__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.polyline.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var polyline = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100555__i = 0, G__100555__a = new Array(arguments.length - 1);
      while (G__100555__i < G__100555__a.length) {
        G__100555__a[G__100555__i] = arguments[G__100555__i + 1];
        ++G__100555__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100555__a, 0);
    }
    return polyline__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  polyline.cljs$lang$maxFixedArity = 1;
  polyline.cljs$lang$applyTo = function(arglist__100556) {
    var opts__7119__auto__ = cljs.core.first(arglist__100556);
    var children__7120__auto__ = cljs.core.rest(arglist__100556);
    return polyline__delegate(opts__7119__auto__, children__7120__auto__);
  };
  polyline.cljs$core$IFn$_invoke$arity$variadic = polyline__delegate;
  return polyline;
}();
om.dom.rect = function() {
  var rect__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.rect.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var rect = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100557__i = 0, G__100557__a = new Array(arguments.length - 1);
      while (G__100557__i < G__100557__a.length) {
        G__100557__a[G__100557__i] = arguments[G__100557__i + 1];
        ++G__100557__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100557__a, 0);
    }
    return rect__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  rect.cljs$lang$maxFixedArity = 1;
  rect.cljs$lang$applyTo = function(arglist__100558) {
    var opts__7119__auto__ = cljs.core.first(arglist__100558);
    var children__7120__auto__ = cljs.core.rest(arglist__100558);
    return rect__delegate(opts__7119__auto__, children__7120__auto__);
  };
  rect.cljs$core$IFn$_invoke$arity$variadic = rect__delegate;
  return rect;
}();
om.dom.svg = function() {
  var svg__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.svg.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var svg = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100559__i = 0, G__100559__a = new Array(arguments.length - 1);
      while (G__100559__i < G__100559__a.length) {
        G__100559__a[G__100559__i] = arguments[G__100559__i + 1];
        ++G__100559__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100559__a, 0);
    }
    return svg__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  svg.cljs$lang$maxFixedArity = 1;
  svg.cljs$lang$applyTo = function(arglist__100560) {
    var opts__7119__auto__ = cljs.core.first(arglist__100560);
    var children__7120__auto__ = cljs.core.rest(arglist__100560);
    return svg__delegate(opts__7119__auto__, children__7120__auto__);
  };
  svg.cljs$core$IFn$_invoke$arity$variadic = svg__delegate;
  return svg;
}();
om.dom.text = function() {
  var text__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.text.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var text = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100561__i = 0, G__100561__a = new Array(arguments.length - 1);
      while (G__100561__i < G__100561__a.length) {
        G__100561__a[G__100561__i] = arguments[G__100561__i + 1];
        ++G__100561__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100561__a, 0);
    }
    return text__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  text.cljs$lang$maxFixedArity = 1;
  text.cljs$lang$applyTo = function(arglist__100562) {
    var opts__7119__auto__ = cljs.core.first(arglist__100562);
    var children__7120__auto__ = cljs.core.rest(arglist__100562);
    return text__delegate(opts__7119__auto__, children__7120__auto__);
  };
  text.cljs$core$IFn$_invoke$arity$variadic = text__delegate;
  return text;
}();
om.dom.defs = function() {
  var defs__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.defs.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var defs = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100563__i = 0, G__100563__a = new Array(arguments.length - 1);
      while (G__100563__i < G__100563__a.length) {
        G__100563__a[G__100563__i] = arguments[G__100563__i + 1];
        ++G__100563__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100563__a, 0);
    }
    return defs__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  defs.cljs$lang$maxFixedArity = 1;
  defs.cljs$lang$applyTo = function(arglist__100564) {
    var opts__7119__auto__ = cljs.core.first(arglist__100564);
    var children__7120__auto__ = cljs.core.rest(arglist__100564);
    return defs__delegate(opts__7119__auto__, children__7120__auto__);
  };
  defs.cljs$core$IFn$_invoke$arity$variadic = defs__delegate;
  return defs;
}();
om.dom.linearGradient = function() {
  var linearGradient__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.linearGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var linearGradient = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100565__i = 0, G__100565__a = new Array(arguments.length - 1);
      while (G__100565__i < G__100565__a.length) {
        G__100565__a[G__100565__i] = arguments[G__100565__i + 1];
        ++G__100565__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100565__a, 0);
    }
    return linearGradient__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  linearGradient.cljs$lang$maxFixedArity = 1;
  linearGradient.cljs$lang$applyTo = function(arglist__100566) {
    var opts__7119__auto__ = cljs.core.first(arglist__100566);
    var children__7120__auto__ = cljs.core.rest(arglist__100566);
    return linearGradient__delegate(opts__7119__auto__, children__7120__auto__);
  };
  linearGradient.cljs$core$IFn$_invoke$arity$variadic = linearGradient__delegate;
  return linearGradient;
}();
om.dom.polygon = function() {
  var polygon__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.polygon.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var polygon = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100567__i = 0, G__100567__a = new Array(arguments.length - 1);
      while (G__100567__i < G__100567__a.length) {
        G__100567__a[G__100567__i] = arguments[G__100567__i + 1];
        ++G__100567__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100567__a, 0);
    }
    return polygon__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  polygon.cljs$lang$maxFixedArity = 1;
  polygon.cljs$lang$applyTo = function(arglist__100568) {
    var opts__7119__auto__ = cljs.core.first(arglist__100568);
    var children__7120__auto__ = cljs.core.rest(arglist__100568);
    return polygon__delegate(opts__7119__auto__, children__7120__auto__);
  };
  polygon.cljs$core$IFn$_invoke$arity$variadic = polygon__delegate;
  return polygon;
}();
om.dom.radialGradient = function() {
  var radialGradient__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.radialGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var radialGradient = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100569__i = 0, G__100569__a = new Array(arguments.length - 1);
      while (G__100569__i < G__100569__a.length) {
        G__100569__a[G__100569__i] = arguments[G__100569__i + 1];
        ++G__100569__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100569__a, 0);
    }
    return radialGradient__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  radialGradient.cljs$lang$maxFixedArity = 1;
  radialGradient.cljs$lang$applyTo = function(arglist__100570) {
    var opts__7119__auto__ = cljs.core.first(arglist__100570);
    var children__7120__auto__ = cljs.core.rest(arglist__100570);
    return radialGradient__delegate(opts__7119__auto__, children__7120__auto__);
  };
  radialGradient.cljs$core$IFn$_invoke$arity$variadic = radialGradient__delegate;
  return radialGradient;
}();
om.dom.stop = function() {
  var stop__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.stop.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var stop = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100571__i = 0, G__100571__a = new Array(arguments.length - 1);
      while (G__100571__i < G__100571__a.length) {
        G__100571__a[G__100571__i] = arguments[G__100571__i + 1];
        ++G__100571__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100571__a, 0);
    }
    return stop__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  stop.cljs$lang$maxFixedArity = 1;
  stop.cljs$lang$applyTo = function(arglist__100572) {
    var opts__7119__auto__ = cljs.core.first(arglist__100572);
    var children__7120__auto__ = cljs.core.rest(arglist__100572);
    return stop__delegate(opts__7119__auto__, children__7120__auto__);
  };
  stop.cljs$core$IFn$_invoke$arity$variadic = stop__delegate;
  return stop;
}();
om.dom.tspan = function() {
  var tspan__delegate = function(opts__7119__auto__, children__7120__auto__) {
    return React.DOM.tspan.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__7119__auto__, children__7120__auto__)));
  };
  var tspan = function(opts__7119__auto__, var_args) {
    var children__7120__auto__ = null;
    if (arguments.length > 1) {
      var G__100573__i = 0, G__100573__a = new Array(arguments.length - 1);
      while (G__100573__i < G__100573__a.length) {
        G__100573__a[G__100573__i] = arguments[G__100573__i + 1];
        ++G__100573__i;
      }
      children__7120__auto__ = new cljs.core.IndexedSeq(G__100573__a, 0);
    }
    return tspan__delegate.call(this, opts__7119__auto__, children__7120__auto__);
  };
  tspan.cljs$lang$maxFixedArity = 1;
  tspan.cljs$lang$applyTo = function(arglist__100574) {
    var opts__7119__auto__ = cljs.core.first(arglist__100574);
    var children__7120__auto__ = cljs.core.rest(arglist__100574);
    return tspan__delegate(opts__7119__auto__, children__7120__auto__);
  };
  tspan.cljs$core$IFn$_invoke$arity$variadic = tspan__delegate;
  return tspan;
}();
om.dom.wrap_form_element = function wrap_form_element(ctor, display_name) {
  return React.createFactory(React.createClass({"render":function() {
    var this$ = this;
    var props = {};
    goog.object.extend(props, this$.props, {"children":this$.props["children"], "onChange":this$["onChange"], "value":this$.state["value"]});
    return ctor.call(null, props);
  }, "componentWillReceiveProps":function(new_props) {
    var this$ = this;
    return this$.setState({"value":new_props["value"]});
  }, "onChange":function(e) {
    var this$ = this;
    var handler = this$.props["onChange"];
    if (handler == null) {
      return null;
    } else {
      handler.call(null, e);
      return this$.setState({"value":e.target.value});
    }
  }, "getInitialState":function() {
    var this$ = this;
    return{"value":this$.props["value"]};
  }, "getDisplayName":function() {
    return display_name;
  }}));
};
om.dom.input = om.dom.wrap_form_element.call(null, React.DOM.input, "input");
om.dom.textarea = om.dom.wrap_form_element.call(null, React.DOM.textarea, "textarea");
om.dom.option = om.dom.wrap_form_element.call(null, React.DOM.option, "option");
om.dom.render = function render(component, el) {
  return React.render(component, el);
};
om.dom.render_to_str = function render_to_str(c) {
  return React.renderToString(c);
};
goog.provide("goog.ui.IdGenerator");
goog.ui.IdGenerator = function() {
};
goog.addSingletonGetter(goog.ui.IdGenerator);
goog.ui.IdGenerator.prototype.nextId_ = 0;
goog.ui.IdGenerator.prototype.getNextUniqueId = function() {
  return ":" + (this.nextId_++).toString(36);
};
goog.provide("om.core");
goog.require("cljs.core");
goog.require("goog.ui.IdGenerator");
goog.require("goog.dom");
goog.require("om.dom");
om.core._STAR_parent_STAR_ = null;
om.core._STAR_instrument_STAR_ = null;
om.core._STAR_descriptor_STAR_ = null;
om.core._STAR_state_STAR_ = null;
om.core._STAR_root_key_STAR_ = null;
om.core.IDisplayName = function() {
  var obj101039 = {};
  return obj101039;
}();
om.core.display_name = function display_name(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IDisplayName$display_name$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IDisplayName$display_name$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core.display_name[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core.display_name["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDisplayName.display-name", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IInitState = function() {
  var obj101041 = {};
  return obj101041;
}();
om.core.init_state = function init_state(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IInitState$init_state$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IInitState$init_state$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core.init_state[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core.init_state["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IInitState.init-state", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IShouldUpdate = function() {
  var obj101043 = {};
  return obj101043;
}();
om.core.should_update = function should_update(this$, next_props, next_state) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IShouldUpdate$should_update$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IShouldUpdate$should_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core.should_update[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core.should_update["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IShouldUpdate.should-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IWillMount = function() {
  var obj101045 = {};
  return obj101045;
}();
om.core.will_mount = function will_mount(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IWillMount$will_mount$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IWillMount$will_mount$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core.will_mount[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core.will_mount["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillMount.will-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IDidMount = function() {
  var obj101047 = {};
  return obj101047;
}();
om.core.did_mount = function did_mount(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IDidMount$did_mount$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IDidMount$did_mount$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core.did_mount[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core.did_mount["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidMount.did-mount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUnmount = function() {
  var obj101049 = {};
  return obj101049;
}();
om.core.will_unmount = function will_unmount(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IWillUnmount$will_unmount$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IWillUnmount$will_unmount$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core.will_unmount[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core.will_unmount["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUnmount.will-unmount", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IWillUpdate = function() {
  var obj101051 = {};
  return obj101051;
}();
om.core.will_update = function will_update(this$, next_props, next_state) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IWillUpdate$will_update$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IWillUpdate$will_update$arity$3(this$, next_props, next_state);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core.will_update[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core.will_update["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillUpdate.will-update", this$);
        }
      }
    }().call(null, this$, next_props, next_state);
  }
};
om.core.IDidUpdate = function() {
  var obj101053 = {};
  return obj101053;
}();
om.core.did_update = function did_update(this$, prev_props, prev_state) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IDidUpdate$did_update$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IDidUpdate$did_update$arity$3(this$, prev_props, prev_state);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core.did_update[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core.did_update["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDidUpdate.did-update", this$);
        }
      }
    }().call(null, this$, prev_props, prev_state);
  }
};
om.core.IWillReceiveProps = function() {
  var obj101055 = {};
  return obj101055;
}();
om.core.will_receive_props = function will_receive_props(this$, next_props) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IWillReceiveProps$will_receive_props$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IWillReceiveProps$will_receive_props$arity$2(this$, next_props);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core.will_receive_props[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core.will_receive_props["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWillReceiveProps.will-receive-props", this$);
        }
      }
    }().call(null, this$, next_props);
  }
};
om.core.IRender = function() {
  var obj101057 = {};
  return obj101057;
}();
om.core.render = function render(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IRender$render$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IRender$render$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core.render[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core.render["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRender.render", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IRenderProps = function() {
  var obj101059 = {};
  return obj101059;
}();
om.core.render_props = function render_props(this$, props, state) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IRenderProps$render_props$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IRenderProps$render_props$arity$3(this$, props, state);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core.render_props[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core.render_props["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderProps.render-props", this$);
        }
      }
    }().call(null, this$, props, state);
  }
};
om.core.IRenderState = function() {
  var obj101061 = {};
  return obj101061;
}();
om.core.render_state = function render_state(this$, state) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IRenderState$render_state$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IRenderState$render_state$arity$2(this$, state);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core.render_state[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core.render_state["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderState.render-state", this$);
        }
      }
    }().call(null, this$, state);
  }
};
om.core.ICheckState = function() {
  var obj101063 = {};
  return obj101063;
}();
om.core.IOmSwap = function() {
  var obj101065 = {};
  return obj101065;
}();
om.core._om_swap_BANG_ = function _om_swap_BANG_(this$, cursor, korks, f, tag) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IOmSwap$_om_swap_BANG_$arity$5(this$, cursor, korks, f, tag);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core._om_swap_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._om_swap_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmSwap.-om-swap!", this$);
        }
      }
    }().call(null, this$, cursor, korks, f, tag);
  }
};
om.core.IGetState = function() {
  var obj101067 = {};
  return obj101067;
}();
om.core._get_state = function() {
  var _get_state = null;
  var _get_state__1 = function(this$) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.om$core$IGetState$_get_state$arity$1;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.om$core$IGetState$_get_state$arity$1(this$);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = om.core._get_state[goog.typeOf(x__4625__auto__)];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = om.core._get_state["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _get_state__2 = function(this$, ks) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.om$core$IGetState$_get_state$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.om$core$IGetState$_get_state$arity$2(this$, ks);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = om.core._get_state[goog.typeOf(x__4625__auto__)];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = om.core._get_state["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetState.-get-state", this$);
          }
        }
      }().call(null, this$, ks);
    }
  };
  _get_state = function(this$, ks) {
    switch(arguments.length) {
      case 1:
        return _get_state__1.call(this, this$);
      case 2:
        return _get_state__2.call(this, this$, ks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _get_state.cljs$core$IFn$_invoke$arity$1 = _get_state__1;
  _get_state.cljs$core$IFn$_invoke$arity$2 = _get_state__2;
  return _get_state;
}();
om.core.IGetRenderState = function() {
  var obj101069 = {};
  return obj101069;
}();
om.core._get_render_state = function() {
  var _get_render_state = null;
  var _get_render_state__1 = function(this$) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.om$core$IGetRenderState$_get_render_state$arity$1;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$1(this$);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = om.core._get_render_state[goog.typeOf(x__4625__auto__)];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = om.core._get_render_state["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _get_render_state__2 = function(this$, ks) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.om$core$IGetRenderState$_get_render_state$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.om$core$IGetRenderState$_get_render_state$arity$2(this$, ks);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = om.core._get_render_state[goog.typeOf(x__4625__auto__)];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = om.core._get_render_state["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IGetRenderState.-get-render-state", this$);
          }
        }
      }().call(null, this$, ks);
    }
  };
  _get_render_state = function(this$, ks) {
    switch(arguments.length) {
      case 1:
        return _get_render_state__1.call(this, this$);
      case 2:
        return _get_render_state__2.call(this, this$, ks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _get_render_state.cljs$core$IFn$_invoke$arity$1 = _get_render_state__1;
  _get_render_state.cljs$core$IFn$_invoke$arity$2 = _get_render_state__2;
  return _get_render_state;
}();
om.core.ISetState = function() {
  var obj101071 = {};
  return obj101071;
}();
om.core._set_state_BANG_ = function() {
  var _set_state_BANG_ = null;
  var _set_state_BANG___3 = function(this$, val, render) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.om$core$ISetState$_set_state_BANG_$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$3(this$, val, render);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4625__auto__)];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = om.core._set_state_BANG_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
          }
        }
      }().call(null, this$, val, render);
    }
  };
  var _set_state_BANG___4 = function(this$, ks, val, render) {
    if (function() {
      var and__3969__auto__ = this$;
      if (and__3969__auto__) {
        return this$.om$core$ISetState$_set_state_BANG_$arity$4;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return this$.om$core$ISetState$_set_state_BANG_$arity$4(this$, ks, val, render);
    } else {
      var x__4625__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3981__auto__ = om.core._set_state_BANG_[goog.typeOf(x__4625__auto__)];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = om.core._set_state_BANG_["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISetState.-set-state!", this$);
          }
        }
      }().call(null, this$, ks, val, render);
    }
  };
  _set_state_BANG_ = function(this$, ks, val, render) {
    switch(arguments.length) {
      case 3:
        return _set_state_BANG___3.call(this, this$, ks, val);
      case 4:
        return _set_state_BANG___4.call(this, this$, ks, val, render);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = _set_state_BANG___3;
  _set_state_BANG_.cljs$core$IFn$_invoke$arity$4 = _set_state_BANG___4;
  return _set_state_BANG_;
}();
om.core.IRenderQueue = function() {
  var obj101073 = {};
  return obj101073;
}();
om.core._get_queue = function _get_queue(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IRenderQueue$_get_queue$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_get_queue$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core._get_queue[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._get_queue["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-get-queue", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._queue_render_BANG_ = function _queue_render_BANG_(this$, c) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_queue_render_BANG_$arity$2(this$, c);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core._queue_render_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._queue_render_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-queue-render!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._empty_queue_BANG_ = function _empty_queue_BANG_(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IRenderQueue$_empty_queue_BANG_$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core._empty_queue_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._empty_queue_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRenderQueue.-empty-queue!", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.IValue = function() {
  var obj101075 = {};
  return obj101075;
}();
om.core._value = function _value(x) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.om$core$IValue$_value$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.om$core$IValue$_value$arity$1(x);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = om.core._value[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._value["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IValue.-value", x);
        }
      }
    }().call(null, x);
  }
};
om.core.IValue["_"] = true;
om.core._value["_"] = function(x) {
  return x;
};
om.core.ICursor = function() {
  var obj101077 = {};
  return obj101077;
}();
om.core._path = function _path(cursor) {
  if (function() {
    var and__3969__auto__ = cursor;
    if (and__3969__auto__) {
      return cursor.om$core$ICursor$_path$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_path$arity$1(cursor);
  } else {
    var x__4625__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3981__auto__ = om.core._path[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._path["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-path", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core._state = function _state(cursor) {
  if (function() {
    var and__3969__auto__ = cursor;
    if (and__3969__auto__) {
      return cursor.om$core$ICursor$_state$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return cursor.om$core$ICursor$_state$arity$1(cursor);
  } else {
    var x__4625__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3981__auto__ = om.core._state[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._state["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursor.-state", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IToCursor = function() {
  var obj101079 = {};
  return obj101079;
}();
om.core._to_cursor = function() {
  var _to_cursor = null;
  var _to_cursor__2 = function(value, state) {
    if (function() {
      var and__3969__auto__ = value;
      if (and__3969__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$2;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$2(value, state);
    } else {
      var x__4625__auto__ = value == null ? null : value;
      return function() {
        var or__3981__auto__ = om.core._to_cursor[goog.typeOf(x__4625__auto__)];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = om.core._to_cursor["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state);
    }
  };
  var _to_cursor__3 = function(value, state, path) {
    if (function() {
      var and__3969__auto__ = value;
      if (and__3969__auto__) {
        return value.om$core$IToCursor$_to_cursor$arity$3;
      } else {
        return and__3969__auto__;
      }
    }()) {
      return value.om$core$IToCursor$_to_cursor$arity$3(value, state, path);
    } else {
      var x__4625__auto__ = value == null ? null : value;
      return function() {
        var or__3981__auto__ = om.core._to_cursor[goog.typeOf(x__4625__auto__)];
        if (or__3981__auto__) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = om.core._to_cursor["_"];
          if (or__3981__auto____$1) {
            return or__3981__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IToCursor.-to-cursor", value);
          }
        }
      }().call(null, value, state, path);
    }
  };
  _to_cursor = function(value, state, path) {
    switch(arguments.length) {
      case 2:
        return _to_cursor__2.call(this, value, state);
      case 3:
        return _to_cursor__3.call(this, value, state, path);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _to_cursor.cljs$core$IFn$_invoke$arity$2 = _to_cursor__2;
  _to_cursor.cljs$core$IFn$_invoke$arity$3 = _to_cursor__3;
  return _to_cursor;
}();
om.core.ICursorDerive = function() {
  var obj101081 = {};
  return obj101081;
}();
om.core._derive = function _derive(cursor, derived, state, path) {
  if (function() {
    var and__3969__auto__ = cursor;
    if (and__3969__auto__) {
      return cursor.om$core$ICursorDerive$_derive$arity$4;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return cursor.om$core$ICursorDerive$_derive$arity$4(cursor, derived, state, path);
  } else {
    var x__4625__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3981__auto__ = om.core._derive[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._derive["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICursorDerive.-derive", cursor);
        }
      }
    }().call(null, cursor, derived, state, path);
  }
};
om.core.ICursorDerive["_"] = true;
om.core._derive["_"] = function(this$, derived, state, path) {
  return om.core.to_cursor.call(null, derived, state, path);
};
om.core.path = function path(cursor) {
  return om.core._path.call(null, cursor);
};
om.core.value = function value(cursor) {
  return om.core._value.call(null, cursor);
};
om.core.state = function state(cursor) {
  return om.core._state.call(null, cursor);
};
om.core.ITransact = function() {
  var obj101083 = {};
  return obj101083;
}();
om.core._transact_BANG_ = function _transact_BANG_(cursor, korks, f, tag) {
  if (function() {
    var and__3969__auto__ = cursor;
    if (and__3969__auto__) {
      return cursor.om$core$ITransact$_transact_BANG_$arity$4;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return cursor.om$core$ITransact$_transact_BANG_$arity$4(cursor, korks, f, tag);
  } else {
    var x__4625__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3981__auto__ = om.core._transact_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._transact_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransact.-transact!", cursor);
        }
      }
    }().call(null, cursor, korks, f, tag);
  }
};
om.core.INotify = function() {
  var obj101085 = {};
  return obj101085;
}();
om.core._listen_BANG_ = function _listen_BANG_(x, key, tx_listen) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.om$core$INotify$_listen_BANG_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.om$core$INotify$_listen_BANG_$arity$3(x, key, tx_listen);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = om.core._listen_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._listen_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-listen!", x);
        }
      }
    }().call(null, x, key, tx_listen);
  }
};
om.core._unlisten_BANG_ = function _unlisten_BANG_(x, key) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.om$core$INotify$_unlisten_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.om$core$INotify$_unlisten_BANG_$arity$2(x, key);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = om.core._unlisten_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._unlisten_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-unlisten!", x);
        }
      }
    }().call(null, x, key);
  }
};
om.core._notify_BANG_ = function _notify_BANG_(x, tx_data, root_cursor) {
  if (function() {
    var and__3969__auto__ = x;
    if (and__3969__auto__) {
      return x.om$core$INotify$_notify_BANG_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return x.om$core$INotify$_notify_BANG_$arity$3(x, tx_data, root_cursor);
  } else {
    var x__4625__auto__ = x == null ? null : x;
    return function() {
      var or__3981__auto__ = om.core._notify_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._notify_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INotify.-notify!", x);
        }
      }
    }().call(null, x, tx_data, root_cursor);
  }
};
om.core.IRootProperties = function() {
  var obj101087 = {};
  return obj101087;
}();
om.core._set_property_BANG_ = function _set_property_BANG_(this$, id, p, val) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IRootProperties$_set_property_BANG_$arity$4;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_set_property_BANG_$arity$4(this$, id, p, val);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core._set_property_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._set_property_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-set-property!", this$);
        }
      }
    }().call(null, this$, id, p, val);
  }
};
om.core._remove_property_BANG_ = function _remove_property_BANG_(this$, id, p) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IRootProperties$_remove_property_BANG_$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_remove_property_BANG_$arity$3(this$, id, p);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core._remove_property_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._remove_property_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-remove-property!", this$);
        }
      }
    }().call(null, this$, id, p);
  }
};
om.core._remove_properties_BANG_ = function _remove_properties_BANG_(this$, id) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IRootProperties$_remove_properties_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_remove_properties_BANG_$arity$2(this$, id);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core._remove_properties_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._remove_properties_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-remove-properties!", this$);
        }
      }
    }().call(null, this$, id);
  }
};
om.core._get_property = function _get_property(this$, id, p) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IRootProperties$_get_property$arity$3;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IRootProperties$_get_property$arity$3(this$, id, p);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core._get_property[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._get_property["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootProperties.-get-property", this$);
        }
      }
    }().call(null, this$, id, p);
  }
};
om.core.IRootKey = function() {
  var obj101089 = {};
  return obj101089;
}();
om.core._root_key = function _root_key(cursor) {
  if (function() {
    var and__3969__auto__ = cursor;
    if (and__3969__auto__) {
      return cursor.om$core$IRootKey$_root_key$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return cursor.om$core$IRootKey$_root_key$arity$1(cursor);
  } else {
    var x__4625__auto__ = cursor == null ? null : cursor;
    return function() {
      var or__3981__auto__ = om.core._root_key[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._root_key["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IRootKey.-root-key", cursor);
        }
      }
    }().call(null, cursor);
  }
};
om.core.IAdapt = function() {
  var obj101091 = {};
  return obj101091;
}();
om.core._adapt = function _adapt(this$, other) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IAdapt$_adapt$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IAdapt$_adapt$arity$2(this$, other);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core._adapt[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._adapt["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAdapt.-adapt", this$);
        }
      }
    }().call(null, this$, other);
  }
};
om.core.IAdapt["_"] = true;
om.core._adapt["_"] = function(_, other) {
  return other;
};
om.core.adapt = function adapt(x, other) {
  return om.core._adapt.call(null, x, other);
};
om.core.IOmRef = function() {
  var obj101093 = {};
  return obj101093;
}();
om.core._add_dep_BANG_ = function _add_dep_BANG_(this$, c) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IOmRef$_add_dep_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_add_dep_BANG_$arity$2(this$, c);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core._add_dep_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._add_dep_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-add-dep!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._remove_dep_BANG_ = function _remove_dep_BANG_(this$, c) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IOmRef$_remove_dep_BANG_$arity$2;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_remove_dep_BANG_$arity$2(this$, c);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core._remove_dep_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._remove_dep_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-remove-dep!", this$);
        }
      }
    }().call(null, this$, c);
  }
};
om.core._refresh_deps_BANG_ = function _refresh_deps_BANG_(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IOmRef$_refresh_deps_BANG_$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_refresh_deps_BANG_$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core._refresh_deps_BANG_[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._refresh_deps_BANG_["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-refresh-deps!", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core._get_deps = function _get_deps(this$) {
  if (function() {
    var and__3969__auto__ = this$;
    if (and__3969__auto__) {
      return this$.om$core$IOmRef$_get_deps$arity$1;
    } else {
      return and__3969__auto__;
    }
  }()) {
    return this$.om$core$IOmRef$_get_deps$arity$1(this$);
  } else {
    var x__4625__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3981__auto__ = om.core._get_deps[goog.typeOf(x__4625__auto__)];
      if (or__3981__auto__) {
        return or__3981__auto__;
      } else {
        var or__3981__auto____$1 = om.core._get_deps["_"];
        if (or__3981__auto____$1) {
          return or__3981__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IOmRef.-get-deps", this$);
        }
      }
    }().call(null, this$);
  }
};
om.core.transact_STAR_ = function transact_STAR_(state, cursor, korks, f, tag) {
  var old_state = cljs.core.deref.call(null, state);
  var path = cljs.core.into.call(null, om.core.path.call(null, cursor), korks);
  var ret = function() {
    var G__101095 = state;
    if (G__101095) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101095.om$core$IOmSwap$;
        }
      }())) {
        return true;
      } else {
        if (!G__101095.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__101095);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmSwap, G__101095);
    }
  }() ? om.core._om_swap_BANG_.call(null, state, cursor, korks, f, tag) : cljs.core.empty_QMARK_.call(null, path) ? cljs.core.swap_BANG_.call(null, state, f) : cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, path, f);
  if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "defer", "om.core/defer", -1038866178))) {
    return null;
  } else {
    var tx_data = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "path", "path", -188191168), path, new cljs.core.Keyword(null, "old-value", "old-value", 862546795), cljs.core.get_in.call(null, old_state, path), new cljs.core.Keyword(null, "new-value", "new-value", 1087038368), cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path), new cljs.core.Keyword(null, "old-state", "old-state", 1039580704), old_state, new cljs.core.Keyword(null, "new-state", "new-state", 
    -490349212), cljs.core.deref.call(null, state)], null);
    if (!(tag == null)) {
      return om.core.notify_STAR_.call(null, cursor, cljs.core.assoc.call(null, tx_data, new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag));
    } else {
      return om.core.notify_STAR_.call(null, cursor, tx_data);
    }
  }
};
om.core.cursor_QMARK_ = function cursor_QMARK_(x) {
  var G__101097 = x;
  if (G__101097) {
    var bit__4662__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3981__auto__ = bit__4662__auto__;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return G__101097.om$core$ICursor$;
      }
    }())) {
      return true;
    } else {
      if (!G__101097.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__101097);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__101097);
  }
};
om.core.component_QMARK_ = function component_QMARK_(x) {
  return x["isOmComponent"];
};
om.core.children = function children(node) {
  var c = node.props.children;
  if (cljs.core.ifn_QMARK_.call(null, c)) {
    return node.props.children = c.call(null, node);
  } else {
    return c;
  }
};
om.core.get_props = function() {
  var get_props = null;
  var get_props__1 = function(x) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, x))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "x", "x", -555367584, null))))].join(""));
    }
    return x.props["__om_cursor"];
  };
  var get_props__2 = function(x, korks) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, x))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "x", "x", -555367584, null))))].join(""));
    }
    var korks__$1 = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    var G__101099 = x.props["__om_cursor"];
    var G__101099__$1 = cljs.core.seq.call(null, korks__$1) ? cljs.core.get_in.call(null, G__101099, korks__$1) : G__101099;
    return G__101099__$1;
  };
  get_props = function(x, korks) {
    switch(arguments.length) {
      case 1:
        return get_props__1.call(this, x);
      case 2:
        return get_props__2.call(this, x, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_props.cljs$core$IFn$_invoke$arity$1 = get_props__1;
  get_props.cljs$core$IFn$_invoke$arity$2 = get_props__2;
  return get_props;
}();
om.core.get_state = function() {
  var get_state = null;
  var get_state__1 = function(owner) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    return om.core._get_state.call(null, owner);
  };
  var get_state__2 = function(owner, korks) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._get_state.call(null, owner, ks);
  };
  get_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_state__1.call(this, owner);
      case 2:
        return get_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_state.cljs$core$IFn$_invoke$arity$1 = get_state__1;
  get_state.cljs$core$IFn$_invoke$arity$2 = get_state__2;
  return get_state;
}();
om.core.get_shared = function() {
  var get_shared = null;
  var get_shared__1 = function(owner) {
    if (owner == null) {
      return null;
    } else {
      return owner.props["__om_shared"];
    }
  };
  var get_shared__2 = function(owner, korks) {
    if (!cljs.core.sequential_QMARK_.call(null, korks)) {
      return cljs.core.get.call(null, get_shared.call(null, owner), korks);
    } else {
      if (cljs.core.empty_QMARK_.call(null, korks)) {
        return get_shared.call(null, owner);
      } else {
        return cljs.core.get_in.call(null, get_shared.call(null, owner), korks);
      }
    }
  };
  get_shared = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_shared__1.call(this, owner);
      case 2:
        return get_shared__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_shared.cljs$core$IFn$_invoke$arity$1 = get_shared__1;
  get_shared.cljs$core$IFn$_invoke$arity$2 = get_shared__2;
  return get_shared;
}();
om.core.merge_pending_state = function merge_pending_state(owner) {
  var state = owner.state;
  var temp__4126__auto__ = state["__om_pending_state"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var pending_state = temp__4126__auto__;
    var G__101101 = state;
    G__101101["__om_prev_state"] = state["__om_state"];
    G__101101["__om_state"] = pending_state;
    G__101101["__om_pending_state"] = null;
    return G__101101;
  } else {
    return null;
  }
};
om.core.merge_props_state = function() {
  var merge_props_state = null;
  var merge_props_state__1 = function(owner) {
    return merge_props_state.call(null, owner, null);
  };
  var merge_props_state__2 = function(owner, props) {
    var props__$1 = function() {
      var or__3981__auto__ = props;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return owner.props;
      }
    }();
    var temp__4126__auto__ = props__$1["__om_state"];
    if (cljs.core.truth_(temp__4126__auto__)) {
      var props_state = temp__4126__auto__;
      var state = owner.state;
      state["__om_pending_state"] = cljs.core.merge.call(null, function() {
        var or__3981__auto__ = state["__om_pending_state"];
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return state["__om_state"];
        }
      }(), props_state);
      return props__$1["__om_state"] = null;
    } else {
      return null;
    }
  };
  merge_props_state = function(owner, props) {
    switch(arguments.length) {
      case 1:
        return merge_props_state__1.call(this, owner);
      case 2:
        return merge_props_state__2.call(this, owner, props);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge_props_state.cljs$core$IFn$_invoke$arity$1 = merge_props_state__1;
  merge_props_state.cljs$core$IFn$_invoke$arity$2 = merge_props_state__2;
  return merge_props_state;
}();
om.core.ref_changed_QMARK_ = function ref_changed_QMARK_(ref) {
  var val = om.core.value.call(null, ref);
  var val_SINGLEQUOTE_ = cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.state.call(null, ref)), om.core.path.call(null, ref), new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
  return cljs.core.not_EQ_.call(null, val, val_SINGLEQUOTE_);
};
om.core.update_refs = function update_refs(c) {
  var cstate = c.state;
  var refs = cstate["__om_refs"];
  if (cljs.core.count.call(null, refs) === 0) {
    return null;
  } else {
    return cstate["__om_refs"] = cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.filter.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, function(cstate, refs) {
      return function(ref) {
        var ref_val = om.core.value.call(null, ref);
        var ref_state = om.core.state.call(null, ref);
        var ref_path = om.core.path.call(null, ref);
        var ref_val_SINGLEQUOTE_ = cljs.core.get_in.call(null, cljs.core.deref.call(null, ref_state), ref_path, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
        if (cljs.core.not_EQ_.call(null, ref_val, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275))) {
          if (cljs.core.not_EQ_.call(null, ref_val, ref_val_SINGLEQUOTE_)) {
            return om.core.adapt.call(null, ref, om.core.to_cursor.call(null, ref_val_SINGLEQUOTE_, ref_state, ref_path));
          } else {
            return ref;
          }
        } else {
          return null;
        }
      };
    }(cstate, refs), refs)));
  }
};
om.core.pure_methods = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "componentDidUpdate", "componentDidUpdate", -1983477981), new cljs.core.Keyword(null, "isOmComponent", "isOmComponent", -2070015162), new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), new cljs.core.Keyword(null, "componentWillReceiveProps", "componentWillReceiveProps", 559988974), new cljs.core.Keyword(null, "shouldComponentUpdate", "shouldComponentUpdate", 1795750960), 
new cljs.core.Keyword(null, "render", "render", -1408033454), new cljs.core.Keyword(null, "componentWillUpdate", "componentWillUpdate", 657390932), new cljs.core.Keyword(null, "getInitialState", "getInitialState", 1541760916), new cljs.core.Keyword(null, "componentDidMount", "componentDidMount", 955710936), new cljs.core.Keyword(null, "getDisplayName", "getDisplayName", 1324429466), new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619)], [function(prev_props, prev_state) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__101103 = c;
    if (G__101103) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101103.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__101103.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__101103);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__101103);
    }
  }()) {
    var state_101124 = this$.state;
    om.core.did_update.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":prev_props}), function() {
      var or__3981__auto__ = state_101124["__om_prev_state"];
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return state_101124["__om_state"];
      }
    }());
  } else {
  }
  return this$.state["__om_prev_state"] = null;
}, true, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var cursor = this$.props["__om_cursor"];
  if (function() {
    var G__101104 = c;
    if (G__101104) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101104.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__101104.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__101104);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__101104);
    }
  }()) {
    om.core.will_unmount.call(null, c);
  } else {
  }
  var temp__4126__auto__ = cljs.core.seq.call(null, this$.state["__om_refs"]);
  if (temp__4126__auto__) {
    var refs = temp__4126__auto__;
    var seq__101105 = cljs.core.seq.call(null, refs);
    var chunk__101106 = null;
    var count__101107 = 0;
    var i__101108 = 0;
    while (true) {
      if (i__101108 < count__101107) {
        var ref = cljs.core._nth.call(null, chunk__101106, i__101108);
        om.core.unobserve.call(null, this$, ref);
        var G__101125 = seq__101105;
        var G__101126 = chunk__101106;
        var G__101127 = count__101107;
        var G__101128 = i__101108 + 1;
        seq__101105 = G__101125;
        chunk__101106 = G__101126;
        count__101107 = G__101127;
        i__101108 = G__101128;
        continue;
      } else {
        var temp__4126__auto____$1 = cljs.core.seq.call(null, seq__101105);
        if (temp__4126__auto____$1) {
          var seq__101105__$1 = temp__4126__auto____$1;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__101105__$1)) {
            var c__4768__auto__ = cljs.core.chunk_first.call(null, seq__101105__$1);
            var G__101129 = cljs.core.chunk_rest.call(null, seq__101105__$1);
            var G__101130 = c__4768__auto__;
            var G__101131 = cljs.core.count.call(null, c__4768__auto__);
            var G__101132 = 0;
            seq__101105 = G__101129;
            chunk__101106 = G__101130;
            count__101107 = G__101131;
            i__101108 = G__101132;
            continue;
          } else {
            var ref = cljs.core.first.call(null, seq__101105__$1);
            om.core.unobserve.call(null, this$, ref);
            var G__101133 = cljs.core.next.call(null, seq__101105__$1);
            var G__101134 = null;
            var G__101135 = 0;
            var G__101136 = 0;
            seq__101105 = G__101133;
            chunk__101106 = G__101134;
            count__101107 = G__101135;
            i__101108 = G__101136;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } else {
    return null;
  }
}, function(next_props) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__101109 = c;
    if (G__101109) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101109.om$core$IWillReceiveProps$;
        }
      }())) {
        return true;
      } else {
        if (!G__101109.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__101109);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillReceiveProps, G__101109);
    }
  }()) {
    return om.core.will_receive_props.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}));
  } else {
    return null;
  }
}, function(next_props, next_state) {
  var this$ = this;
  var props = this$.props;
  var state = this$.state;
  var c = om.core.children.call(null, this$);
  om.core.merge_props_state.call(null, this$, next_props);
  if (function() {
    var G__101110 = c;
    if (G__101110) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101110.om$core$IShouldUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__101110.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__101110);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IShouldUpdate, G__101110);
    }
  }()) {
    return om.core.should_update.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}), om.core._get_state.call(null, this$));
  } else {
    var cursor = props["__om_cursor"];
    var next_cursor = next_props["__om_cursor"];
    if (cljs.core.not_EQ_.call(null, om.core._value.call(null, cursor), om.core._value.call(null, next_cursor))) {
      return true;
    } else {
      if (om.core.cursor_QMARK_.call(null, cursor) && om.core.cursor_QMARK_.call(null, next_cursor) && cljs.core.not_EQ_.call(null, om.core._path.call(null, cursor), om.core._path.call(null, next_cursor))) {
        return true;
      } else {
        if (cljs.core.not_EQ_.call(null, om.core._get_state.call(null, this$), om.core._get_render_state.call(null, this$))) {
          return true;
        } else {
          if (cljs.core.truth_(function() {
            var and__3969__auto__ = !(cljs.core.count.call(null, state["__om_refs"]) === 0);
            if (and__3969__auto__) {
              return cljs.core.some.call(null, function(and__3969__auto__, cursor, next_cursor, props, state, c, this$) {
                return function(p1__101102_SHARP_) {
                  return om.core.ref_changed_QMARK_.call(null, p1__101102_SHARP_);
                };
              }(and__3969__auto__, cursor, next_cursor, props, state, c, this$), state["__om_refs"]);
            } else {
              return and__3969__auto__;
            }
          }())) {
            return true;
          } else {
            if (!(props["__om_index"] === next_props["__om_index"])) {
              return true;
            } else {
              return false;
            }
          }
        }
      }
    }
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var _STAR_parent_STAR_101111 = om.core._STAR_parent_STAR_;
  var _STAR_state_STAR_101112 = om.core._STAR_state_STAR_;
  var _STAR_instrument_STAR_101113 = om.core._STAR_instrument_STAR_;
  var _STAR_descriptor_STAR_101114 = om.core._STAR_descriptor_STAR_;
  var _STAR_root_key_STAR_101115 = om.core._STAR_root_key_STAR_;
  om.core._STAR_parent_STAR_ = this$;
  om.core._STAR_state_STAR_ = props["__om_app_state"];
  om.core._STAR_instrument_STAR_ = props["__om_instrument"];
  om.core._STAR_descriptor_STAR_ = props["__om_descriptor"];
  om.core._STAR_root_key_STAR_ = props["__om_root_key"];
  try {
    if (function() {
      var G__101116 = c;
      if (G__101116) {
        var bit__4662__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3981__auto__ = bit__4662__auto__;
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return G__101116.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__101116.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__101116);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__101116);
      }
    }()) {
      return om.core.render.call(null, c);
    } else {
      if (function() {
        var G__101117 = c;
        if (G__101117) {
          var bit__4662__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3981__auto__ = bit__4662__auto__;
            if (cljs.core.truth_(or__3981__auto__)) {
              return or__3981__auto__;
            } else {
              return G__101117.om$core$IRenderProps$;
            }
          }())) {
            return true;
          } else {
            if (!G__101117.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__101117);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__101117);
        }
      }()) {
        return om.core.render_props.call(null, c, props["__om_cursor"], om.core.get_state.call(null, this$));
      } else {
        if (function() {
          var G__101118 = c;
          if (G__101118) {
            var bit__4662__auto__ = null;
            if (cljs.core.truth_(function() {
              var or__3981__auto__ = bit__4662__auto__;
              if (cljs.core.truth_(or__3981__auto__)) {
                return or__3981__auto__;
              } else {
                return G__101118.om$core$IRenderState$;
              }
            }())) {
              return true;
            } else {
              if (!G__101118.cljs$lang$protocol_mask$partition$) {
                return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__101118);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__101118);
          }
        }()) {
          return om.core.render_state.call(null, c, om.core.get_state.call(null, this$));
        } else {
          return c;
        }
      }
    }
  } finally {
    om.core._STAR_root_key_STAR_ = _STAR_root_key_STAR_101115;
    om.core._STAR_descriptor_STAR_ = _STAR_descriptor_STAR_101114;
    om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_101113;
    om.core._STAR_state_STAR_ = _STAR_state_STAR_101112;
    om.core._STAR_parent_STAR_ = _STAR_parent_STAR_101111;
  }
}, function(next_props, next_state) {
  var this$ = this;
  var c_101137 = om.core.children.call(null, this$);
  if (function() {
    var G__101119 = c_101137;
    if (G__101119) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101119.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__101119.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__101119);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__101119);
    }
  }()) {
    var state_101138 = this$.state;
    om.core.will_update.call(null, c_101137, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}), om.core._get_state.call(null, this$));
  } else {
  }
  om.core.merge_pending_state.call(null, this$);
  return om.core.update_refs.call(null, this$);
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__3981__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var id = (new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)).cljs$core$IFn$_invoke$arity$1(istate);
  var ret = {"__om_state":cljs.core.merge.call(null, function() {
    var G__101120 = c;
    if (G__101120) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101120.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__101120.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__101120);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__101120);
    }
  }() ? om.core.init_state.call(null, c) : null, cljs.core.dissoc.call(null, istate, new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693))), "__om_id":function() {
    var or__3981__auto__ = id;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return goog.ui.IdGenerator.getInstance().getNextUniqueId();
    }
  }()};
  props["__om_init_state"] = null;
  return ret;
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var cursor = this$.props["__om_cursor"];
  if (function() {
    var G__101121 = c;
    if (G__101121) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101121.om$core$IDidMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__101121.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__101121);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidMount, G__101121);
    }
  }()) {
    return om.core.did_mount.call(null, c);
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__101122 = c;
    if (G__101122) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101122.om$core$IDisplayName$;
        }
      }())) {
        return true;
      } else {
        if (!G__101122.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__101122);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDisplayName, G__101122);
    }
  }()) {
    return om.core.display_name.call(null, c);
  } else {
    return null;
  }
}, function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_101139 = om.core.children.call(null, this$);
  if (function() {
    var G__101123 = c_101139;
    if (G__101123) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101123.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__101123.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__101123);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__101123);
    }
  }()) {
    om.core.will_mount.call(null, c_101139);
  } else {
  }
  return om.core.merge_pending_state.call(null, this$);
}]);
om.core.specify_state_methods_BANG_ = function specify_state_methods_BANG_(obj) {
  var x101141 = obj;
  x101141.om$core$IGetState$ = true;
  x101141.om$core$IGetState$_get_state$arity$1 = function(x101141) {
    return function(this$) {
      var this$__$1 = this;
      var state = this$__$1.state;
      var or__3981__auto__ = state["__om_pending_state"];
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return state["__om_state"];
      }
    };
  }(x101141);
  x101141.om$core$IGetState$_get_state$arity$2 = function(x101141) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_state.call(null, this$__$1), ks);
    };
  }(x101141);
  x101141.om$core$IGetRenderState$ = true;
  x101141.om$core$IGetRenderState$_get_render_state$arity$1 = function(x101141) {
    return function(this$) {
      var this$__$1 = this;
      return this$__$1.state["__om_state"];
    };
  }(x101141);
  x101141.om$core$IGetRenderState$_get_render_state$arity$2 = function(x101141) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_render_state.call(null, this$__$1), ks);
    };
  }(x101141);
  x101141.om$core$ISetState$ = true;
  x101141.om$core$ISetState$_set_state_BANG_$arity$3 = function(x101141) {
    return function(this$, val, render) {
      var this$__$1 = this;
      var props = this$__$1.props;
      var app_state = props["__om_app_state"];
      this$__$1.state["__om_pending_state"] = val;
      if (cljs.core.truth_(function() {
        var and__3969__auto__ = !(app_state == null);
        if (and__3969__auto__) {
          return render;
        } else {
          return and__3969__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, app_state, this$__$1);
      } else {
        return null;
      }
    };
  }(x101141);
  x101141.om$core$ISetState$_set_state_BANG_$arity$4 = function(x101141) {
    return function(this$, ks, val, render) {
      var this$__$1 = this;
      var props = this$__$1.props;
      var state = this$__$1.state;
      var pstate = om.core._get_state.call(null, this$__$1);
      var app_state = props["__om_app_state"];
      state["__om_pending_state"] = cljs.core.assoc_in.call(null, pstate, ks, val);
      if (cljs.core.truth_(function() {
        var and__3969__auto__ = !(app_state == null);
        if (and__3969__auto__) {
          return render;
        } else {
          return and__3969__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, app_state, this$__$1);
      } else {
        return null;
      }
    };
  }(x101141);
  return x101141;
};
om.core.pure_descriptor = om.core.specify_state_methods_BANG_.call(null, cljs.core.clj__GT_js.call(null, om.core.pure_methods));
om.core.react_id = function react_id(x) {
  var id = x["_rootNodeID"];
  if (cljs.core.truth_(id)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "id", "id", 252129435, null)))].join(""));
  }
  return id;
};
om.core.get_gstate = function get_gstate(owner) {
  return owner.props["__om_app_state"];
};
om.core.no_local_merge_pending_state = function no_local_merge_pending_state(owner) {
  var gstate = om.core.get_gstate.call(null, owner);
  var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, owner)], null);
  var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, gstate), spath);
  if (cljs.core.truth_((new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states))) {
    return cljs.core.swap_BANG_.call(null, gstate, cljs.core.update_in, spath, function(gstate, spath, states) {
      return function(states__$1) {
        return cljs.core.dissoc.call(null, cljs.core.assoc.call(null, cljs.core.assoc.call(null, states__$1, new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923), (new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states__$1)), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270), cljs.core.merge.call(null, (new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states__$1), 
        (new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states__$1))), new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973));
      };
    }(gstate, spath, states));
  } else {
    return null;
  }
};
om.core.no_local_state_methods = cljs.core.assoc.call(null, om.core.pure_methods, new cljs.core.Keyword(null, "getInitialState", "getInitialState", 1541760916), function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var props = this$.props;
  var istate = function() {
    var or__3981__auto__ = props["__om_init_state"];
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  var om_id = function() {
    var or__3981__auto__ = (new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)).cljs$core$IFn$_invoke$arity$1(istate);
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return goog.ui.IdGenerator.getInstance().getNextUniqueId();
    }
  }();
  var state = cljs.core.merge.call(null, cljs.core.dissoc.call(null, istate, new cljs.core.Keyword("om.core", "id", "om.core/id", 299074693)), function() {
    var G__101142 = c;
    if (G__101142) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101142.om$core$IInitState$;
        }
      }())) {
        return true;
      } else {
        if (!G__101142.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__101142);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IInitState, G__101142);
    }
  }() ? om.core.init_state.call(null, c) : null);
  var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)], null);
  props["__om_init_state"] = null;
  cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$), cljs.core.assoc_in, spath, state);
  return{"__om_id":om_id};
}, new cljs.core.Keyword(null, "componentWillMount", "componentWillMount", -285327619), function() {
  var this$ = this;
  om.core.merge_props_state.call(null, this$);
  var c_101151 = om.core.children.call(null, this$);
  if (function() {
    var G__101143 = c_101151;
    if (G__101143) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101143.om$core$IWillMount$;
        }
      }())) {
        return true;
      } else {
        if (!G__101143.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__101143);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillMount, G__101143);
    }
  }()) {
    om.core.will_mount.call(null, c_101151);
  } else {
  }
  return om.core.no_local_merge_pending_state.call(null, this$);
}, new cljs.core.Keyword(null, "componentWillUnmount", "componentWillUnmount", 1573788814), function() {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  if (function() {
    var G__101144 = c;
    if (G__101144) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101144.om$core$IWillUnmount$;
        }
      }())) {
        return true;
      } else {
        if (!G__101144.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__101144);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUnmount, G__101144);
    }
  }()) {
    om.core.will_unmount.call(null, c);
  } else {
  }
  cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128)], null), cljs.core.dissoc, om.core.react_id.call(null, this$));
  var temp__4126__auto__ = cljs.core.seq.call(null, this$.state["__om_refs"]);
  if (temp__4126__auto__) {
    var refs = temp__4126__auto__;
    var seq__101145 = cljs.core.seq.call(null, refs);
    var chunk__101146 = null;
    var count__101147 = 0;
    var i__101148 = 0;
    while (true) {
      if (i__101148 < count__101147) {
        var ref = cljs.core._nth.call(null, chunk__101146, i__101148);
        om.core.unobserve.call(null, this$, ref);
        var G__101152 = seq__101145;
        var G__101153 = chunk__101146;
        var G__101154 = count__101147;
        var G__101155 = i__101148 + 1;
        seq__101145 = G__101152;
        chunk__101146 = G__101153;
        count__101147 = G__101154;
        i__101148 = G__101155;
        continue;
      } else {
        var temp__4126__auto____$1 = cljs.core.seq.call(null, seq__101145);
        if (temp__4126__auto____$1) {
          var seq__101145__$1 = temp__4126__auto____$1;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__101145__$1)) {
            var c__4768__auto__ = cljs.core.chunk_first.call(null, seq__101145__$1);
            var G__101156 = cljs.core.chunk_rest.call(null, seq__101145__$1);
            var G__101157 = c__4768__auto__;
            var G__101158 = cljs.core.count.call(null, c__4768__auto__);
            var G__101159 = 0;
            seq__101145 = G__101156;
            chunk__101146 = G__101157;
            count__101147 = G__101158;
            i__101148 = G__101159;
            continue;
          } else {
            var ref = cljs.core.first.call(null, seq__101145__$1);
            om.core.unobserve.call(null, this$, ref);
            var G__101160 = cljs.core.next.call(null, seq__101145__$1);
            var G__101161 = null;
            var G__101162 = 0;
            var G__101163 = 0;
            seq__101145 = G__101160;
            chunk__101146 = G__101161;
            count__101147 = G__101162;
            i__101148 = G__101163;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } else {
    return null;
  }
}, new cljs.core.Keyword(null, "componentWillUpdate", "componentWillUpdate", 657390932), function(next_props, next_state) {
  var this$ = this;
  var props_101164 = this$.props;
  var c_101165 = om.core.children.call(null, this$);
  if (function() {
    var G__101149 = c_101165;
    if (G__101149) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101149.om$core$IWillUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__101149.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__101149);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IWillUpdate, G__101149);
    }
  }()) {
    var state_101166 = this$.state;
    om.core.will_update.call(null, c_101165, om.core.get_props.call(null, {"isOmComponent":true, "props":next_props}), om.core._get_state.call(null, this$));
  } else {
  }
  om.core.no_local_merge_pending_state.call(null, this$);
  return om.core.update_refs.call(null, this$);
}, new cljs.core.Keyword(null, "componentDidUpdate", "componentDidUpdate", -1983477981), function(prev_props, prev_state) {
  var this$ = this;
  var c = om.core.children.call(null, this$);
  var gstate = om.core.get_gstate.call(null, this$);
  var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, gstate), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$)], null));
  var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$)], null);
  if (function() {
    var G__101150 = c;
    if (G__101150) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101150.om$core$IDidUpdate$;
        }
      }())) {
        return true;
      } else {
        if (!G__101150.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__101150);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IDidUpdate, G__101150);
    }
  }()) {
    var state_101167 = this$.state;
    om.core.did_update.call(null, c, om.core.get_props.call(null, {"isOmComponent":true, "props":prev_props}), function() {
      var or__3981__auto__ = (new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923)).cljs$core$IFn$_invoke$arity$1(states);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return(new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states);
      }
    }());
  } else {
  }
  if (cljs.core.truth_((new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923)).cljs$core$IFn$_invoke$arity$1(states))) {
    return cljs.core.swap_BANG_.call(null, gstate, cljs.core.update_in, spath, cljs.core.dissoc, new cljs.core.Keyword(null, "previous-state", "previous-state", 1888227923));
  } else {
    return null;
  }
});
om.core.no_local_descriptor = function no_local_descriptor(methods$) {
  var x101169 = cljs.core.clj__GT_js.call(null, methods$);
  x101169.om$core$IGetState$ = true;
  x101169.om$core$IGetState$_get_state$arity$1 = function(x101169) {
    return function(this$) {
      var this$__$1 = this;
      var spath = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1)], null);
      var states = cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.get_gstate.call(null, this$__$1)), spath);
      var or__3981__auto__ = (new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)).cljs$core$IFn$_invoke$arity$1(states);
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return(new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)).cljs$core$IFn$_invoke$arity$1(states);
      }
    };
  }(x101169);
  x101169.om$core$IGetState$_get_state$arity$2 = function(x101169) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_state.call(null, this$__$1), ks);
    };
  }(x101169);
  x101169.om$core$IGetRenderState$ = true;
  x101169.om$core$IGetRenderState$_get_render_state$arity$1 = function(x101169) {
    return function(this$) {
      var this$__$1 = this;
      var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1), new cljs.core.Keyword(null, "render-state", "render-state", 2053902270)], null);
      return cljs.core.get_in.call(null, cljs.core.deref.call(null, om.core.get_gstate.call(null, this$__$1)), spath);
    };
  }(x101169);
  x101169.om$core$IGetRenderState$_get_render_state$arity$2 = function(x101169) {
    return function(this$, ks) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, om.core._get_render_state.call(null, this$__$1), ks);
    };
  }(x101169);
  x101169.om$core$ISetState$ = true;
  x101169.om$core$ISetState$_set_state_BANG_$arity$3 = function(x101169) {
    return function(this$, val, render) {
      var this$__$1 = this;
      var gstate = om.core.get_gstate.call(null, this$__$1);
      var spath = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state-map", "state-map", -1313872128), om.core.react_id.call(null, this$__$1), new cljs.core.Keyword(null, "pending-state", "pending-state", 1525896973)], null);
      cljs.core.swap_BANG_.call(null, om.core.get_gstate.call(null, this$__$1), cljs.core.assoc_in, spath, val);
      if (cljs.core.truth_(function() {
        var and__3969__auto__ = !(gstate == null);
        if (and__3969__auto__) {
          return render;
        } else {
          return and__3969__auto__;
        }
      }())) {
        return om.core._queue_render_BANG_.call(null, gstate, this$__$1);
      } else {
        return null;
      }
    };
  }(x101169);
  x101169.om$core$ISetState$_set_state_BANG_$arity$4 = function(x101169) {
    return function(this$, ks, val, render) {
      var this$__$1 = this;
      return om.core._set_state_BANG_.call(null, this$__$1, cljs.core.assoc_in.call(null, om.core._get_state.call(null, this$__$1), ks, val), render);
    };
  }(x101169);
  return x101169;
};
om.core.valid_QMARK_ = function valid_QMARK_(x) {
  if (function() {
    var G__101171 = x;
    if (G__101171) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101171.om$core$ICursor$;
        }
      }())) {
        return true;
      } else {
        if (!G__101171.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__101171);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICursor, G__101171);
    }
  }()) {
    return!cljs.core.keyword_identical_QMARK_.call(null, cljs.core.deref.call(null, x), new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
  } else {
    return true;
  }
};
om.core.MapCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2163640079;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, k) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.call(null, this$__$1, k, null);
};
om.core.MapCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, k, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var v = cljs.core._lookup.call(null, self__.value, k, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275));
  if (!cljs.core._EQ_.call(null, v, new cljs.core.Keyword("om.core", "not-found", "om.core/not-found", 1869894275))) {
    return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k));
  } else {
    return not_found;
  }
};
om.core.MapCursor.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._kv_reduce.call(null, self__.value, f, init);
};
om.core.MapCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._pr_writer.call(null, self__.value, writer, opts);
};
om.core.MapCursor.prototype.om$core$ICursor$ = true;
om.core.MapCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.MapCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.MapCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.meta.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(self__.value, self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._count.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, self__.value);
};
om.core.MapCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core.cursor_QMARK_.call(null, other)) {
    return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
  } else {
    return cljs.core._EQ_.call(null, self__.value, other);
  }
};
om.core.MapCursor.prototype.om$core$IValue$ = true;
om.core.MapCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.MapCursor.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core.empty.call(null, self__.value), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$IMap$_dissoc$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._dissoc.call(null, self__.value, k), self__.state, self__.path);
};
om.core.MapCursor.prototype.om$core$ITransact$ = true;
om.core.MapCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
};
om.core.MapCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(_, k, v) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._assoc.call(null, self__.value, k, v), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.value) > 0) {
    return cljs.core.map.call(null, function(this$__$1) {
      return function(p__101173) {
        var vec__101174 = p__101173;
        var k = cljs.core.nth.call(null, vec__101174, 0, null);
        var v = cljs.core.nth.call(null, vec__101174, 1, null);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, k))], null);
      };
    }(this$__$1), self__.value);
  } else {
    return null;
  }
};
om.core.MapCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
};
om.core.MapCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.MapCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
};
om.core.MapCursor.prototype.call = function() {
  var G__101175 = null;
  var G__101175__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__101175__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__101175 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__101175__2.call(this, self__, k);
      case 3:
        return G__101175__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__101175.cljs$core$IFn$_invoke$arity$2 = G__101175__2;
  G__101175.cljs$core$IFn$_invoke$arity$3 = G__101175__3;
  return G__101175;
}();
om.core.MapCursor.prototype.apply = function(self__, args101172) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args101172)));
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
om.core.MapCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
om.core.MapCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
};
om.core.MapCursor.cljs$lang$type = true;
om.core.MapCursor.cljs$lang$ctorStr = "om.core/MapCursor";
om.core.MapCursor.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "om.core/MapCursor");
};
om.core.__GT_MapCursor = function __GT_MapCursor(value, state, path) {
  return new om.core.MapCursor(value, state, path);
};
om.core.IndexedCursor = function(value, state, path) {
  this.value = value;
  this.state = state;
  this.path = path;
  this.cljs$lang$protocol_mask$partition0$ = 2180424479;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, n, null);
};
om.core.IndexedCursor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._nth.call(null, this$__$1, n, not_found);
};
om.core.IndexedCursor.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._kv_reduce.call(null, self__.value, f, init);
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$2 = function(this$, n) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n), self__.state, cljs.core.conj.call(null, self__.path, n));
};
om.core.IndexedCursor.prototype.cljs$core$IIndexed$_nth$arity$3 = function(this$, n, not_found) {
  var self__ = this;
  var this$__$1 = this;
  if (n < cljs.core._count.call(null, self__.value)) {
    return om.core._derive.call(null, this$__$1, cljs.core._nth.call(null, self__.value, n, not_found), self__.state, cljs.core.conj.call(null, self__.path, n));
  } else {
    return not_found;
  }
};
om.core.IndexedCursor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, opts) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._pr_writer.call(null, self__.value, writer, opts);
};
om.core.IndexedCursor.prototype.om$core$ICursor$ = true;
om.core.IndexedCursor.prototype.om$core$ICursor$_path$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.path;
};
om.core.IndexedCursor.prototype.om$core$ICursor$_state$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
om.core.IndexedCursor.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.meta.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(self__.value, self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._count.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_peek$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._peek.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$IStack$_pop$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._pop.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash.call(null, self__.value);
};
om.core.IndexedCursor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (om.core.cursor_QMARK_.call(null, other)) {
    return cljs.core._EQ_.call(null, self__.value, om.core._value.call(null, other));
  } else {
    return cljs.core._EQ_.call(null, self__.value, other);
  }
};
om.core.IndexedCursor.prototype.om$core$IValue$ = true;
om.core.IndexedCursor.prototype.om$core$IValue$_value$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
om.core.IndexedCursor.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core.empty.call(null, self__.value), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.om$core$ITransact$ = true;
om.core.IndexedCursor.prototype.om$core$ITransact$_transact_BANG_$arity$4 = function(this$, korks, f, tag) {
  var self__ = this;
  var this$__$1 = this;
  return om.core.transact_STAR_.call(null, self__.state, this$__$1, korks, f, tag);
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core._contains_key_QMARK_.call(null, self__.value, k);
};
om.core.IndexedCursor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this$, n, v) {
  var self__ = this;
  var this$__$1 = this;
  return om.core._derive.call(null, this$__$1, cljs.core._assoc_n.call(null, self__.value, n, v), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.value) > 0) {
    return cljs.core.map.call(null, function(this$__$1) {
      return function(v, i) {
        return om.core._derive.call(null, this$__$1, v, self__.state, cljs.core.conj.call(null, self__.path, i));
      };
    }(this$__$1), self__.value, cljs.core.range.call(null));
  } else {
    return null;
  }
};
om.core.IndexedCursor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core.with_meta.call(null, self__.value, new_meta), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.cljs$core$ICollection$_conj$arity$2 = function(_, o) {
  var self__ = this;
  var ___$1 = this;
  return new om.core.IndexedCursor(cljs.core._conj.call(null, self__.value, o), self__.state, self__.path);
};
om.core.IndexedCursor.prototype.call = function() {
  var G__101177 = null;
  var G__101177__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k);
  };
  var G__101177__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core._lookup.call(null, this$, k, not_found);
  };
  G__101177 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__101177__2.call(this, self__, k);
      case 3:
        return G__101177__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__101177.cljs$core$IFn$_invoke$arity$2 = G__101177__2;
  G__101177.cljs$core$IFn$_invoke$arity$3 = G__101177__3;
  return G__101177;
}();
om.core.IndexedCursor.prototype.apply = function(self__, args101176) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args101176)));
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k);
};
om.core.IndexedCursor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var this$ = this;
  return cljs.core._lookup.call(null, this$, k, not_found);
};
om.core.IndexedCursor.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.state), self__.path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
};
om.core.IndexedCursor.cljs$lang$type = true;
om.core.IndexedCursor.cljs$lang$ctorStr = "om.core/IndexedCursor";
om.core.IndexedCursor.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
  return cljs.core._write.call(null, writer__4569__auto__, "om.core/IndexedCursor");
};
om.core.__GT_IndexedCursor = function __GT_IndexedCursor(value, state, path) {
  return new om.core.IndexedCursor(value, state, path);
};
om.core.to_cursor_STAR_ = function to_cursor_STAR_(val, state, path) {
  var x101179 = cljs.core.clone.call(null, val);
  x101179.cljs$core$IEquiv$ = true;
  x101179.cljs$core$IEquiv$_equiv$arity$2 = function(x101179) {
    return function(_, other) {
      var ___$1 = this;
      if (om.core.cursor_QMARK_.call(null, other)) {
        return cljs.core._EQ_.call(null, val, om.core._value.call(null, other));
      } else {
        return cljs.core._EQ_.call(null, val, other);
      }
    };
  }(x101179);
  x101179.om$core$ITransact$ = true;
  x101179.om$core$ITransact$_transact_BANG_$arity$4 = function(x101179) {
    return function(this$, korks, f, tag) {
      var this$__$1 = this;
      return om.core.transact_STAR_.call(null, state, this$__$1, korks, f, tag);
    };
  }(x101179);
  x101179.om$core$ICursor$ = true;
  x101179.om$core$ICursor$_path$arity$1 = function(x101179) {
    return function(_) {
      var ___$1 = this;
      return path;
    };
  }(x101179);
  x101179.om$core$ICursor$_state$arity$1 = function(x101179) {
    return function(_) {
      var ___$1 = this;
      return state;
    };
  }(x101179);
  x101179.cljs$core$IDeref$ = true;
  x101179.cljs$core$IDeref$_deref$arity$1 = function(x101179) {
    return function(this$) {
      var this$__$1 = this;
      return cljs.core.get_in.call(null, cljs.core.deref.call(null, state), path, new cljs.core.Keyword("om.core", "invalid", "om.core/invalid", 1948827993));
    };
  }(x101179);
  return x101179;
};
om.core.to_cursor = function() {
  var to_cursor = null;
  var to_cursor__1 = function(val) {
    return to_cursor.call(null, val, null, cljs.core.PersistentVector.EMPTY);
  };
  var to_cursor__2 = function(val, state) {
    return to_cursor.call(null, val, state, cljs.core.PersistentVector.EMPTY);
  };
  var to_cursor__3 = function(val, state, path) {
    if (om.core.cursor_QMARK_.call(null, val)) {
      return val;
    } else {
      if (function() {
        var G__101182 = val;
        if (G__101182) {
          var bit__4662__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3981__auto__ = bit__4662__auto__;
            if (cljs.core.truth_(or__3981__auto__)) {
              return or__3981__auto__;
            } else {
              return G__101182.om$core$IToCursor$;
            }
          }())) {
            return true;
          } else {
            if (!G__101182.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__101182);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IToCursor, G__101182);
        }
      }()) {
        return om.core._to_cursor.call(null, val, state, path);
      } else {
        if (cljs.core.indexed_QMARK_.call(null, val)) {
          return new om.core.IndexedCursor(val, state, path);
        } else {
          if (cljs.core.map_QMARK_.call(null, val)) {
            return new om.core.MapCursor(val, state, path);
          } else {
            if (function() {
              var G__101183 = val;
              if (G__101183) {
                var bit__4662__auto__ = G__101183.cljs$lang$protocol_mask$partition1$ & 8192;
                if (bit__4662__auto__ || G__101183.cljs$core$ICloneable$) {
                  return true;
                } else {
                  if (!G__101183.cljs$lang$protocol_mask$partition1$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__101183);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__101183);
              }
            }()) {
              return om.core.to_cursor_STAR_.call(null, val, state, path);
            } else {
              return val;
            }
          }
        }
      }
    }
  };
  to_cursor = function(val, state, path) {
    switch(arguments.length) {
      case 1:
        return to_cursor__1.call(this, val);
      case 2:
        return to_cursor__2.call(this, val, state);
      case 3:
        return to_cursor__3.call(this, val, state, path);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  to_cursor.cljs$core$IFn$_invoke$arity$1 = to_cursor__1;
  to_cursor.cljs$core$IFn$_invoke$arity$2 = to_cursor__2;
  to_cursor.cljs$core$IFn$_invoke$arity$3 = to_cursor__3;
  return to_cursor;
}();
om.core.notify_STAR_ = function notify_STAR_(cursor, tx_data) {
  var state = om.core._state.call(null, cursor);
  return om.core._notify_BANG_.call(null, state, tx_data, om.core.to_cursor.call(null, cljs.core.deref.call(null, state), state));
};
om.core.root_cursor = function root_cursor(atom) {
  if (function() {
    var G__101185 = atom;
    if (G__101185) {
      var bit__4662__auto__ = G__101185.cljs$lang$protocol_mask$partition0$ & 32768;
      if (bit__4662__auto__ || G__101185.cljs$core$IDeref$) {
        return true;
      } else {
        if (!G__101185.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__101185);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IDeref, G__101185);
    }
  }()) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IDeref", "IDeref", 1738423197, null), new cljs.core.Symbol(null, "atom", "atom", 1243487874, null))))].join(""));
  }
  return om.core.to_cursor.call(null, cljs.core.deref.call(null, atom), atom, cljs.core.PersistentVector.EMPTY);
};
om.core._refs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.ref_sub_cursor = function ref_sub_cursor(x, parent) {
  var x101187 = cljs.core.clone.call(null, x);
  x101187.om$core$ITransact$ = true;
  x101187.om$core$ITransact$_transact_BANG_$arity$4 = function(x101187) {
    return function(cursor, korks, f, tag) {
      var cursor__$1 = this;
      om.core.commit_BANG_.call(null, cursor__$1, korks, f);
      return om.core._refresh_deps_BANG_.call(null, parent);
    };
  }(x101187);
  x101187.om$core$ICursorDerive$ = true;
  x101187.om$core$ICursorDerive$_derive$arity$4 = function(x101187) {
    return function(this$, derived, state, path) {
      var this$__$1 = this;
      var cursor_SINGLEQUOTE_ = om.core.to_cursor.call(null, derived, state, path);
      if (om.core.cursor_QMARK_.call(null, cursor_SINGLEQUOTE_)) {
        return om.core.adapt.call(null, this$__$1, cursor_SINGLEQUOTE_);
      } else {
        return cursor_SINGLEQUOTE_;
      }
    };
  }(x101187);
  x101187.om$core$IAdapt$ = true;
  x101187.om$core$IAdapt$_adapt$arity$2 = function(x101187) {
    return function(this$, other) {
      var this$__$1 = this;
      return ref_sub_cursor.call(null, om.core.adapt.call(null, x, other), parent);
    };
  }(x101187);
  x101187.cljs$core$ICloneable$ = true;
  x101187.cljs$core$ICloneable$_clone$arity$1 = function(x101187) {
    return function(this$) {
      var this$__$1 = this;
      return ref_sub_cursor.call(null, cljs.core.clone.call(null, x), parent);
    };
  }(x101187);
  return x101187;
};
om.core.ref_cursor = function ref_cursor(cursor) {
  if (om.core.cursor_QMARK_.call(null, cursor)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  if (function() {
    var G__101194 = cursor;
    if (G__101194) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101194.om$core$IOmRef$;
        }
      }())) {
        return true;
      } else {
        if (!G__101194.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmRef, G__101194);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IOmRef, G__101194);
    }
  }()) {
    return cursor;
  } else {
    var path = om.core.path.call(null, cursor);
    var storage = cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, om.core._refs, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null), cljs.core.fnil.call(null, cljs.core.identity, cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY))), path);
    var x101195 = cljs.core.clone.call(null, cursor);
    x101195.om$core$ITransact$ = true;
    x101195.om$core$ITransact$_transact_BANG_$arity$4 = function(x101195, path, storage) {
      return function(cursor__$1, korks, f, tag) {
        var cursor__$2 = this;
        om.core.commit_BANG_.call(null, cursor__$2, korks, f);
        return om.core._refresh_deps_BANG_.call(null, cursor__$2);
      };
    }(x101195, path, storage);
    x101195.om$core$IOmRef$ = true;
    x101195.om$core$IOmRef$_add_dep_BANG_$arity$2 = function(x101195, path, storage) {
      return function(_, c) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, storage, cljs.core.assoc, om.core.id.call(null, c), c);
      };
    }(x101195, path, storage);
    x101195.om$core$IOmRef$_remove_dep_BANG_$arity$2 = function(x101195, path, storage) {
      return function(_, c) {
        var ___$1 = this;
        var m = cljs.core.swap_BANG_.call(null, storage, cljs.core.dissoc, om.core.id.call(null, c));
        if (cljs.core.count.call(null, m) === 0) {
          return cljs.core.swap_BANG_.call(null, om.core._refs, cljs.core.dissoc, path);
        } else {
          return null;
        }
      };
    }(x101195, path, storage);
    x101195.om$core$IOmRef$_refresh_deps_BANG_$arity$1 = function(x101195, path, storage) {
      return function(_) {
        var ___$1 = this;
        var seq__101196 = cljs.core.seq.call(null, cljs.core.vals.call(null, cljs.core.deref.call(null, storage)));
        var chunk__101197 = null;
        var count__101198 = 0;
        var i__101199 = 0;
        while (true) {
          if (i__101199 < count__101198) {
            var c = cljs.core._nth.call(null, chunk__101197, i__101199);
            om.core._queue_render_BANG_.call(null, om.core.state.call(null, cursor), c);
            var G__101200 = seq__101196;
            var G__101201 = chunk__101197;
            var G__101202 = count__101198;
            var G__101203 = i__101199 + 1;
            seq__101196 = G__101200;
            chunk__101197 = G__101201;
            count__101198 = G__101202;
            i__101199 = G__101203;
            continue;
          } else {
            var temp__4126__auto__ = cljs.core.seq.call(null, seq__101196);
            if (temp__4126__auto__) {
              var seq__101196__$1 = temp__4126__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__101196__$1)) {
                var c__4768__auto__ = cljs.core.chunk_first.call(null, seq__101196__$1);
                var G__101204 = cljs.core.chunk_rest.call(null, seq__101196__$1);
                var G__101205 = c__4768__auto__;
                var G__101206 = cljs.core.count.call(null, c__4768__auto__);
                var G__101207 = 0;
                seq__101196 = G__101204;
                chunk__101197 = G__101205;
                count__101198 = G__101206;
                i__101199 = G__101207;
                continue;
              } else {
                var c = cljs.core.first.call(null, seq__101196__$1);
                om.core._queue_render_BANG_.call(null, om.core.state.call(null, cursor), c);
                var G__101208 = cljs.core.next.call(null, seq__101196__$1);
                var G__101209 = null;
                var G__101210 = 0;
                var G__101211 = 0;
                seq__101196 = G__101208;
                chunk__101197 = G__101209;
                count__101198 = G__101210;
                i__101199 = G__101211;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(x101195, path, storage);
    x101195.om$core$IOmRef$_get_deps$arity$1 = function(x101195, path, storage) {
      return function(_) {
        var ___$1 = this;
        return cljs.core.deref.call(null, storage);
      };
    }(x101195, path, storage);
    x101195.om$core$ICursorDerive$ = true;
    x101195.om$core$ICursorDerive$_derive$arity$4 = function(x101195, path, storage) {
      return function(this$, derived, state, path__$1) {
        var this$__$1 = this;
        var cursor_SINGLEQUOTE_ = om.core.to_cursor.call(null, derived, state, path__$1);
        if (om.core.cursor_QMARK_.call(null, cursor_SINGLEQUOTE_)) {
          return om.core.ref_sub_cursor.call(null, cursor_SINGLEQUOTE_, this$__$1);
        } else {
          return cursor_SINGLEQUOTE_;
        }
      };
    }(x101195, path, storage);
    return x101195;
  }
};
om.core.add_ref_to_component_BANG_ = function add_ref_to_component_BANG_(c, ref) {
  var state = c.state;
  var refs = function() {
    var or__3981__auto__ = state["__om_refs"];
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return cljs.core.PersistentHashSet.EMPTY;
    }
  }();
  if (cljs.core.contains_QMARK_.call(null, refs, ref)) {
    return null;
  } else {
    return state["__om_refs"] = cljs.core.conj.call(null, refs, ref);
  }
};
om.core.remove_ref_from_component_BANG_ = function remove_ref_from_component_BANG_(c, ref) {
  var state = c.state;
  var refs = state["__om_refs"];
  if (cljs.core.contains_QMARK_.call(null, refs, ref)) {
    return state["__om_refs"] = cljs.core.disj.call(null, refs, ref);
  } else {
    return null;
  }
};
om.core.observe = function observe(c, ref) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, c))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "c", "c", -122660552, null))))].join(""));
  }
  if (om.core.cursor_QMARK_.call(null, ref)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "ref", "ref", -1364538802, null))))].join(""));
  }
  om.core.add_ref_to_component_BANG_.call(null, c, ref);
  om.core._add_dep_BANG_.call(null, ref, c);
  return ref;
};
om.core.unobserve = function unobserve(c, ref) {
  om.core.remove_ref_from_component_BANG_.call(null, c, ref);
  om.core._remove_dep_BANG_.call(null, ref, c);
  return ref;
};
om.core.refresh_queued = false;
om.core.refresh_set = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
om.core.get_renderT = function get_renderT(state) {
  var or__3981__auto__ = state.om$render$T;
  if (cljs.core.truth_(or__3981__auto__)) {
    return or__3981__auto__;
  } else {
    return 0;
  }
};
om.core.render_all = function() {
  var render_all = null;
  var render_all__0 = function() {
    return render_all.call(null, null);
  };
  var render_all__1 = function(state) {
    om.core.refresh_queued = false;
    var seq__101216_101220 = cljs.core.seq.call(null, cljs.core.deref.call(null, om.core.refresh_set));
    var chunk__101217_101221 = null;
    var count__101218_101222 = 0;
    var i__101219_101223 = 0;
    while (true) {
      if (i__101219_101223 < count__101218_101222) {
        var f_101224 = cljs.core._nth.call(null, chunk__101217_101221, i__101219_101223);
        f_101224.call(null);
        var G__101225 = seq__101216_101220;
        var G__101226 = chunk__101217_101221;
        var G__101227 = count__101218_101222;
        var G__101228 = i__101219_101223 + 1;
        seq__101216_101220 = G__101225;
        chunk__101217_101221 = G__101226;
        count__101218_101222 = G__101227;
        i__101219_101223 = G__101228;
        continue;
      } else {
        var temp__4126__auto___101229 = cljs.core.seq.call(null, seq__101216_101220);
        if (temp__4126__auto___101229) {
          var seq__101216_101230__$1 = temp__4126__auto___101229;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__101216_101230__$1)) {
            var c__4768__auto___101231 = cljs.core.chunk_first.call(null, seq__101216_101230__$1);
            var G__101232 = cljs.core.chunk_rest.call(null, seq__101216_101230__$1);
            var G__101233 = c__4768__auto___101231;
            var G__101234 = cljs.core.count.call(null, c__4768__auto___101231);
            var G__101235 = 0;
            seq__101216_101220 = G__101232;
            chunk__101217_101221 = G__101233;
            count__101218_101222 = G__101234;
            i__101219_101223 = G__101235;
            continue;
          } else {
            var f_101236 = cljs.core.first.call(null, seq__101216_101230__$1);
            f_101236.call(null);
            var G__101237 = cljs.core.next.call(null, seq__101216_101230__$1);
            var G__101238 = null;
            var G__101239 = 0;
            var G__101240 = 0;
            seq__101216_101220 = G__101237;
            chunk__101217_101221 = G__101238;
            count__101218_101222 = G__101239;
            i__101219_101223 = G__101240;
            continue;
          }
        } else {
        }
      }
      break;
    }
    if (state == null) {
      return null;
    } else {
      return state.om$render$T = om.core.get_renderT.call(null, state) + 1;
    }
  };
  render_all = function(state) {
    switch(arguments.length) {
      case 0:
        return render_all__0.call(this);
      case 1:
        return render_all__1.call(this, state);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  render_all.cljs$core$IFn$_invoke$arity$0 = render_all__0;
  render_all.cljs$core$IFn$_invoke$arity$1 = render_all__1;
  return render_all;
}();
om.core.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.core.valid_component_QMARK_ = function valid_component_QMARK_(x, f) {
  if (function() {
    var or__3981__auto__ = function() {
      var G__101247 = x;
      if (G__101247) {
        var bit__4662__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3981__auto__ = bit__4662__auto__;
          if (cljs.core.truth_(or__3981__auto__)) {
            return or__3981__auto__;
          } else {
            return G__101247.om$core$IRender$;
          }
        }())) {
          return true;
        } else {
          if (!G__101247.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__101247);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRender, G__101247);
      }
    }();
    if (or__3981__auto__) {
      return or__3981__auto__;
    } else {
      var or__3981__auto____$1 = function() {
        var G__101249 = x;
        if (G__101249) {
          var bit__4662__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3981__auto____$1 = bit__4662__auto__;
            if (cljs.core.truth_(or__3981__auto____$1)) {
              return or__3981__auto____$1;
            } else {
              return G__101249.om$core$IRenderProps$;
            }
          }())) {
            return true;
          } else {
            if (!G__101249.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__101249);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderProps, G__101249);
        }
      }();
      if (or__3981__auto____$1) {
        return or__3981__auto____$1;
      } else {
        var G__101250 = x;
        if (G__101250) {
          var bit__4662__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3981__auto____$2 = bit__4662__auto__;
            if (cljs.core.truth_(or__3981__auto____$2)) {
              return or__3981__auto____$2;
            } else {
              return G__101250.om$core$IRenderState$;
            }
          }())) {
            return true;
          } else {
            if (!G__101250.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__101250);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRenderState, G__101250);
        }
      }
    }
  }()) {
    return null;
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("Invalid Om component fn, "), cljs.core.str(f.name), cljs.core.str(" does not return valid instance")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRender", "IRender", 590822196, null), new cljs.core.Symbol(null, 
    "x", "x", -555367584, null)), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRenderProps", "IRenderProps", 2115139472, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)), cljs.core.list(new cljs.core.Symbol(null, "satisfies?", "satisfies?", -433227199, null), new cljs.core.Symbol(null, "IRenderState", "IRenderState", -897673898, null), new cljs.core.Symbol(null, "x", "x", -555367584, null)))))].join(""));
  }
};
om.core.valid_opts_QMARK_ = function valid_opts_QMARK_(m) {
  return cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018), null, new cljs.core.Keyword(null, "fn", "fn", -1175266204), null, new cljs.core.Keyword(null, "instrument", "instrument", -960698844), null, new cljs.core.Keyword(null, "react-key", "react-key", 1337881348), null, new cljs.core.Keyword(null, "key", "key", -1516042587), null, new cljs.core.Keyword(null, "init-state", 
  "init-state", 1450863212), null, new cljs.core.Keyword(null, "state", "state", -1988618099), null, new cljs.core.Keyword(null, "key-fn", "key-fn", -636154479), null, new cljs.core.Keyword(null, "opts", "opts", 155075701), null, new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434), null, new cljs.core.Keyword(null, "shared", "shared", -384145993), null], null), null), cljs.core.keys.call(null, m));
};
om.core.id = function id(owner) {
  return owner.state["__om_id"];
};
om.core.get_descriptor = function() {
  var get_descriptor = null;
  var get_descriptor__1 = function(f) {
    return get_descriptor.call(null, f, null);
  };
  var get_descriptor__2 = function(f, descriptor) {
    if (f["om$descriptor"] == null) {
      f["om$descriptor"] = React.createFactory(React.createClass(function() {
        var or__3981__auto__ = descriptor;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          var or__3981__auto____$1 = om.core._STAR_descriptor_STAR_;
          if (cljs.core.truth_(or__3981__auto____$1)) {
            return or__3981__auto____$1;
          } else {
            return om.core.pure_descriptor;
          }
        }
      }()));
    } else {
    }
    return f["om$descriptor"];
  };
  get_descriptor = function(f, descriptor) {
    switch(arguments.length) {
      case 1:
        return get_descriptor__1.call(this, f);
      case 2:
        return get_descriptor__2.call(this, f, descriptor);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_descriptor.cljs$core$IFn$_invoke$arity$1 = get_descriptor__1;
  get_descriptor.cljs$core$IFn$_invoke$arity$2 = get_descriptor__2;
  return get_descriptor;
}();
om.core.getf = function() {
  var getf = null;
  var getf__2 = function(f, cursor) {
    if (f instanceof cljs.core.MultiFn) {
      var dv = f.dispatch_fn.call(null, cursor, null);
      return cljs.core.get_method.call(null, f, dv);
    } else {
      return f;
    }
  };
  var getf__3 = function(f, cursor, opts) {
    if (f instanceof cljs.core.MultiFn) {
      var dv = f.dispatch_fn.call(null, cursor, null, opts);
      return cljs.core.get_method.call(null, f, dv);
    } else {
      return f;
    }
  };
  getf = function(f, cursor, opts) {
    switch(arguments.length) {
      case 2:
        return getf__2.call(this, f, cursor);
      case 3:
        return getf__3.call(this, f, cursor, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  getf.cljs$core$IFn$_invoke$arity$2 = getf__2;
  getf.cljs$core$IFn$_invoke$arity$3 = getf__3;
  return getf;
}();
om.core.build_STAR_ = function() {
  var build_STAR_ = null;
  var build_STAR___2 = function(f, cursor) {
    return build_STAR_.call(null, f, cursor, null);
  };
  var build_STAR___3 = function(f, cursor, m) {
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    if (m == null || cljs.core.map_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
    }
    if (om.core.valid_opts_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, "build options contains invalid keys, only :key, :key-fn :react-key, ", ":fn, :init-state, :state, and :opts allowed, given ", cljs.core.interpose.call(null, ", ", cljs.core.keys.call(null, m)))), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "valid-opts?", "valid-opts?", 1000038576, null), new cljs.core.Symbol(null, "m", "m", 
      -1021758608, null))))].join(""));
    }
    if (m == null) {
      var shared = om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
      var ctor = om.core.get_descriptor.call(null, om.core.getf.call(null, f, cursor));
      return ctor.call(null, {"children":function(shared, ctor) {
        return function(this$) {
          var ret = f.call(null, cursor, this$);
          om.core.valid_component_QMARK_.call(null, ret, f);
          return ret;
        };
      }(shared, ctor), "__om_instrument":om.core._STAR_instrument_STAR_, "__om_descriptor":om.core._STAR_descriptor_STAR_, "__om_app_state":om.core._STAR_state_STAR_, "__om_root_key":om.core._STAR_root_key_STAR_, "__om_shared":shared, "__om_cursor":cursor});
    } else {
      var map__101252 = m;
      var map__101252__$1 = cljs.core.seq_QMARK_.call(null, map__101252) ? cljs.core.apply.call(null, cljs.core.hash_map, map__101252) : map__101252;
      var opts = cljs.core.get.call(null, map__101252__$1, new cljs.core.Keyword(null, "opts", "opts", 155075701));
      var init_state = cljs.core.get.call(null, map__101252__$1, new cljs.core.Keyword(null, "init-state", "init-state", 1450863212));
      var state = cljs.core.get.call(null, map__101252__$1, new cljs.core.Keyword(null, "state", "state", -1988618099));
      var key_fn = cljs.core.get.call(null, map__101252__$1, new cljs.core.Keyword(null, "key-fn", "key-fn", -636154479));
      var key = cljs.core.get.call(null, map__101252__$1, new cljs.core.Keyword(null, "key", "key", -1516042587));
      var dataf = cljs.core.get.call(null, m, new cljs.core.Keyword(null, "fn", "fn", -1175266204));
      var cursor_SINGLEQUOTE_ = !(dataf == null) ? function() {
        var temp__4124__auto__ = (new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var i = temp__4124__auto__;
          return dataf.call(null, cursor, i);
        } else {
          return dataf.call(null, cursor);
        }
      }() : cursor;
      var rkey = !(key == null) ? cljs.core.get.call(null, cursor_SINGLEQUOTE_, key) : !(key_fn == null) ? key_fn.call(null, cursor_SINGLEQUOTE_) : cljs.core.get.call(null, m, new cljs.core.Keyword(null, "react-key", "react-key", 1337881348));
      var shared = function() {
        var or__3981__auto__ = (new cljs.core.Keyword(null, "shared", "shared", -384145993)).cljs$core$IFn$_invoke$arity$1(m);
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return om.core.get_shared.call(null, om.core._STAR_parent_STAR_);
        }
      }();
      var ctor = om.core.get_descriptor.call(null, om.core.getf.call(null, f, cursor_SINGLEQUOTE_, opts), (new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018)).cljs$core$IFn$_invoke$arity$1(m));
      return ctor.call(null, {"__om_state":state, "__om_instrument":om.core._STAR_instrument_STAR_, "children":opts == null ? function(map__101252, map__101252__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) {
        return function(this$) {
          var ret = f.call(null, cursor_SINGLEQUOTE_, this$);
          om.core.valid_component_QMARK_.call(null, ret, f);
          return ret;
        };
      }(map__101252, map__101252__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) : function(map__101252, map__101252__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor) {
        return function(this$) {
          var ret = f.call(null, cursor_SINGLEQUOTE_, this$, opts);
          om.core.valid_component_QMARK_.call(null, ret, f);
          return ret;
        };
      }(map__101252, map__101252__$1, opts, init_state, state, key_fn, key, dataf, cursor_SINGLEQUOTE_, rkey, shared, ctor), "__om_init_state":init_state, "key":function() {
        var or__3981__auto__ = rkey;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return undefined;
        }
      }(), "__om_app_state":om.core._STAR_state_STAR_, "__om_cursor":cursor_SINGLEQUOTE_, "__om_index":(new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434)).cljs$core$IFn$_invoke$arity$1(m), "__om_shared":shared, "__om_descriptor":om.core._STAR_descriptor_STAR_, "__om_root_key":om.core._STAR_root_key_STAR_});
    }
  };
  build_STAR_ = function(f, cursor, m) {
    switch(arguments.length) {
      case 2:
        return build_STAR___2.call(this, f, cursor);
      case 3:
        return build_STAR___3.call(this, f, cursor, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build_STAR_.cljs$core$IFn$_invoke$arity$2 = build_STAR___2;
  build_STAR_.cljs$core$IFn$_invoke$arity$3 = build_STAR___3;
  return build_STAR_;
}();
om.core.build = function() {
  var build = null;
  var build__2 = function(f, x) {
    return build.call(null, f, x, null);
  };
  var build__3 = function(f, x, m) {
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    if (m == null || cljs.core.map_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
    }
    if (!(om.core._STAR_instrument_STAR_ == null)) {
      var ret = om.core._STAR_instrument_STAR_.call(null, f, x, m);
      if (cljs.core._EQ_.call(null, ret, new cljs.core.Keyword("om.core", "pass", "om.core/pass", -1453289268))) {
        return om.core.build_STAR_.call(null, f, x, m);
      } else {
        return ret;
      }
    } else {
      return om.core.build_STAR_.call(null, f, x, m);
    }
  };
  build = function(f, x, m) {
    switch(arguments.length) {
      case 2:
        return build__2.call(this, f, x);
      case 3:
        return build__3.call(this, f, x, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build.cljs$core$IFn$_invoke$arity$2 = build__2;
  build.cljs$core$IFn$_invoke$arity$3 = build__3;
  return build;
}();
om.core.build_all = function() {
  var build_all = null;
  var build_all__2 = function(f, xs) {
    return build_all.call(null, f, xs, null);
  };
  var build_all__3 = function(f, xs, m) {
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    if (m == null || cljs.core.map_QMARK_.call(null, m)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "or", "or", 1876275696, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)), cljs.core.list(new cljs.core.Symbol(null, "map?", "map?", -1780568534, null), new cljs.core.Symbol(null, "m", "m", -1021758608, null)))))].join(""));
    }
    return cljs.core.map.call(null, function(x, i) {
      return om.core.build.call(null, f, x, cljs.core.assoc.call(null, m, new cljs.core.Keyword("om.core", "index", "om.core/index", -1724175434), i));
    }, xs, cljs.core.range.call(null));
  };
  build_all = function(f, xs, m) {
    switch(arguments.length) {
      case 2:
        return build_all__2.call(this, f, xs);
      case 3:
        return build_all__3.call(this, f, xs, m);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  build_all.cljs$core$IFn$_invoke$arity$2 = build_all__2;
  build_all.cljs$core$IFn$_invoke$arity$3 = build_all__3;
  return build_all;
}();
om.core.setup = function setup(state, key, tx_listen) {
  if (function() {
    var G__101261 = state;
    if (G__101261) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101261.om$core$INotify$;
        }
      }())) {
        return true;
      } else {
        if (!G__101261.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__101261);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.INotify, G__101261);
    }
  }()) {
  } else {
    var properties_101269 = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var listeners_101270 = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var render_queue_101271 = cljs.core.atom.call(null, cljs.core.PersistentHashSet.EMPTY);
    var x101262_101272 = state;
    x101262_101272.om$core$IRenderQueue$ = true;
    x101262_101272.om$core$IRenderQueue$_get_queue$arity$1 = function(x101262_101272, properties_101269, listeners_101270, render_queue_101271) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.deref.call(null, render_queue_101271);
      };
    }(x101262_101272, properties_101269, listeners_101270, render_queue_101271);
    x101262_101272.om$core$IRenderQueue$_queue_render_BANG_$arity$2 = function(x101262_101272, properties_101269, listeners_101270, render_queue_101271) {
      return function(this$, c) {
        var this$__$1 = this;
        if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, render_queue_101271), c)) {
          return null;
        } else {
          cljs.core.swap_BANG_.call(null, render_queue_101271, cljs.core.conj, c);
          return cljs.core.swap_BANG_.call(null, this$__$1, cljs.core.identity);
        }
      };
    }(x101262_101272, properties_101269, listeners_101270, render_queue_101271);
    x101262_101272.om$core$IRenderQueue$_empty_queue_BANG_$arity$1 = function(x101262_101272, properties_101269, listeners_101270, render_queue_101271) {
      return function(this$) {
        var this$__$1 = this;
        return cljs.core.swap_BANG_.call(null, render_queue_101271, cljs.core.empty);
      };
    }(x101262_101272, properties_101269, listeners_101270, render_queue_101271);
    x101262_101272.om$core$INotify$ = true;
    x101262_101272.om$core$INotify$_listen_BANG_$arity$3 = function(x101262_101272, properties_101269, listeners_101270, render_queue_101271) {
      return function(this$, key__$1, tx_listen__$1) {
        var this$__$1 = this;
        if (tx_listen__$1 == null) {
        } else {
          cljs.core.swap_BANG_.call(null, listeners_101270, cljs.core.assoc, key__$1, tx_listen__$1);
        }
        return this$__$1;
      };
    }(x101262_101272, properties_101269, listeners_101270, render_queue_101271);
    x101262_101272.om$core$INotify$_unlisten_BANG_$arity$2 = function(x101262_101272, properties_101269, listeners_101270, render_queue_101271) {
      return function(this$, key__$1) {
        var this$__$1 = this;
        cljs.core.swap_BANG_.call(null, listeners_101270, cljs.core.dissoc, key__$1);
        return this$__$1;
      };
    }(x101262_101272, properties_101269, listeners_101270, render_queue_101271);
    x101262_101272.om$core$INotify$_notify_BANG_$arity$3 = function(x101262_101272, properties_101269, listeners_101270, render_queue_101271) {
      return function(this$, tx_data, root_cursor) {
        var this$__$1 = this;
        var seq__101263_101273 = cljs.core.seq.call(null, cljs.core.deref.call(null, listeners_101270));
        var chunk__101264_101274 = null;
        var count__101265_101275 = 0;
        var i__101266_101276 = 0;
        while (true) {
          if (i__101266_101276 < count__101265_101275) {
            var vec__101267_101277 = cljs.core._nth.call(null, chunk__101264_101274, i__101266_101276);
            var __101278 = cljs.core.nth.call(null, vec__101267_101277, 0, null);
            var f_101279 = cljs.core.nth.call(null, vec__101267_101277, 1, null);
            f_101279.call(null, tx_data, root_cursor);
            var G__101280 = seq__101263_101273;
            var G__101281 = chunk__101264_101274;
            var G__101282 = count__101265_101275;
            var G__101283 = i__101266_101276 + 1;
            seq__101263_101273 = G__101280;
            chunk__101264_101274 = G__101281;
            count__101265_101275 = G__101282;
            i__101266_101276 = G__101283;
            continue;
          } else {
            var temp__4126__auto___101284 = cljs.core.seq.call(null, seq__101263_101273);
            if (temp__4126__auto___101284) {
              var seq__101263_101285__$1 = temp__4126__auto___101284;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__101263_101285__$1)) {
                var c__4768__auto___101286 = cljs.core.chunk_first.call(null, seq__101263_101285__$1);
                var G__101287 = cljs.core.chunk_rest.call(null, seq__101263_101285__$1);
                var G__101288 = c__4768__auto___101286;
                var G__101289 = cljs.core.count.call(null, c__4768__auto___101286);
                var G__101290 = 0;
                seq__101263_101273 = G__101287;
                chunk__101264_101274 = G__101288;
                count__101265_101275 = G__101289;
                i__101266_101276 = G__101290;
                continue;
              } else {
                var vec__101268_101291 = cljs.core.first.call(null, seq__101263_101285__$1);
                var __101292 = cljs.core.nth.call(null, vec__101268_101291, 0, null);
                var f_101293 = cljs.core.nth.call(null, vec__101268_101291, 1, null);
                f_101293.call(null, tx_data, root_cursor);
                var G__101294 = cljs.core.next.call(null, seq__101263_101285__$1);
                var G__101295 = null;
                var G__101296 = 0;
                var G__101297 = 0;
                seq__101263_101273 = G__101294;
                chunk__101264_101274 = G__101295;
                count__101265_101275 = G__101296;
                i__101266_101276 = G__101297;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return this$__$1;
      };
    }(x101262_101272, properties_101269, listeners_101270, render_queue_101271);
    x101262_101272.om$core$IRootProperties$ = true;
    x101262_101272.om$core$IRootProperties$_set_property_BANG_$arity$4 = function(x101262_101272, properties_101269, listeners_101270, render_queue_101271) {
      return function(_, id, k, v) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_101269, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, k], null), v);
      };
    }(x101262_101272, properties_101269, listeners_101270, render_queue_101271);
    x101262_101272.om$core$IRootProperties$_remove_property_BANG_$arity$3 = function(x101262_101272, properties_101269, listeners_101270, render_queue_101271) {
      return function(_, id, k) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_101269, cljs.core.dissoc, id, k);
      };
    }(x101262_101272, properties_101269, listeners_101270, render_queue_101271);
    x101262_101272.om$core$IRootProperties$_remove_properties_BANG_$arity$2 = function(x101262_101272, properties_101269, listeners_101270, render_queue_101271) {
      return function(_, id) {
        var ___$1 = this;
        return cljs.core.swap_BANG_.call(null, properties_101269, cljs.core.dissoc, id);
      };
    }(x101262_101272, properties_101269, listeners_101270, render_queue_101271);
    x101262_101272.om$core$IRootProperties$_get_property$arity$3 = function(x101262_101272, properties_101269, listeners_101270, render_queue_101271) {
      return function(_, id, k) {
        var ___$1 = this;
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, properties_101269), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id, k], null));
      };
    }(x101262_101272, properties_101269, listeners_101270, render_queue_101271);
  }
  return om.core._listen_BANG_.call(null, state, key, tx_listen);
};
om.core.tear_down = function tear_down(state, key) {
  return om.core._unlisten_BANG_.call(null, state, key);
};
om.core.tag_root_key = function tag_root_key(cursor, root_key) {
  if (om.core.cursor_QMARK_.call(null, cursor)) {
    var x101299 = cljs.core.clone.call(null, cursor);
    x101299.om$core$IRootKey$ = true;
    x101299.om$core$IRootKey$_root_key$arity$1 = function(x101299) {
      return function(this$) {
        var this$__$1 = this;
        return root_key;
      };
    }(x101299);
    x101299.om$core$IAdapt$ = true;
    x101299.om$core$IAdapt$_adapt$arity$2 = function(x101299) {
      return function(this$, other) {
        var this$__$1 = this;
        return tag_root_key.call(null, om.core.adapt.call(null, cursor, other), root_key);
      };
    }(x101299);
    x101299.cljs$core$ICloneable$ = true;
    x101299.cljs$core$ICloneable$_clone$arity$1 = function(x101299) {
      return function(this$) {
        var this$__$1 = this;
        return tag_root_key.call(null, cljs.core.clone.call(null, cursor), root_key);
      };
    }(x101299);
    return x101299;
  } else {
    return cursor;
  }
};
om.core.root = function root(f, value, p__101300) {
  var map__101363 = p__101300;
  var map__101363__$1 = cljs.core.seq_QMARK_.call(null, map__101363) ? cljs.core.apply.call(null, cljs.core.hash_map, map__101363) : map__101363;
  var options = map__101363__$1;
  var raf = cljs.core.get.call(null, map__101363__$1, new cljs.core.Keyword(null, "raf", "raf", -1295410152));
  var adapt = cljs.core.get.call(null, map__101363__$1, new cljs.core.Keyword(null, "adapt", "adapt", -1817022327));
  var descriptor = cljs.core.get.call(null, map__101363__$1, new cljs.core.Keyword(null, "descriptor", "descriptor", 76122018));
  var instrument = cljs.core.get.call(null, map__101363__$1, new cljs.core.Keyword(null, "instrument", "instrument", -960698844));
  var path = cljs.core.get.call(null, map__101363__$1, new cljs.core.Keyword(null, "path", "path", -188191168));
  var tx_listen = cljs.core.get.call(null, map__101363__$1, new cljs.core.Keyword(null, "tx-listen", "tx-listen", 119130367));
  var target = cljs.core.get.call(null, map__101363__$1, new cljs.core.Keyword(null, "target", "target", 253001721));
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("First argument must be a function"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  if (!(target == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("No target specified to om.core/root"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "target", "target", 1893533248, null)))))].join(""));
  }
  var roots_SINGLEQUOTE__101425 = cljs.core.deref.call(null, om.core.roots);
  if (cljs.core.contains_QMARK_.call(null, roots_SINGLEQUOTE__101425, target)) {
    cljs.core.get.call(null, roots_SINGLEQUOTE__101425, target).call(null);
  } else {
  }
  var watch_key = cljs.core.gensym.call(null);
  var state = function() {
    var G__101364 = value;
    if (G__101364) {
      var bit__4662__auto__ = G__101364.cljs$lang$protocol_mask$partition1$ & 16384;
      if (bit__4662__auto__ || G__101364.cljs$core$IAtom$) {
        return true;
      } else {
        if (!G__101364.cljs$lang$protocol_mask$partition1$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__101364);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, G__101364);
    }
  }() ? value : cljs.core.atom.call(null, value);
  var state__$1 = om.core.setup.call(null, state, watch_key, tx_listen);
  var adapt__$1 = function() {
    var or__3981__auto__ = adapt;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return cljs.core.identity;
    }
  }();
  var m = cljs.core.dissoc.call(null, options, new cljs.core.Keyword(null, "target", "target", 253001721), new cljs.core.Keyword(null, "tx-listen", "tx-listen", 119130367), new cljs.core.Keyword(null, "path", "path", -188191168), new cljs.core.Keyword(null, "adapt", "adapt", -1817022327), new cljs.core.Keyword(null, "raf", "raf", -1295410152));
  var ret = cljs.core.atom.call(null, null);
  var rootf = function(watch_key, state, state__$1, adapt__$1, m, ret, map__101363, map__101363__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
    return function rootf() {
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, rootf);
      var value__$1 = cljs.core.deref.call(null, state__$1);
      var cursor = adapt__$1.call(null, om.core.tag_root_key.call(null, path == null ? om.core.to_cursor.call(null, value__$1, state__$1, cljs.core.PersistentVector.EMPTY) : om.core.to_cursor.call(null, cljs.core.get_in.call(null, value__$1, path), state__$1, path), watch_key));
      if (cljs.core.truth_(om.core._get_property.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643)))) {
      } else {
        var c_101426 = om.dom.render.call(null, function() {
          var _STAR_descriptor_STAR_101395 = om.core._STAR_descriptor_STAR_;
          var _STAR_instrument_STAR_101396 = om.core._STAR_instrument_STAR_;
          var _STAR_state_STAR_101397 = om.core._STAR_state_STAR_;
          var _STAR_root_key_STAR_101398 = om.core._STAR_root_key_STAR_;
          om.core._STAR_descriptor_STAR_ = descriptor;
          om.core._STAR_instrument_STAR_ = instrument;
          om.core._STAR_state_STAR_ = state__$1;
          om.core._STAR_root_key_STAR_ = watch_key;
          try {
            return om.core.build.call(null, f, cursor, m);
          } finally {
            om.core._STAR_root_key_STAR_ = _STAR_root_key_STAR_101398;
            om.core._STAR_state_STAR_ = _STAR_state_STAR_101397;
            om.core._STAR_instrument_STAR_ = _STAR_instrument_STAR_101396;
            om.core._STAR_descriptor_STAR_ = _STAR_descriptor_STAR_101395;
          }
        }(), target);
        if (cljs.core.deref.call(null, ret) == null) {
          cljs.core.reset_BANG_.call(null, ret, c_101426);
        } else {
        }
      }
      var queue_101427 = om.core._get_queue.call(null, state__$1);
      om.core._empty_queue_BANG_.call(null, state__$1);
      if (cljs.core.empty_QMARK_.call(null, queue_101427)) {
      } else {
        var seq__101399_101428 = cljs.core.seq.call(null, queue_101427);
        var chunk__101400_101429 = null;
        var count__101401_101430 = 0;
        var i__101402_101431 = 0;
        while (true) {
          if (i__101402_101431 < count__101401_101430) {
            var c_101432 = cljs.core._nth.call(null, chunk__101400_101429, i__101402_101431);
            if (cljs.core.truth_(c_101432.isMounted())) {
              var temp__4126__auto___101433 = c_101432.state["__om_next_cursor"];
              if (cljs.core.truth_(temp__4126__auto___101433)) {
                var next_props_101434 = temp__4126__auto___101433;
                c_101432.props["__om_cursor"] = next_props_101434;
                c_101432.state["__om_next_cursor"] = null;
              } else {
              }
              if (cljs.core.truth_(function() {
                var or__3981__auto__ = !function() {
                  var G__101404 = om.core.children.call(null, c_101432);
                  if (G__101404) {
                    var bit__4662__auto__ = null;
                    if (cljs.core.truth_(function() {
                      var or__3981__auto__ = bit__4662__auto__;
                      if (cljs.core.truth_(or__3981__auto__)) {
                        return or__3981__auto__;
                      } else {
                        return G__101404.om$core$ICheckState$;
                      }
                    }())) {
                      return true;
                    } else {
                      if (!G__101404.cljs$lang$protocol_mask$partition$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__101404);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__101404);
                  }
                }();
                if (or__3981__auto__) {
                  return or__3981__auto__;
                } else {
                  return c_101432.shouldComponentUpdate(c_101432.props, c_101432.state);
                }
              }())) {
                c_101432.forceUpdate();
              } else {
              }
            } else {
            }
            var G__101435 = seq__101399_101428;
            var G__101436 = chunk__101400_101429;
            var G__101437 = count__101401_101430;
            var G__101438 = i__101402_101431 + 1;
            seq__101399_101428 = G__101435;
            chunk__101400_101429 = G__101436;
            count__101401_101430 = G__101437;
            i__101402_101431 = G__101438;
            continue;
          } else {
            var temp__4126__auto___101439 = cljs.core.seq.call(null, seq__101399_101428);
            if (temp__4126__auto___101439) {
              var seq__101399_101440__$1 = temp__4126__auto___101439;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__101399_101440__$1)) {
                var c__4768__auto___101441 = cljs.core.chunk_first.call(null, seq__101399_101440__$1);
                var G__101442 = cljs.core.chunk_rest.call(null, seq__101399_101440__$1);
                var G__101443 = c__4768__auto___101441;
                var G__101444 = cljs.core.count.call(null, c__4768__auto___101441);
                var G__101445 = 0;
                seq__101399_101428 = G__101442;
                chunk__101400_101429 = G__101443;
                count__101401_101430 = G__101444;
                i__101402_101431 = G__101445;
                continue;
              } else {
                var c_101446 = cljs.core.first.call(null, seq__101399_101440__$1);
                if (cljs.core.truth_(c_101446.isMounted())) {
                  var temp__4126__auto___101447__$1 = c_101446.state["__om_next_cursor"];
                  if (cljs.core.truth_(temp__4126__auto___101447__$1)) {
                    var next_props_101448 = temp__4126__auto___101447__$1;
                    c_101446.props["__om_cursor"] = next_props_101448;
                    c_101446.state["__om_next_cursor"] = null;
                  } else {
                  }
                  if (cljs.core.truth_(function() {
                    var or__3981__auto__ = !function() {
                      var G__101406 = om.core.children.call(null, c_101446);
                      if (G__101406) {
                        var bit__4662__auto__ = null;
                        if (cljs.core.truth_(function() {
                          var or__3981__auto__ = bit__4662__auto__;
                          if (cljs.core.truth_(or__3981__auto__)) {
                            return or__3981__auto__;
                          } else {
                            return G__101406.om$core$ICheckState$;
                          }
                        }())) {
                          return true;
                        } else {
                          if (!G__101406.cljs$lang$protocol_mask$partition$) {
                            return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__101406);
                          } else {
                            return false;
                          }
                        }
                      } else {
                        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ICheckState, G__101406);
                      }
                    }();
                    if (or__3981__auto__) {
                      return or__3981__auto__;
                    } else {
                      return c_101446.shouldComponentUpdate(c_101446.props, c_101446.state);
                    }
                  }())) {
                    c_101446.forceUpdate();
                  } else {
                  }
                } else {
                }
                var G__101449 = cljs.core.next.call(null, seq__101399_101440__$1);
                var G__101450 = null;
                var G__101451 = 0;
                var G__101452 = 0;
                seq__101399_101428 = G__101449;
                chunk__101400_101429 = G__101450;
                count__101401_101430 = G__101451;
                i__101402_101431 = G__101452;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
      var _refs_101453 = cljs.core.deref.call(null, om.core._refs);
      if (cljs.core.empty_QMARK_.call(null, _refs_101453)) {
      } else {
        var seq__101407_101454 = cljs.core.seq.call(null, _refs_101453);
        var chunk__101408_101455 = null;
        var count__101409_101456 = 0;
        var i__101410_101457 = 0;
        while (true) {
          if (i__101410_101457 < count__101409_101456) {
            var vec__101411_101458 = cljs.core._nth.call(null, chunk__101408_101455, i__101410_101457);
            var path_101459__$1 = cljs.core.nth.call(null, vec__101411_101458, 0, null);
            var cs_101460 = cljs.core.nth.call(null, vec__101411_101458, 1, null);
            var cs_101461__$1 = cljs.core.deref.call(null, cs_101460);
            var seq__101412_101462 = cljs.core.seq.call(null, cs_101461__$1);
            var chunk__101413_101463 = null;
            var count__101414_101464 = 0;
            var i__101415_101465 = 0;
            while (true) {
              if (i__101415_101465 < count__101414_101464) {
                var vec__101416_101466 = cljs.core._nth.call(null, chunk__101413_101463, i__101415_101465);
                var id_101467 = cljs.core.nth.call(null, vec__101416_101466, 0, null);
                var c_101468 = cljs.core.nth.call(null, vec__101416_101466, 1, null);
                if (cljs.core.truth_(c_101468.shouldComponentUpdate(c_101468.props, c_101468.state))) {
                  c_101468.forceUpdate();
                } else {
                }
                var G__101469 = seq__101412_101462;
                var G__101470 = chunk__101413_101463;
                var G__101471 = count__101414_101464;
                var G__101472 = i__101415_101465 + 1;
                seq__101412_101462 = G__101469;
                chunk__101413_101463 = G__101470;
                count__101414_101464 = G__101471;
                i__101415_101465 = G__101472;
                continue;
              } else {
                var temp__4126__auto___101473 = cljs.core.seq.call(null, seq__101412_101462);
                if (temp__4126__auto___101473) {
                  var seq__101412_101474__$1 = temp__4126__auto___101473;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__101412_101474__$1)) {
                    var c__4768__auto___101475 = cljs.core.chunk_first.call(null, seq__101412_101474__$1);
                    var G__101476 = cljs.core.chunk_rest.call(null, seq__101412_101474__$1);
                    var G__101477 = c__4768__auto___101475;
                    var G__101478 = cljs.core.count.call(null, c__4768__auto___101475);
                    var G__101479 = 0;
                    seq__101412_101462 = G__101476;
                    chunk__101413_101463 = G__101477;
                    count__101414_101464 = G__101478;
                    i__101415_101465 = G__101479;
                    continue;
                  } else {
                    var vec__101417_101480 = cljs.core.first.call(null, seq__101412_101474__$1);
                    var id_101481 = cljs.core.nth.call(null, vec__101417_101480, 0, null);
                    var c_101482 = cljs.core.nth.call(null, vec__101417_101480, 1, null);
                    if (cljs.core.truth_(c_101482.shouldComponentUpdate(c_101482.props, c_101482.state))) {
                      c_101482.forceUpdate();
                    } else {
                    }
                    var G__101483 = cljs.core.next.call(null, seq__101412_101474__$1);
                    var G__101484 = null;
                    var G__101485 = 0;
                    var G__101486 = 0;
                    seq__101412_101462 = G__101483;
                    chunk__101413_101463 = G__101484;
                    count__101414_101464 = G__101485;
                    i__101415_101465 = G__101486;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            var G__101487 = seq__101407_101454;
            var G__101488 = chunk__101408_101455;
            var G__101489 = count__101409_101456;
            var G__101490 = i__101410_101457 + 1;
            seq__101407_101454 = G__101487;
            chunk__101408_101455 = G__101488;
            count__101409_101456 = G__101489;
            i__101410_101457 = G__101490;
            continue;
          } else {
            var temp__4126__auto___101491 = cljs.core.seq.call(null, seq__101407_101454);
            if (temp__4126__auto___101491) {
              var seq__101407_101492__$1 = temp__4126__auto___101491;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__101407_101492__$1)) {
                var c__4768__auto___101493 = cljs.core.chunk_first.call(null, seq__101407_101492__$1);
                var G__101494 = cljs.core.chunk_rest.call(null, seq__101407_101492__$1);
                var G__101495 = c__4768__auto___101493;
                var G__101496 = cljs.core.count.call(null, c__4768__auto___101493);
                var G__101497 = 0;
                seq__101407_101454 = G__101494;
                chunk__101408_101455 = G__101495;
                count__101409_101456 = G__101496;
                i__101410_101457 = G__101497;
                continue;
              } else {
                var vec__101418_101498 = cljs.core.first.call(null, seq__101407_101492__$1);
                var path_101499__$1 = cljs.core.nth.call(null, vec__101418_101498, 0, null);
                var cs_101500 = cljs.core.nth.call(null, vec__101418_101498, 1, null);
                var cs_101501__$1 = cljs.core.deref.call(null, cs_101500);
                var seq__101419_101502 = cljs.core.seq.call(null, cs_101501__$1);
                var chunk__101420_101503 = null;
                var count__101421_101504 = 0;
                var i__101422_101505 = 0;
                while (true) {
                  if (i__101422_101505 < count__101421_101504) {
                    var vec__101423_101506 = cljs.core._nth.call(null, chunk__101420_101503, i__101422_101505);
                    var id_101507 = cljs.core.nth.call(null, vec__101423_101506, 0, null);
                    var c_101508 = cljs.core.nth.call(null, vec__101423_101506, 1, null);
                    if (cljs.core.truth_(c_101508.shouldComponentUpdate(c_101508.props, c_101508.state))) {
                      c_101508.forceUpdate();
                    } else {
                    }
                    var G__101509 = seq__101419_101502;
                    var G__101510 = chunk__101420_101503;
                    var G__101511 = count__101421_101504;
                    var G__101512 = i__101422_101505 + 1;
                    seq__101419_101502 = G__101509;
                    chunk__101420_101503 = G__101510;
                    count__101421_101504 = G__101511;
                    i__101422_101505 = G__101512;
                    continue;
                  } else {
                    var temp__4126__auto___101513__$1 = cljs.core.seq.call(null, seq__101419_101502);
                    if (temp__4126__auto___101513__$1) {
                      var seq__101419_101514__$1 = temp__4126__auto___101513__$1;
                      if (cljs.core.chunked_seq_QMARK_.call(null, seq__101419_101514__$1)) {
                        var c__4768__auto___101515 = cljs.core.chunk_first.call(null, seq__101419_101514__$1);
                        var G__101516 = cljs.core.chunk_rest.call(null, seq__101419_101514__$1);
                        var G__101517 = c__4768__auto___101515;
                        var G__101518 = cljs.core.count.call(null, c__4768__auto___101515);
                        var G__101519 = 0;
                        seq__101419_101502 = G__101516;
                        chunk__101420_101503 = G__101517;
                        count__101421_101504 = G__101518;
                        i__101422_101505 = G__101519;
                        continue;
                      } else {
                        var vec__101424_101520 = cljs.core.first.call(null, seq__101419_101514__$1);
                        var id_101521 = cljs.core.nth.call(null, vec__101424_101520, 0, null);
                        var c_101522 = cljs.core.nth.call(null, vec__101424_101520, 1, null);
                        if (cljs.core.truth_(c_101522.shouldComponentUpdate(c_101522.props, c_101522.state))) {
                          c_101522.forceUpdate();
                        } else {
                        }
                        var G__101523 = cljs.core.next.call(null, seq__101419_101514__$1);
                        var G__101524 = null;
                        var G__101525 = 0;
                        var G__101526 = 0;
                        seq__101419_101502 = G__101523;
                        chunk__101420_101503 = G__101524;
                        count__101421_101504 = G__101525;
                        i__101422_101505 = G__101526;
                        continue;
                      }
                    } else {
                    }
                  }
                  break;
                }
                var G__101527 = cljs.core.next.call(null, seq__101407_101492__$1);
                var G__101528 = null;
                var G__101529 = 0;
                var G__101530 = 0;
                seq__101407_101454 = G__101527;
                chunk__101408_101455 = G__101528;
                count__101409_101456 = G__101529;
                i__101410_101457 = G__101530;
                continue;
              }
            } else {
            }
          }
          break;
        }
      }
      om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643), true);
      return cljs.core.deref.call(null, ret);
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, map__101363, map__101363__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target);
  cljs.core.add_watch.call(null, state__$1, watch_key, function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__101363, map__101363__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
    return function(_, ___$1, o, n) {
      if (cljs.core.not.call(null, om.core._get_property.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033))) && !(o === n)) {
        om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "skip-render-root", "skip-render-root", -5219643), false);
      } else {
      }
      om.core._set_property_BANG_.call(null, state__$1, watch_key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033), false);
      if (cljs.core.contains_QMARK_.call(null, cljs.core.deref.call(null, om.core.refresh_set), rootf)) {
      } else {
        cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.conj, rootf);
      }
      if (cljs.core.truth_(om.core.refresh_queued)) {
        return null;
      } else {
        om.core.refresh_queued = true;
        if (raf === false || !(typeof requestAnimationFrame !== "undefined")) {
          return setTimeout(function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__101363, map__101363__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
            return function() {
              return om.core.render_all.call(null, state__$1);
            };
          }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__101363, map__101363__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target), 16);
        } else {
          if (cljs.core.fn_QMARK_.call(null, raf)) {
            return raf.call(null);
          } else {
            return requestAnimationFrame(function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__101363, map__101363__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
              return function() {
                return om.core.render_all.call(null, state__$1);
              };
            }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__101363, map__101363__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target));
          }
        }
      }
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__101363, map__101363__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target));
  cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.assoc, target, function(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__101363, map__101363__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target) {
    return function() {
      om.core._remove_properties_BANG_.call(null, state__$1, watch_key);
      cljs.core.remove_watch.call(null, state__$1, watch_key);
      om.core.tear_down.call(null, state__$1, watch_key);
      cljs.core.swap_BANG_.call(null, om.core.refresh_set, cljs.core.disj, rootf);
      cljs.core.swap_BANG_.call(null, om.core.roots, cljs.core.dissoc, target);
      return React.unmountComponentAtNode(target);
    };
  }(watch_key, state, state__$1, adapt__$1, m, ret, rootf, map__101363, map__101363__$1, options, raf, adapt, descriptor, instrument, path, tx_listen, target));
  return rootf.call(null);
};
om.core.detach_root = function detach_root(target) {
  if (cljs.core.truth_(goog.dom.isElement(target))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol("gdom", "isElement", "gdom/isElement", 465934354, null), new cljs.core.Symbol(null, "target", "target", 1893533248, null))))].join(""));
  }
  var temp__4126__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, om.core.roots), target);
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    return f.call(null);
  } else {
    return null;
  }
};
om.core.transactable_QMARK_ = function transactable_QMARK_(x) {
  var G__101532 = x;
  if (G__101532) {
    var bit__4662__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3981__auto__ = bit__4662__auto__;
      if (cljs.core.truth_(or__3981__auto__)) {
        return or__3981__auto__;
      } else {
        return G__101532.om$core$ITransact$;
      }
    }())) {
      return true;
    } else {
      if (!G__101532.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, om.core.ITransact, G__101532);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, om.core.ITransact, G__101532);
  }
};
om.core.transact_BANG_ = function() {
  var transact_BANG_ = null;
  var transact_BANG___2 = function(cursor, f) {
    return transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, f, null);
  };
  var transact_BANG___3 = function(cursor, korks, f) {
    return transact_BANG_.call(null, cursor, korks, f, null);
  };
  var transact_BANG___4 = function(cursor, korks, f, tag) {
    if (om.core.transactable_QMARK_.call(null, cursor)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "transactable?", "transactable?", 780536292, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    var korks__$1 = korks == null ? cljs.core.PersistentVector.EMPTY : cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._transact_BANG_.call(null, cursor, korks__$1, f, tag);
  };
  transact_BANG_ = function(cursor, korks, f, tag) {
    switch(arguments.length) {
      case 2:
        return transact_BANG___2.call(this, cursor, korks);
      case 3:
        return transact_BANG___3.call(this, cursor, korks, f);
      case 4:
        return transact_BANG___4.call(this, cursor, korks, f, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transact_BANG_.cljs$core$IFn$_invoke$arity$2 = transact_BANG___2;
  transact_BANG_.cljs$core$IFn$_invoke$arity$3 = transact_BANG___3;
  transact_BANG_.cljs$core$IFn$_invoke$arity$4 = transact_BANG___4;
  return transact_BANG_;
}();
om.core.update_BANG_ = function() {
  var update_BANG_ = null;
  var update_BANG___2 = function(cursor, v) {
    if (om.core.cursor_QMARK_.call(null, cursor)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
    }
    return om.core.transact_BANG_.call(null, cursor, cljs.core.PersistentVector.EMPTY, function(_) {
      return v;
    }, null);
  };
  var update_BANG___3 = function(cursor, korks, v) {
    if (om.core.cursor_QMARK_.call(null, cursor)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
    }
    return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
      return v;
    }, null);
  };
  var update_BANG___4 = function(cursor, korks, v, tag) {
    if (om.core.cursor_QMARK_.call(null, cursor)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
    }
    return om.core.transact_BANG_.call(null, cursor, korks, function(_) {
      return v;
    }, tag);
  };
  update_BANG_ = function(cursor, korks, v, tag) {
    switch(arguments.length) {
      case 2:
        return update_BANG___2.call(this, cursor, korks);
      case 3:
        return update_BANG___3.call(this, cursor, korks, v);
      case 4:
        return update_BANG___4.call(this, cursor, korks, v, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_BANG_.cljs$core$IFn$_invoke$arity$2 = update_BANG___2;
  update_BANG_.cljs$core$IFn$_invoke$arity$3 = update_BANG___3;
  update_BANG_.cljs$core$IFn$_invoke$arity$4 = update_BANG___4;
  return update_BANG_;
}();
om.core.commit_BANG_ = function commit_BANG_(cursor, korks, f) {
  if (om.core.cursor_QMARK_.call(null, cursor)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "cursor?", "cursor?", -648342688, null), new cljs.core.Symbol(null, "cursor", "cursor", -1642498285, null))))].join(""));
  }
  if (cljs.core.ifn_QMARK_.call(null, f)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
  }
  var key = function() {
    var G__101534 = cursor;
    if (G__101534) {
      var bit__4662__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3981__auto__ = bit__4662__auto__;
        if (cljs.core.truth_(or__3981__auto__)) {
          return or__3981__auto__;
        } else {
          return G__101534.om$core$IRootKey$;
        }
      }())) {
        return true;
      } else {
        if (!G__101534.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRootKey, G__101534);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, om.core.IRootKey, G__101534);
    }
  }() ? om.core._root_key.call(null, cursor) : null;
  var app_state = om.core.state.call(null, cursor);
  var korks__$1 = korks == null ? cljs.core.PersistentVector.EMPTY : cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
  var cpath = om.core.path.call(null, cursor);
  var rpath = cljs.core.into.call(null, cpath, korks__$1);
  if (cljs.core.truth_(key)) {
    om.core._set_property_BANG_.call(null, app_state, key, new cljs.core.Keyword(null, "ignore", "ignore", -1631542033), true);
  } else {
  }
  if (cljs.core.empty_QMARK_.call(null, rpath)) {
    return cljs.core.swap_BANG_.call(null, app_state, f);
  } else {
    return cljs.core.swap_BANG_.call(null, app_state, cljs.core.update_in, rpath, f);
  }
};
om.core.get_node = function() {
  var get_node = null;
  var get_node__1 = function(owner) {
    return owner.getDOMNode();
  };
  var get_node__2 = function(owner, name) {
    if (typeof name === "string") {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "name", "name", -810760592, null))))].join(""));
    }
    var temp__4126__auto__ = owner.refs;
    if (cljs.core.truth_(temp__4126__auto__)) {
      var refs = temp__4126__auto__;
      return refs[name].getDOMNode();
    } else {
      return null;
    }
  };
  get_node = function(owner, name) {
    switch(arguments.length) {
      case 1:
        return get_node__1.call(this, owner);
      case 2:
        return get_node__2.call(this, owner, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_node.cljs$core$IFn$_invoke$arity$1 = get_node__1;
  get_node.cljs$core$IFn$_invoke$arity$2 = get_node__2;
  return get_node;
}();
om.core.mounted_QMARK_ = function mounted_QMARK_(owner) {
  return owner.isMounted();
};
om.core.set_state_BANG_ = function() {
  var set_state_BANG_ = null;
  var set_state_BANG___2 = function(owner, v) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    return om.core._set_state_BANG_.call(null, owner, v, true);
  };
  var set_state_BANG___3 = function(owner, korks, v) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._set_state_BANG_.call(null, owner, ks, v, true);
  };
  set_state_BANG_ = function(owner, korks, v) {
    switch(arguments.length) {
      case 2:
        return set_state_BANG___2.call(this, owner, korks);
      case 3:
        return set_state_BANG___3.call(this, owner, korks, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_state_BANG_.cljs$core$IFn$_invoke$arity$2 = set_state_BANG___2;
  set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = set_state_BANG___3;
  return set_state_BANG_;
}();
om.core.set_state_nr_BANG_ = function() {
  var set_state_nr_BANG_ = null;
  var set_state_nr_BANG___2 = function(owner, v) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    return om.core._set_state_BANG_.call(null, owner, v, false);
  };
  var set_state_nr_BANG___3 = function(owner, korks, v) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._set_state_BANG_.call(null, owner, ks, v, false);
  };
  set_state_nr_BANG_ = function(owner, korks, v) {
    switch(arguments.length) {
      case 2:
        return set_state_nr_BANG___2.call(this, owner, korks);
      case 3:
        return set_state_nr_BANG___3.call(this, owner, korks, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  set_state_nr_BANG_.cljs$core$IFn$_invoke$arity$2 = set_state_nr_BANG___2;
  set_state_nr_BANG_.cljs$core$IFn$_invoke$arity$3 = set_state_nr_BANG___3;
  return set_state_nr_BANG_;
}();
om.core.update_state_BANG_ = function() {
  var update_state_BANG_ = null;
  var update_state_BANG___2 = function(owner, f) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    return om.core.set_state_BANG_.call(null, owner, f.call(null, om.core.get_state.call(null, owner)));
  };
  var update_state_BANG___3 = function(owner, korks, f) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    return om.core.set_state_BANG_.call(null, owner, korks, f.call(null, om.core.get_state.call(null, owner, korks)));
  };
  update_state_BANG_ = function(owner, korks, f) {
    switch(arguments.length) {
      case 2:
        return update_state_BANG___2.call(this, owner, korks);
      case 3:
        return update_state_BANG___3.call(this, owner, korks, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_state_BANG_.cljs$core$IFn$_invoke$arity$2 = update_state_BANG___2;
  update_state_BANG_.cljs$core$IFn$_invoke$arity$3 = update_state_BANG___3;
  return update_state_BANG_;
}();
om.core.update_state_nr_BANG_ = function() {
  var update_state_nr_BANG_ = null;
  var update_state_nr_BANG___2 = function(owner, f) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    return om.core.set_state_nr_BANG_.call(null, owner, f.call(null, om.core.get_state.call(null, owner)));
  };
  var update_state_nr_BANG___3 = function(owner, korks, f) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    if (cljs.core.ifn_QMARK_.call(null, f)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "ifn?", "ifn?", -2106461064, null), new cljs.core.Symbol(null, "f", "f", 43394975, null))))].join(""));
    }
    return om.core.set_state_nr_BANG_.call(null, owner, korks, f.call(null, om.core.get_state.call(null, owner, korks)));
  };
  update_state_nr_BANG_ = function(owner, korks, f) {
    switch(arguments.length) {
      case 2:
        return update_state_nr_BANG___2.call(this, owner, korks);
      case 3:
        return update_state_nr_BANG___3.call(this, owner, korks, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_state_nr_BANG_.cljs$core$IFn$_invoke$arity$2 = update_state_nr_BANG___2;
  update_state_nr_BANG_.cljs$core$IFn$_invoke$arity$3 = update_state_nr_BANG___3;
  return update_state_nr_BANG_;
}();
om.core.refresh_BANG_ = function refresh_BANG_(owner) {
  if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
  }
  return om.core.update_state_BANG_.call(null, owner, cljs.core.identity);
};
om.core.get_render_state = function() {
  var get_render_state = null;
  var get_render_state__1 = function(owner) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    return om.core._get_render_state.call(null, owner);
  };
  var get_render_state__2 = function(owner, korks) {
    if (cljs.core.truth_(om.core.component_QMARK_.call(null, owner))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "component?", "component?", 2048315517, null), new cljs.core.Symbol(null, "owner", "owner", 1247919588, null))))].join(""));
    }
    var ks = cljs.core.sequential_QMARK_.call(null, korks) ? korks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [korks], null);
    return om.core._get_render_state.call(null, owner, ks);
  };
  get_render_state = function(owner, korks) {
    switch(arguments.length) {
      case 1:
        return get_render_state__1.call(this, owner);
      case 2:
        return get_render_state__2.call(this, owner, korks);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_render_state.cljs$core$IFn$_invoke$arity$1 = get_render_state__1;
  get_render_state.cljs$core$IFn$_invoke$arity$2 = get_render_state__2;
  return get_render_state;
}();
goog.provide("mentionmyfollowers.core");
goog.require("cljs.core");
goog.require("domina.css");
goog.require("ajax.core");
goog.require("om.dom");
goog.require("domina");
goog.require("om.core");
goog.require("clojure.string");
mentionmyfollowers.core.api_get_followers = "http://dragon-alien.codio.io:3000/api/followers";
cljs.core.enable_console_print_BANG_.call(null);
cljs.core.println.call(null, "Mention My Followers Chrome Extenssion");
if (typeof mentionmyfollowers.core.app_state !== "undefined") {
} else {
  mentionmyfollowers.core.app_state = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "user", "user", 1532431356), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "user-id", "user-id", -206822291), null], null), new cljs.core.Keyword(null, "accounts", "accounts", -935308676), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "followers-and-selection", "followers-and-selection", -1144286188), new cljs.core.PersistentArrayMap(null, 
  2, [new cljs.core.Keyword(null, "followers", "followers", 1992141885), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "selection", "selection", 975998651), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "from", "from", 1815293044), null, new cljs.core.Keyword(null, "to", "to", 192099007), null], null)], null)], null));
}
mentionmyfollowers.core.read_user_id = function read_user_id(f) {
  var query = {"name":"ds_user_id", "url":"https://instagram.com/"};
  cljs.core.println.call(null, "querying ds_user_id cookie");
  return chrome.cookies.get(query, function(query) {
    return function(cookie) {
      cljs.core.println.call(null, "Got value for ds_user_id cookie", cookie.value);
      return f.call(null, cookie.value);
    };
  }(query));
};
mentionmyfollowers.core.show_user_id = function show_user_id(p__93721, owner) {
  var map__93726 = p__93721;
  var map__93726__$1 = cljs.core.seq_QMARK_.call(null, map__93726) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93726) : map__93726;
  var user_id = cljs.core.get.call(null, map__93726__$1, new cljs.core.Keyword(null, "user-id", "user-id", -206822291));
  if (typeof mentionmyfollowers.core.t93727 !== "undefined") {
  } else {
    mentionmyfollowers.core.t93727 = function(user_id, map__93726, owner, p__93721, show_user_id, meta93728) {
      this.user_id = user_id;
      this.map__93726 = map__93726;
      this.owner = owner;
      this.p__93721 = p__93721;
      this.show_user_id = show_user_id;
      this.meta93728 = meta93728;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    mentionmyfollowers.core.t93727.prototype.om$core$IRender$ = true;
    mentionmyfollowers.core.t93727.prototype.om$core$IRender$render$arity$1 = function(map__93726, map__93726__$1, user_id) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return React.DOM.p(null, [cljs.core.str("User-id is "), cljs.core.str(cljs.core.truth_(self__.user_id) ? self__.user_id : "Not Available")].join(""));
      };
    }(map__93726, map__93726__$1, user_id);
    mentionmyfollowers.core.t93727.prototype.cljs$core$IMeta$_meta$arity$1 = function(map__93726, map__93726__$1, user_id) {
      return function(_93729) {
        var self__ = this;
        var _93729__$1 = this;
        return self__.meta93728;
      };
    }(map__93726, map__93726__$1, user_id);
    mentionmyfollowers.core.t93727.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(map__93726, map__93726__$1, user_id) {
      return function(_93729, meta93728__$1) {
        var self__ = this;
        var _93729__$1 = this;
        return new mentionmyfollowers.core.t93727(self__.user_id, self__.map__93726, self__.owner, self__.p__93721, self__.show_user_id, meta93728__$1);
      };
    }(map__93726, map__93726__$1, user_id);
    mentionmyfollowers.core.t93727.cljs$lang$type = true;
    mentionmyfollowers.core.t93727.cljs$lang$ctorStr = "mentionmyfollowers.core/t93727";
    mentionmyfollowers.core.t93727.cljs$lang$ctorPrWriter = function(map__93726, map__93726__$1, user_id) {
      return function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
        return cljs.core._write.call(null, writer__4569__auto__, "mentionmyfollowers.core/t93727");
      };
    }(map__93726, map__93726__$1, user_id);
    mentionmyfollowers.core.__GT_t93727 = function(map__93726, map__93726__$1, user_id) {
      return function __GT_t93727(user_id__$1, map__93726__$2, owner__$1, p__93721__$1, show_user_id__$1, meta93728) {
        return new mentionmyfollowers.core.t93727(user_id__$1, map__93726__$2, owner__$1, p__93721__$1, show_user_id__$1, meta93728);
      };
    }(map__93726, map__93726__$1, user_id);
  }
  return new mentionmyfollowers.core.t93727(user_id, map__93726__$1, owner, p__93721, show_user_id, cljs.core.PersistentArrayMap.EMPTY);
};
mentionmyfollowers.core.accounts_form = function accounts_form(accounts, owner, p__93730) {
  var map__93737 = p__93730;
  var map__93737__$1 = cljs.core.seq_QMARK_.call(null, map__93737) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93737) : map__93737;
  var on_get_followers = cljs.core.get.call(null, map__93737__$1, new cljs.core.Keyword(null, "on-get-followers", "on-get-followers", 87044518));
  if (typeof mentionmyfollowers.core.t93738 !== "undefined") {
  } else {
    mentionmyfollowers.core.t93738 = function(on_get_followers, map__93737, p__93730, owner, accounts, accounts_form, meta93739) {
      this.on_get_followers = on_get_followers;
      this.map__93737 = map__93737;
      this.p__93730 = p__93730;
      this.owner = owner;
      this.accounts = accounts;
      this.accounts_form = accounts_form;
      this.meta93739 = meta93739;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    mentionmyfollowers.core.t93738.prototype.om$core$IRenderState$ = true;
    mentionmyfollowers.core.t93738.prototype.om$core$IRenderState$render_state$arity$2 = function(map__93737, map__93737__$1, on_get_followers) {
      return function(_, p__93741) {
        var self__ = this;
        var map__93742 = p__93741;
        var map__93742__$1 = cljs.core.seq_QMARK_.call(null, map__93742) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93742) : map__93742;
        var text = cljs.core.get.call(null, map__93742__$1, new cljs.core.Keyword(null, "accounts", "accounts", -935308676));
        var ___$1 = this;
        return React.DOM.form(null, React.DOM.div({"className":"form-group"}, React.DOM.label({"htmlFor":"accounts-input"}, "Accounts:"), om.dom.textarea.call(null, {"onChange":function(___$1, map__93742, map__93742__$1, text, map__93737, map__93737__$1, on_get_followers) {
          return function(e) {
            return om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "accounts", "accounts", -935308676), e.target.value);
          };
        }(___$1, map__93742, map__93742__$1, text, map__93737, map__93737__$1, on_get_followers), "value":text, "rows":"3", "className":"form-control", "id":"accounts-input"})), React.DOM.button({"onClick":function(___$1, map__93742, map__93742__$1, text, map__93737, map__93737__$1, on_get_followers) {
          return function(e) {
            e.preventDefault();
            cljs.core.println.call(null, "Get followers button clicked");
            var new_accounts = clojure.string.split.call(null, text, / /);
            om.core.update_BANG_.call(null, self__.accounts, new_accounts);
            return self__.on_get_followers.call(null, new_accounts);
          };
        }(___$1, map__93742, map__93742__$1, text, map__93737, map__93737__$1, on_get_followers), "className":"btn btn-primary"}, "Get Followers"));
      };
    }(map__93737, map__93737__$1, on_get_followers);
    mentionmyfollowers.core.t93738.prototype.om$core$IInitState$ = true;
    mentionmyfollowers.core.t93738.prototype.om$core$IInitState$init_state$arity$1 = function(map__93737, map__93737__$1, on_get_followers) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "accounts", "accounts", -935308676), clojure.string.join.call(null, " ", self__.accounts)], null);
      };
    }(map__93737, map__93737__$1, on_get_followers);
    mentionmyfollowers.core.t93738.prototype.cljs$core$IMeta$_meta$arity$1 = function(map__93737, map__93737__$1, on_get_followers) {
      return function(_93740) {
        var self__ = this;
        var _93740__$1 = this;
        return self__.meta93739;
      };
    }(map__93737, map__93737__$1, on_get_followers);
    mentionmyfollowers.core.t93738.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(map__93737, map__93737__$1, on_get_followers) {
      return function(_93740, meta93739__$1) {
        var self__ = this;
        var _93740__$1 = this;
        return new mentionmyfollowers.core.t93738(self__.on_get_followers, self__.map__93737, self__.p__93730, self__.owner, self__.accounts, self__.accounts_form, meta93739__$1);
      };
    }(map__93737, map__93737__$1, on_get_followers);
    mentionmyfollowers.core.t93738.cljs$lang$type = true;
    mentionmyfollowers.core.t93738.cljs$lang$ctorStr = "mentionmyfollowers.core/t93738";
    mentionmyfollowers.core.t93738.cljs$lang$ctorPrWriter = function(map__93737, map__93737__$1, on_get_followers) {
      return function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
        return cljs.core._write.call(null, writer__4569__auto__, "mentionmyfollowers.core/t93738");
      };
    }(map__93737, map__93737__$1, on_get_followers);
    mentionmyfollowers.core.__GT_t93738 = function(map__93737, map__93737__$1, on_get_followers) {
      return function __GT_t93738(on_get_followers__$1, map__93737__$2, p__93730__$1, owner__$1, accounts__$1, accounts_form__$1, meta93739) {
        return new mentionmyfollowers.core.t93738(on_get_followers__$1, map__93737__$2, p__93730__$1, owner__$1, accounts__$1, accounts_form__$1, meta93739);
      };
    }(map__93737, map__93737__$1, on_get_followers);
  }
  return new mentionmyfollowers.core.t93738(on_get_followers, map__93737__$1, p__93730, owner, accounts, accounts_form, cljs.core.PersistentArrayMap.EMPTY);
};
mentionmyfollowers.core.report_error_BANG_ = function report_error_BANG_(p__93743) {
  var map__93745 = p__93743;
  var map__93745__$1 = cljs.core.seq_QMARK_.call(null, map__93745) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93745) : map__93745;
  var error = map__93745__$1;
  var failure = cljs.core.get.call(null, map__93745__$1, new cljs.core.Keyword(null, "failure", "failure", 720415879));
  var status_text = cljs.core.get.call(null, map__93745__$1, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478));
  var status = cljs.core.get.call(null, map__93745__$1, new cljs.core.Keyword(null, "status", "status", -1997798413));
  return cljs.core.println.call(null, error);
};
mentionmyfollowers.core.loading_followers = function loading_followers(_, ___$1) {
  if (typeof mentionmyfollowers.core.t93749 !== "undefined") {
  } else {
    mentionmyfollowers.core.t93749 = function(_, loading_followers, meta93750) {
      this._ = _;
      this.loading_followers = loading_followers;
      this.meta93750 = meta93750;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    mentionmyfollowers.core.t93749.prototype.om$core$IRender$ = true;
    mentionmyfollowers.core.t93749.prototype.om$core$IRender$render$arity$1 = function(___$1) {
      var self__ = this;
      var ___$2 = this;
      return React.DOM.div({"className":"progress"}, React.DOM.div({"aria-valuemax":"100", "aria-valuemin":"0", "aria-valuenow":"75", "role":"progressbar", "className":"progress-bar progress-bar-striped active"}));
    };
    mentionmyfollowers.core.t93749.prototype.cljs$core$IMeta$_meta$arity$1 = function(_93751) {
      var self__ = this;
      var _93751__$1 = this;
      return self__.meta93750;
    };
    mentionmyfollowers.core.t93749.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_93751, meta93750__$1) {
      var self__ = this;
      var _93751__$1 = this;
      return new mentionmyfollowers.core.t93749(self__._, self__.loading_followers, meta93750__$1);
    };
    mentionmyfollowers.core.t93749.cljs$lang$type = true;
    mentionmyfollowers.core.t93749.cljs$lang$ctorStr = "mentionmyfollowers.core/t93749";
    mentionmyfollowers.core.t93749.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "mentionmyfollowers.core/t93749");
    };
    mentionmyfollowers.core.__GT_t93749 = function __GT_t93749(___$2, loading_followers__$1, meta93750) {
      return new mentionmyfollowers.core.t93749(___$2, loading_followers__$1, meta93750);
    };
  }
  return new mentionmyfollowers.core.t93749(___$1, loading_followers, cljs.core.PersistentArrayMap.EMPTY);
};
mentionmyfollowers.core.follower_item = function follower_item(followers, owner, p__93752) {
  var map__93757 = p__93752;
  var map__93757__$1 = cljs.core.seq_QMARK_.call(null, map__93757) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93757) : map__93757;
  var is_selected_QMARK_ = cljs.core.get.call(null, map__93757__$1, new cljs.core.Keyword(null, "is-selected?", "is-selected?", 694061043));
  var on_click = cljs.core.get.call(null, map__93757__$1, new cljs.core.Keyword(null, "on-click", "on-click", 1632826543));
  var idx = cljs.core.get.call(null, map__93757__$1, new cljs.core.Keyword(null, "idx", "idx", 1053688473));
  if (typeof mentionmyfollowers.core.t93758 !== "undefined") {
  } else {
    mentionmyfollowers.core.t93758 = function(idx, on_click, is_selected_QMARK_, map__93757, p__93752, owner, followers, follower_item, meta93759) {
      this.idx = idx;
      this.on_click = on_click;
      this.is_selected_QMARK_ = is_selected_QMARK_;
      this.map__93757 = map__93757;
      this.p__93752 = p__93752;
      this.owner = owner;
      this.followers = followers;
      this.follower_item = follower_item;
      this.meta93759 = meta93759;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    mentionmyfollowers.core.t93758.prototype.om$core$IRender$ = true;
    mentionmyfollowers.core.t93758.prototype.om$core$IRender$render$arity$1 = function(map__93757, map__93757__$1, is_selected_QMARK_, on_click, idx) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return React.DOM.a({"onClick":self__.on_click, "className":[cljs.core.str("list-group-item"), cljs.core.str(cljs.core.truth_(self__.is_selected_QMARK_) ? "active" : null)].join(""), "href":"#"}, cljs.core.get.call(null, self__.followers, self__.idx));
      };
    }(map__93757, map__93757__$1, is_selected_QMARK_, on_click, idx);
    mentionmyfollowers.core.t93758.prototype.cljs$core$IMeta$_meta$arity$1 = function(map__93757, map__93757__$1, is_selected_QMARK_, on_click, idx) {
      return function(_93760) {
        var self__ = this;
        var _93760__$1 = this;
        return self__.meta93759;
      };
    }(map__93757, map__93757__$1, is_selected_QMARK_, on_click, idx);
    mentionmyfollowers.core.t93758.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(map__93757, map__93757__$1, is_selected_QMARK_, on_click, idx) {
      return function(_93760, meta93759__$1) {
        var self__ = this;
        var _93760__$1 = this;
        return new mentionmyfollowers.core.t93758(self__.idx, self__.on_click, self__.is_selected_QMARK_, self__.map__93757, self__.p__93752, self__.owner, self__.followers, self__.follower_item, meta93759__$1);
      };
    }(map__93757, map__93757__$1, is_selected_QMARK_, on_click, idx);
    mentionmyfollowers.core.t93758.cljs$lang$type = true;
    mentionmyfollowers.core.t93758.cljs$lang$ctorStr = "mentionmyfollowers.core/t93758";
    mentionmyfollowers.core.t93758.cljs$lang$ctorPrWriter = function(map__93757, map__93757__$1, is_selected_QMARK_, on_click, idx) {
      return function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
        return cljs.core._write.call(null, writer__4569__auto__, "mentionmyfollowers.core/t93758");
      };
    }(map__93757, map__93757__$1, is_selected_QMARK_, on_click, idx);
    mentionmyfollowers.core.__GT_t93758 = function(map__93757, map__93757__$1, is_selected_QMARK_, on_click, idx) {
      return function __GT_t93758(idx__$1, on_click__$1, is_selected_QMARK___$1, map__93757__$2, p__93752__$1, owner__$1, followers__$1, follower_item__$1, meta93759) {
        return new mentionmyfollowers.core.t93758(idx__$1, on_click__$1, is_selected_QMARK___$1, map__93757__$2, p__93752__$1, owner__$1, followers__$1, follower_item__$1, meta93759);
      };
    }(map__93757, map__93757__$1, is_selected_QMARK_, on_click, idx);
  }
  return new mentionmyfollowers.core.t93758(idx, on_click, is_selected_QMARK_, map__93757__$1, p__93752, owner, followers, follower_item, cljs.core.PersistentArrayMap.EMPTY);
};
mentionmyfollowers.core.is_selected_QMARK_ = function is_selected_QMARK_(i, p__93761) {
  var map__93763 = p__93761;
  var map__93763__$1 = cljs.core.seq_QMARK_.call(null, map__93763) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93763) : map__93763;
  var to = cljs.core.get.call(null, map__93763__$1, new cljs.core.Keyword(null, "to", "to", 192099007));
  var from = cljs.core.get.call(null, map__93763__$1, new cljs.core.Keyword(null, "from", "from", 1815293044));
  if (cljs.core.not.call(null, function() {
    var or__3981__auto__ = from;
    if (cljs.core.truth_(or__3981__auto__)) {
      return or__3981__auto__;
    } else {
      return to;
    }
  }())) {
    return null;
  } else {
    if (cljs.core.truth_(function() {
      var and__3969__auto__ = from;
      if (cljs.core.truth_(and__3969__auto__)) {
        return to;
      } else {
        return and__3969__auto__;
      }
    }())) {
      return i >= from && i <= to;
    } else {
      if (cljs.core.truth_(from)) {
        return i >= from;
      } else {
        if (cljs.core.truth_(to)) {
          return i <= to;
        } else {
          return null;
        }
      }
    }
  }
};
mentionmyfollowers.core.update_selection = function update_selection(p__93764, idx) {
  var map__93766 = p__93764;
  var map__93766__$1 = cljs.core.seq_QMARK_.call(null, map__93766) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93766) : map__93766;
  var selection = map__93766__$1;
  var to = cljs.core.get.call(null, map__93766__$1, new cljs.core.Keyword(null, "to", "to", 192099007));
  var from = cljs.core.get.call(null, map__93766__$1, new cljs.core.Keyword(null, "from", "from", 1815293044));
  if (from == null || idx <= from) {
    return cljs.core.assoc.call(null, selection, new cljs.core.Keyword(null, "from", "from", 1815293044), idx);
  } else {
    return cljs.core.assoc.call(null, selection, new cljs.core.Keyword(null, "to", "to", 192099007), idx);
  }
};
mentionmyfollowers.core.select_followers_list = function select_followers_list(followers_and_selection, owner) {
  if (typeof mentionmyfollowers.core.t93771 !== "undefined") {
  } else {
    mentionmyfollowers.core.t93771 = function(owner, followers_and_selection, select_followers_list, meta93772) {
      this.owner = owner;
      this.followers_and_selection = followers_and_selection;
      this.select_followers_list = select_followers_list;
      this.meta93772 = meta93772;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    mentionmyfollowers.core.t93771.prototype.om$core$IRender$ = true;
    mentionmyfollowers.core.t93771.prototype.om$core$IRender$render$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.apply.call(null, om.dom.div, {"className":"list-group"}, function() {
        var followers = (new cljs.core.Keyword(null, "followers", "followers", 1992141885)).cljs$core$IFn$_invoke$arity$1(self__.followers_and_selection);
        return cljs.core.map.call(null, function(followers, ___$1) {
          return function(p1__93767_SHARP_) {
            return om.core.build.call(null, mentionmyfollowers.core.follower_item, followers, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opts", "opts", 155075701), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "idx", "idx", 1053688473), p1__93767_SHARP_, new cljs.core.Keyword(null, "is-selected?", "is-selected?", 694061043), mentionmyfollowers.core.is_selected_QMARK_.call(null, p1__93767_SHARP_, (new cljs.core.Keyword(null, "selection", "selection", 
            975998651)).cljs$core$IFn$_invoke$arity$1(self__.followers_and_selection)), new cljs.core.Keyword(null, "on-click", "on-click", 1632826543), function(followers, ___$1) {
              return function(e) {
                e.preventDefault();
                return om.core.transact_BANG_.call(null, self__.followers_and_selection, new cljs.core.Keyword(null, "selection", "selection", 975998651), function(followers, ___$1) {
                  return function(selection) {
                    return mentionmyfollowers.core.update_selection.call(null, selection, p1__93767_SHARP_);
                  };
                }(followers, ___$1));
              };
            }(followers, ___$1)], null)], null));
          };
        }(followers, ___$1), cljs.core.range.call(null, cljs.core.count.call(null, followers)));
      }());
    };
    mentionmyfollowers.core.t93771.prototype.cljs$core$IMeta$_meta$arity$1 = function(_93773) {
      var self__ = this;
      var _93773__$1 = this;
      return self__.meta93772;
    };
    mentionmyfollowers.core.t93771.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_93773, meta93772__$1) {
      var self__ = this;
      var _93773__$1 = this;
      return new mentionmyfollowers.core.t93771(self__.owner, self__.followers_and_selection, self__.select_followers_list, meta93772__$1);
    };
    mentionmyfollowers.core.t93771.cljs$lang$type = true;
    mentionmyfollowers.core.t93771.cljs$lang$ctorStr = "mentionmyfollowers.core/t93771";
    mentionmyfollowers.core.t93771.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "mentionmyfollowers.core/t93771");
    };
    mentionmyfollowers.core.__GT_t93771 = function __GT_t93771(owner__$1, followers_and_selection__$1, select_followers_list__$1, meta93772) {
      return new mentionmyfollowers.core.t93771(owner__$1, followers_and_selection__$1, select_followers_list__$1, meta93772);
    };
  }
  return new mentionmyfollowers.core.t93771(owner, followers_and_selection, select_followers_list, cljs.core.PersistentArrayMap.EMPTY);
};
mentionmyfollowers.core.select_followers = function select_followers(followers_and_selection, owner, p__93774) {
  var map__93780 = p__93774;
  var map__93780__$1 = cljs.core.seq_QMARK_.call(null, map__93780) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93780) : map__93780;
  var map__93781 = cljs.core.get.call(null, map__93780__$1, new cljs.core.Keyword(null, "opts", "opts", 155075701));
  var map__93781__$1 = cljs.core.seq_QMARK_.call(null, map__93781) ? cljs.core.apply.call(null, cljs.core.hash_map, map__93781) : map__93781;
  var on_cancel = cljs.core.get.call(null, map__93781__$1, new cljs.core.Keyword(null, "on-cancel", "on-cancel", -2071892932));
  if (typeof mentionmyfollowers.core.t93782 !== "undefined") {
  } else {
    mentionmyfollowers.core.t93782 = function(on_cancel, map__93781, map__93780, p__93774, owner, followers_and_selection, select_followers, meta93783) {
      this.on_cancel = on_cancel;
      this.map__93781 = map__93781;
      this.map__93780 = map__93780;
      this.p__93774 = p__93774;
      this.owner = owner;
      this.followers_and_selection = followers_and_selection;
      this.select_followers = select_followers;
      this.meta93783 = meta93783;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    mentionmyfollowers.core.t93782.prototype.om$core$IRender$ = true;
    mentionmyfollowers.core.t93782.prototype.om$core$IRender$render$arity$1 = function(map__93780, map__93780__$1, map__93781, map__93781__$1, on_cancel) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return React.DOM.div(null, om.core.build.call(null, mentionmyfollowers.core.select_followers_list, self__.followers_and_selection), React.DOM.button({"className":"btn btn-primary"}, "Go"), React.DOM.button({"onClick":self__.on_cancel, "className":"btn btn-danger"}, "Cancel"));
      };
    }(map__93780, map__93780__$1, map__93781, map__93781__$1, on_cancel);
    mentionmyfollowers.core.t93782.prototype.cljs$core$IMeta$_meta$arity$1 = function(map__93780, map__93780__$1, map__93781, map__93781__$1, on_cancel) {
      return function(_93784) {
        var self__ = this;
        var _93784__$1 = this;
        return self__.meta93783;
      };
    }(map__93780, map__93780__$1, map__93781, map__93781__$1, on_cancel);
    mentionmyfollowers.core.t93782.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(map__93780, map__93780__$1, map__93781, map__93781__$1, on_cancel) {
      return function(_93784, meta93783__$1) {
        var self__ = this;
        var _93784__$1 = this;
        return new mentionmyfollowers.core.t93782(self__.on_cancel, self__.map__93781, self__.map__93780, self__.p__93774, self__.owner, self__.followers_and_selection, self__.select_followers, meta93783__$1);
      };
    }(map__93780, map__93780__$1, map__93781, map__93781__$1, on_cancel);
    mentionmyfollowers.core.t93782.cljs$lang$type = true;
    mentionmyfollowers.core.t93782.cljs$lang$ctorStr = "mentionmyfollowers.core/t93782";
    mentionmyfollowers.core.t93782.cljs$lang$ctorPrWriter = function(map__93780, map__93780__$1, map__93781, map__93781__$1, on_cancel) {
      return function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
        return cljs.core._write.call(null, writer__4569__auto__, "mentionmyfollowers.core/t93782");
      };
    }(map__93780, map__93780__$1, map__93781, map__93781__$1, on_cancel);
    mentionmyfollowers.core.__GT_t93782 = function(map__93780, map__93780__$1, map__93781, map__93781__$1, on_cancel) {
      return function __GT_t93782(on_cancel__$1, map__93781__$2, map__93780__$2, p__93774__$1, owner__$1, followers_and_selection__$1, select_followers__$1, meta93783) {
        return new mentionmyfollowers.core.t93782(on_cancel__$1, map__93781__$2, map__93780__$2, p__93774__$1, owner__$1, followers_and_selection__$1, select_followers__$1, meta93783);
      };
    }(map__93780, map__93780__$1, map__93781, map__93781__$1, on_cancel);
  }
  return new mentionmyfollowers.core.t93782(on_cancel, map__93781__$1, map__93780__$1, p__93774, owner, followers_and_selection, select_followers, cljs.core.PersistentArrayMap.EMPTY);
};
mentionmyfollowers.core.application = function application(data, owner) {
  if (typeof mentionmyfollowers.core.t93792 !== "undefined") {
  } else {
    mentionmyfollowers.core.t93792 = function(owner, data, application, meta93793) {
      this.owner = owner;
      this.data = data;
      this.application = application;
      this.meta93793 = meta93793;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    mentionmyfollowers.core.t93792.prototype.om$core$IRenderState$ = true;
    mentionmyfollowers.core.t93792.prototype.om$core$IRenderState$render_state$arity$2 = function(_, state) {
      var self__ = this;
      var ___$1 = this;
      var handle_get_followers = function(___$1) {
        return function(accounts) {
          om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "view", "view", 1247994814), new cljs.core.Keyword(null, "loading-followers", "loading-followers", 1692268659));
          return ajax.core.POST.call(null, mentionmyfollowers.core.api_get_followers, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "params", "params", 710516235), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "user-id", "user-id", -206822291), cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.data), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "user", "user", 1532431356), 
          new cljs.core.Keyword(null, "user-id", "user-id", -206822291)], null)), new cljs.core.Keyword(null, "user-names", "user-names", -1553852069), accounts], null), new cljs.core.Keyword(null, "format", "format", -1306924766), new cljs.core.Keyword(null, "edn", "edn", 1317840885), new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), new cljs.core.Keyword(null, "edn", "edn", 1317840885), new cljs.core.Keyword(null, "handler", "handler", -195596612), function(___$1) {
            return function(followers) {
              cljs.core.println.call(null, "Received followers", followers);
              om.core.update_BANG_.call(null, self__.data, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "followers-and-selection", "followers-and-selection", -1144286188), new cljs.core.Keyword(null, "followers", "followers", 1992141885)], null), cljs.core.vec.call(null, followers));
              return om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "view", "view", 1247994814), new cljs.core.Keyword(null, "select-followers", "select-followers", -1421776266));
            };
          }(___$1), new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776), function(___$1) {
            return function(error) {
              mentionmyfollowers.core.report_error_BANG_.call(null, error);
              return om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "view", "view", 1247994814), new cljs.core.Keyword(null, "accounts-form", "accounts-form", -328669534));
            };
          }(___$1)], null));
        };
      }(___$1);
      return React.DOM.div({"className":"container"}, function() {
        var pred__93795 = cljs.core._EQ_;
        var expr__93796 = (new cljs.core.Keyword(null, "view", "view", 1247994814)).cljs$core$IFn$_invoke$arity$1(state);
        if (cljs.core.truth_(pred__93795.call(null, new cljs.core.Keyword(null, "accounts-form", "accounts-form", -328669534), expr__93796))) {
          return om.core.build.call(null, mentionmyfollowers.core.accounts_form, (new cljs.core.Keyword(null, "accounts", "accounts", -935308676)).cljs$core$IFn$_invoke$arity$1(self__.data), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opts", "opts", 155075701), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-get-followers", "on-get-followers", 87044518), handle_get_followers], null)], null));
        } else {
          if (cljs.core.truth_(pred__93795.call(null, new cljs.core.Keyword(null, "loading-followers", "loading-followers", 1692268659), expr__93796))) {
            return om.core.build.call(null, mentionmyfollowers.core.loading_followers, null);
          } else {
            if (cljs.core.truth_(pred__93795.call(null, new cljs.core.Keyword(null, "select-followers", "select-followers", -1421776266), expr__93796))) {
              return om.core.build.call(null, mentionmyfollowers.core.select_followers, (new cljs.core.Keyword(null, "followers-and-selection", "followers-and-selection", -1144286188)).cljs$core$IFn$_invoke$arity$1(self__.data), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "opts", "opts", 155075701), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "on-cancel", "on-cancel", -2071892932), function(pred__93795, expr__93796, handle_get_followers, ___$1) {
                return function(e) {
                  e.preventDefault();
                  return om.core.set_state_BANG_.call(null, self__.owner, new cljs.core.Keyword(null, "view", "view", 1247994814), mentionmyfollowers.core.accounts_form);
                };
              }(pred__93795, expr__93796, handle_get_followers, ___$1)], null)], null));
            } else {
              throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__93796)].join(""));
            }
          }
        }
      }());
    };
    mentionmyfollowers.core.t93792.prototype.om$core$IInitState$ = true;
    mentionmyfollowers.core.t93792.prototype.om$core$IInitState$init_state$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "view", "view", 1247994814), new cljs.core.Keyword(null, "accounts-form", "accounts-form", -328669534)], null);
    };
    mentionmyfollowers.core.t93792.prototype.om$core$IWillMount$ = true;
    mentionmyfollowers.core.t93792.prototype.om$core$IWillMount$will_mount$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.println.call(null, "application - Will Mount");
      return mentionmyfollowers.core.read_user_id.call(null, function(___$1) {
        return function(p1__93785_SHARP_) {
          return om.core.transact_BANG_.call(null, self__.data, new cljs.core.Keyword(null, "user", "user", 1532431356), function(___$1) {
            return function(user) {
              return cljs.core.assoc.call(null, user, new cljs.core.Keyword(null, "user-id", "user-id", -206822291), p1__93785_SHARP_);
            };
          }(___$1));
        };
      }(___$1));
    };
    mentionmyfollowers.core.t93792.prototype.cljs$core$IMeta$_meta$arity$1 = function(_93794) {
      var self__ = this;
      var _93794__$1 = this;
      return self__.meta93793;
    };
    mentionmyfollowers.core.t93792.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_93794, meta93793__$1) {
      var self__ = this;
      var _93794__$1 = this;
      return new mentionmyfollowers.core.t93792(self__.owner, self__.data, self__.application, meta93793__$1);
    };
    mentionmyfollowers.core.t93792.cljs$lang$type = true;
    mentionmyfollowers.core.t93792.cljs$lang$ctorStr = "mentionmyfollowers.core/t93792";
    mentionmyfollowers.core.t93792.cljs$lang$ctorPrWriter = function(this__4568__auto__, writer__4569__auto__, opt__4570__auto__) {
      return cljs.core._write.call(null, writer__4569__auto__, "mentionmyfollowers.core/t93792");
    };
    mentionmyfollowers.core.__GT_t93792 = function __GT_t93792(owner__$1, data__$1, application__$1, meta93793) {
      return new mentionmyfollowers.core.t93792(owner__$1, data__$1, application__$1, meta93793);
    };
  }
  return new mentionmyfollowers.core.t93792(owner, data, application, cljs.core.PersistentArrayMap.EMPTY);
};
om.core.root.call(null, mentionmyfollowers.core.application, mentionmyfollowers.core.app_state, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "target", "target", 253001721), domina.single_node.call(null, domina.css.sel.call(null, "#app"))], null));

//# sourceMappingURL=main.js.map